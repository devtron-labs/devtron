// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bean "github.com/devtron-labs/devtron/api/bean"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CheckForApproverAccess provides a mock function with given fields: appName, envName, userId
func (_m *UserService) CheckForApproverAccess(appName string, envName string, userId int32) bool {
	ret := _m.Called(appName, envName, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int32) bool); ok {
		r0 = rf(appName, envName, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckUserRoles provides a mock function with given fields: id
func (_m *UserService) CheckUserRoles(id int32) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int32) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: userInfo, token, managerAuth
func (_m *UserService) CreateUser(userInfo *bean.UserInfo, token string, managerAuth func(string, string, string) bool) ([]*bean.UserInfo, error) {
	ret := _m.Called(userInfo, token, managerAuth)

	var r0 []*bean.UserInfo
	if rf, ok := ret.Get(0).(func(*bean.UserInfo, string, func(string, string, string) bool) []*bean.UserInfo); ok {
		r0 = rf(userInfo, token, managerAuth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bean.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.UserInfo, string, func(string, string, string) bool) error); ok {
		r1 = rf(userInfo, token, managerAuth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: userInfo
func (_m *UserService) DeleteUser(userInfo *bean.UserInfo) (bool, error) {
	ret := _m.Called(userInfo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*bean.UserInfo) bool); ok {
		r0 = rf(userInfo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.UserInfo) error); ok {
		r1 = rf(userInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *UserService) GetAll() ([]bean.UserInfo, error) {
	ret := _m.Called()

	var r0 []bean.UserInfo
	if rf, ok := ret.Get(0).(func() []bean.UserInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bean.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDetailedUsers provides a mock function with given fields:
func (_m *UserService) GetAllDetailedUsers() ([]bean.UserInfo, error) {
	ret := _m.Called()

	var r0 []bean.UserInfo
	if rf, ok := ret.Get(0).(func() []bean.UserInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bean.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApprovalUsersByEnv provides a mock function with given fields: appName, envName
func (_m *UserService) GetApprovalUsersByEnv(appName string, envName string) ([]string, error) {
	ret := _m.Called(appName, envName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(appName, envName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appName, envName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UserService) GetById(id int32) (*bean.UserInfo, error) {
	ret := _m.Called(id)

	var r0 *bean.UserInfo
	if rf, ok := ret.Get(0).(func(int32) *bean.UserInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdIncludeDeleted provides a mock function with given fields: id
func (_m *UserService) GetByIdIncludeDeleted(id int32) (*bean.UserInfo, error) {
	ret := _m.Called(id)

	var r0 *bean.UserInfo
	if rf, ok := ret.Get(0).(func(int32) *bean.UserInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIds provides a mock function with given fields: ids
func (_m *UserService) GetByIds(ids []int32) ([]bean.UserInfo, error) {
	ret := _m.Called(ids)

	var r0 []bean.UserInfo
	if rf, ok := ret.Get(0).(func([]int32) []bean.UserInfo); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bean.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigApprovalUsersByEnv provides a mock function with given fields: appName, envName
func (_m *UserService) GetConfigApprovalUsersByEnv(appName string, envName string) ([]string, error) {
	ret := _m.Called(appName, envName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(appName, envName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appName, envName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailFromToken provides a mock function with given fields: token
func (_m *UserService) GetEmailFromToken(token string) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggedInUser provides a mock function with given fields: r
func (_m *UserService) GetLoggedInUser(r *http.Request) (int32, error) {
	ret := _m.Called(r)

	var r0 int32
	if rf, ok := ret.Get(0).(func(*http.Request) int32); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleFiltersByGroupNames provides a mock function with given fields: groupNames
func (_m *UserService) GetRoleFiltersByGroupNames(groupNames []string) ([]bean.RoleFilter, error) {
	ret := _m.Called(groupNames)

	var r0 []bean.RoleFilter
	if rf, ok := ret.Get(0).(func([]string) []bean.RoleFilter); ok {
		r0 = rf(groupNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bean.RoleFilter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(groupNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByToken provides a mock function with given fields: _a0, token
func (_m *UserService) GetUserByToken(_a0 context.Context, token string) (int32, string, error) {
	ret := _m.Called(_a0, token)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, string) int32); ok {
		r0 = rf(_a0, token)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(_a0, token)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsSuperAdmin provides a mock function with given fields: userId
func (_m *UserService) IsSuperAdmin(userId int) (bool, error) {
	ret := _m.Called(userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveLoginAudit provides a mock function with given fields: emailId, clientIp, id
func (_m *UserService) SaveLoginAudit(emailId string, clientIp string, id int32) {
	_m.Called(emailId, clientIp, id)
}

// SelfRegisterUserIfNotExists provides a mock function with given fields: userInfo
func (_m *UserService) SelfRegisterUserIfNotExists(userInfo *bean.UserInfo) ([]*bean.UserInfo, error) {
	ret := _m.Called(userInfo)

	var r0 []*bean.UserInfo
	if rf, ok := ret.Get(0).(func(*bean.UserInfo) []*bean.UserInfo); ok {
		r0 = rf(userInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bean.UserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.UserInfo) error); ok {
		r1 = rf(userInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncOrchestratorToCasbin provides a mock function with given fields:
func (_m *UserService) SyncOrchestratorToCasbin() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: userInfo, token, managerAuth
func (_m *UserService) UpdateUser(userInfo *bean.UserInfo, token string, managerAuth func(string, string, string) bool) (*bean.UserInfo, bool, bool, []string, error) {
	ret := _m.Called(userInfo, token, managerAuth)

	var r0 *bean.UserInfo
	if rf, ok := ret.Get(0).(func(*bean.UserInfo, string, func(string, string, string) bool) *bean.UserInfo); ok {
		r0 = rf(userInfo, token, managerAuth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.UserInfo)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*bean.UserInfo, string, func(string, string, string) bool) bool); ok {
		r1 = rf(userInfo, token, managerAuth)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(*bean.UserInfo, string, func(string, string, string) bool) bool); ok {
		r2 = rf(userInfo, token, managerAuth)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 []string
	if rf, ok := ret.Get(3).(func(*bean.UserInfo, string, func(string, string, string) bool) []string); ok {
		r3 = rf(userInfo, token, managerAuth)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).([]string)
		}
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(*bean.UserInfo, string, func(string, string, string) bool) error); ok {
		r4 = rf(userInfo, token, managerAuth)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// UserExists provides a mock function with given fields: emailId
func (_m *UserService) UserExists(emailId string) bool {
	ret := _m.Called(emailId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(emailId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
