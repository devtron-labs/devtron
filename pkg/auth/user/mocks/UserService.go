// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/user/UserService.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	http "net/http"
	reflect "reflect"

	bean "github.com/devtron-labs/devtron/api/bean"
	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CheckUserRoles mocks base method.
func (m *MockUserService) CheckUserRoles(id int32) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserRoles", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserRoles indicates an expected call of CheckUserRoles.
func (mr *MockUserServiceMockRecorder) CheckUserRoles(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserRoles", reflect.TypeOf((*MockUserService)(nil).CheckUserRoles), id)
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(userInfo *bean.UserInfo, token string, managerAuth func(string, string, string) bool) ([]*bean.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userInfo, token, managerAuth)
	ret0, _ := ret[0].([]*bean.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(userInfo, token, managerAuth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), userInfo, token, managerAuth)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(userInfo *bean.UserInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userInfo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), userInfo)
}

// GetAll mocks base method.
func (m *MockUserService) GetAll() ([]bean.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]bean.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserService)(nil).GetAll))
}

// GetAllDetailedUsers mocks base method.
func (m *MockUserService) GetAllDetailedUsers() ([]bean.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDetailedUsers")
	ret0, _ := ret[0].([]bean.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDetailedUsers indicates an expected call of GetAllDetailedUsers.
func (mr *MockUserServiceMockRecorder) GetAllDetailedUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDetailedUsers", reflect.TypeOf((*MockUserService)(nil).GetAllDetailedUsers))
}

// GetById mocks base method.
func (m *MockUserService) GetById(id int32) (*bean.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*bean.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserServiceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserService)(nil).GetById), id)
}

// GetByIdIncludeDeleted mocks base method.
func (m *MockUserService) GetByIdIncludeDeleted(id int32) (*bean.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdIncludeDeleted", id)
	ret0, _ := ret[0].(*bean.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdIncludeDeleted indicates an expected call of GetByIdIncludeDeleted.
func (mr *MockUserServiceMockRecorder) GetByIdIncludeDeleted(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdIncludeDeleted", reflect.TypeOf((*MockUserService)(nil).GetByIdIncludeDeleted), id)
}

// GetByIds mocks base method.
func (m *MockUserService) GetByIds(ids []int32) ([]bean.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ids)
	ret0, _ := ret[0].([]bean.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockUserServiceMockRecorder) GetByIds(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockUserService)(nil).GetByIds), ids)
}

// GetEmailFromToken mocks base method.
func (m *MockUserService) GetEmailFromToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailFromToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailFromToken indicates an expected call of GetEmailFromToken.
func (mr *MockUserServiceMockRecorder) GetEmailFromToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailFromToken", reflect.TypeOf((*MockUserService)(nil).GetEmailFromToken), token)
}

// GetLoggedInUser mocks base method.
func (m *MockUserService) GetLoggedInUser(r *http.Request) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggedInUser", r)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggedInUser indicates an expected call of GetLoggedInUser.
func (mr *MockUserServiceMockRecorder) GetLoggedInUser(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggedInUser", reflect.TypeOf((*MockUserService)(nil).GetLoggedInUser), r)
}

// GetRoleFiltersByGroupNames mocks base method.
func (m *MockUserService) GetRoleFiltersByGroupNames(groupNames []string) ([]bean.RoleFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleFiltersByGroupNames", groupNames)
	ret0, _ := ret[0].([]bean.RoleFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleFiltersByGroupNames indicates an expected call of GetRoleFiltersByGroupNames.
func (mr *MockUserServiceMockRecorder) GetRoleFiltersByGroupNames(groupNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleFiltersByGroupNames", reflect.TypeOf((*MockUserService)(nil).GetRoleFiltersByGroupNames), groupNames)
}

// GetUserByToken mocks base method.
func (m *MockUserService) GetUserByToken(context context.Context, token string) (int32, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", context, token)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockUserServiceMockRecorder) GetUserByToken(context, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockUserService)(nil).GetUserByToken), context, token)
}

// IsSuperAdmin mocks base method.
func (m *MockUserService) IsSuperAdmin(userId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuperAdmin", userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSuperAdmin indicates an expected call of IsSuperAdmin.
func (mr *MockUserServiceMockRecorder) IsSuperAdmin(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuperAdmin", reflect.TypeOf((*MockUserService)(nil).IsSuperAdmin), userId)
}

// SaveLoginAudit mocks base method.
func (m *MockUserService) SaveLoginAudit(emailId, clientIp string, id int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveLoginAudit", emailId, clientIp, id)
}

// SaveLoginAudit indicates an expected call of SaveLoginAudit.
func (mr *MockUserServiceMockRecorder) SaveLoginAudit(emailId, clientIp, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLoginAudit", reflect.TypeOf((*MockUserService)(nil).SaveLoginAudit), emailId, clientIp, id)
}

// SelfRegisterUserIfNotExists mocks base method.
func (m *MockUserService) SelfRegisterUserIfNotExists(userInfo *bean.UserInfo) ([]*bean.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfRegisterUserIfNotExists", userInfo)
	ret0, _ := ret[0].([]*bean.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelfRegisterUserIfNotExists indicates an expected call of SelfRegisterUserIfNotExists.
func (mr *MockUserServiceMockRecorder) SelfRegisterUserIfNotExists(userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfRegisterUserIfNotExists", reflect.TypeOf((*MockUserService)(nil).SelfRegisterUserIfNotExists), userInfo)
}

// SyncOrchestratorToCasbin mocks base method.
func (m *MockUserService) SyncOrchestratorToCasbin() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncOrchestratorToCasbin")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncOrchestratorToCasbin indicates an expected call of SyncOrchestratorToCasbin.
func (mr *MockUserServiceMockRecorder) SyncOrchestratorToCasbin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncOrchestratorToCasbin", reflect.TypeOf((*MockUserService)(nil).SyncOrchestratorToCasbin))
}

// UpdateTriggerPolicyForTerminalAccess mocks base method.
func (m *MockUserService) UpdateTriggerPolicyForTerminalAccess() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTriggerPolicyForTerminalAccess")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTriggerPolicyForTerminalAccess indicates an expected call of UpdateTriggerPolicyForTerminalAccess.
func (mr *MockUserServiceMockRecorder) UpdateTriggerPolicyForTerminalAccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTriggerPolicyForTerminalAccess", reflect.TypeOf((*MockUserService)(nil).UpdateTriggerPolicyForTerminalAccess))
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(userInfo *bean.UserInfo, token string, managerAuth func(string, string, string) bool) (*bean.UserInfo, bool, bool, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userInfo, token, managerAuth)
	ret0, _ := ret[0].(*bean.UserInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].([]string)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(userInfo, token, managerAuth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), userInfo, token, managerAuth)
}

// UserExists mocks base method.
func (m *MockUserService) UserExists(emailId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", emailId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserExists indicates an expected call of UserExists.
func (mr *MockUserServiceMockRecorder) UserExists(emailId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockUserService)(nil).UserExists), emailId)
}
