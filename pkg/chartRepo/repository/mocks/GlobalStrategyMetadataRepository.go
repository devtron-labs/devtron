// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	chartRepoRepository "github.com/devtron-labs/devtron/pkg/chartRepo/repository"
	mock "github.com/stretchr/testify/mock"
)

// GlobalStrategyMetadataRepository is an autogenerated mock type for the GlobalStrategyMetadataRepository type
type GlobalStrategyMetadataRepository struct {
	mock.Mock
}

// GetByChartRefId provides a mock function with given fields: chartRefId
func (_m *GlobalStrategyMetadataRepository) GetByChartRefId(chartRefId int) ([]*chartRepoRepository.GlobalStrategyMetadata, error) {
	ret := _m.Called(chartRefId)

	var r0 []*chartRepoRepository.GlobalStrategyMetadata
	if rf, ok := ret.Get(0).(func(int) []*chartRepoRepository.GlobalStrategyMetadata); ok {
		r0 = rf(chartRefId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chartRepoRepository.GlobalStrategyMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(chartRefId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGlobalStrategyMetadataRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGlobalStrategyMetadataRepository creates a new instance of GlobalStrategyMetadataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGlobalStrategyMetadataRepository(t mockConstructorTestingTNewGlobalStrategyMetadataRepository) *GlobalStrategyMetadataRepository {
	mock := &GlobalStrategyMetadataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
