// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	chartRepoRepository "github.com/devtron-labs/devtron/pkg/chartRepo/repository"
	mock "github.com/stretchr/testify/mock"
)

// ChartRepository is an autogenerated mock type for the ChartRepository type
type ChartRepository struct {
	mock.Mock
}

// FindActiveChart provides a mock function with given fields: appId
func (_m *ChartRepository) FindActiveChart(appId int) (*chartRepoRepository.Chart, error) {
	ret := _m.Called(appId)

	var r0 *chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(int) *chartRepoRepository.Chart); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindActiveChartsByAppId provides a mock function with given fields: appId
func (_m *ChartRepository) FindActiveChartsByAppId(appId int) ([]*chartRepoRepository.Chart, error) {
	ret := _m.Called(appId)

	var r0 []*chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(int) []*chartRepoRepository.Chart); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *ChartRepository) FindById(id int) (*chartRepoRepository.Chart, error) {
	ret := _m.Called(id)

	var r0 *chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(int) *chartRepoRepository.Chart); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindChartByAppIdAndRefId provides a mock function with given fields: appId, chartRefId
func (_m *ChartRepository) FindChartByAppIdAndRefId(appId int, chartRefId int) (*chartRepoRepository.Chart, error) {
	ret := _m.Called(appId, chartRefId)

	var r0 *chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(int, int) *chartRepoRepository.Chart); ok {
		r0 = rf(appId, chartRefId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, chartRefId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindChartByGitRepoUrl provides a mock function with given fields: gitRepoUrl
func (_m *ChartRepository) FindChartByGitRepoUrl(gitRepoUrl string) (*chartRepoRepository.Chart, error) {
	ret := _m.Called(gitRepoUrl)

	var r0 *chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(string) *chartRepoRepository.Chart); ok {
		r0 = rf(gitRepoUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(gitRepoUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindChartRefIdForLatestChartForAppByAppId provides a mock function with given fields: appId
func (_m *ChartRepository) FindChartRefIdForLatestChartForAppByAppId(appId int) (int, error) {
	ret := _m.Called(appId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(appId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCurrentChartVersion provides a mock function with given fields: chartRepo, chartName, chartVersionPattern
func (_m *ChartRepository) FindCurrentChartVersion(chartRepo string, chartName string, chartVersionPattern string) (string, error) {
	ret := _m.Called(chartRepo, chartName, chartVersionPattern)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(chartRepo, chartName, chartVersionPattern)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(chartRepo, chartName, chartVersionPattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestByAppId provides a mock function with given fields: appId
func (_m *ChartRepository) FindLatestByAppId(appId int) (*chartRepoRepository.Chart, error) {
	ret := _m.Called(appId)

	var r0 *chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(int) *chartRepoRepository.Chart); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestChartForAppByAppId provides a mock function with given fields: appId
func (_m *ChartRepository) FindLatestChartForAppByAppId(appId int) (*chartRepoRepository.Chart, error) {
	ret := _m.Called(appId)

	var r0 *chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(int) *chartRepoRepository.Chart); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNoLatestChartForAppByAppId provides a mock function with given fields: appId
func (_m *ChartRepository) FindNoLatestChartForAppByAppId(appId int) ([]*chartRepoRepository.Chart, error) {
	ret := _m.Called(appId)

	var r0 []*chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(int) []*chartRepoRepository.Chart); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNumberOfAppsWithDeploymentTemplate provides a mock function with given fields: appIds
func (_m *ChartRepository) FindNumberOfAppsWithDeploymentTemplate(appIds []int) (int, error) {
	ret := _m.Called(appIds)

	var r0 int
	if rf, ok := ret.Get(0).(func([]int) int); ok {
		r0 = rf(appIds)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(appIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: chartRepo, appName, chartVersion
func (_m *ChartRepository) FindOne(chartRepo string, appName string, chartVersion string) (*chartRepoRepository.Chart, error) {
	ret := _m.Called(chartRepo, appName, chartVersion)

	var r0 *chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(string, string, string) *chartRepoRepository.Chart); ok {
		r0 = rf(chartRepo, appName, chartVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(chartRepo, appName, chartVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPreviousChartByAppId provides a mock function with given fields: appId
func (_m *ChartRepository) FindPreviousChartByAppId(appId int) (*chartRepoRepository.Chart, error) {
	ret := _m.Called(appId)

	var r0 *chartRepoRepository.Chart
	if rf, ok := ret.Get(0).(func(int) *chartRepoRepository.Chart); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartRepoRepository.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *ChartRepository) Save(_a0 *chartRepoRepository.Chart) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*chartRepoRepository.Chart) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: chart
func (_m *ChartRepository) Update(chart *chartRepoRepository.Chart) error {
	ret := _m.Called(chart)

	var r0 error
	if rf, ok := ret.Get(0).(func(*chartRepoRepository.Chart) error); ok {
		r0 = rf(chart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChartRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewChartRepository creates a new instance of ChartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChartRepository(t mockConstructorTestingTNewChartRepository) *ChartRepository {
	mock := &ChartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
