// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pipeline/PipelineBuilder.go

// Package mock_pipeline is a generated GoMock package.
package mock_pipeline

import (
	context "context"
	reflect "reflect"

	bean "github.com/devtron-labs/devtron/api/bean"
	helper "github.com/devtron-labs/devtron/internal/sql/repository/helper"
	pipelineConfig "github.com/devtron-labs/devtron/internal/sql/repository/pipelineConfig"
	appGroup "github.com/devtron-labs/devtron/pkg/appGroup"
	bean0 "github.com/devtron-labs/devtron/pkg/bean"
	cluster "github.com/devtron-labs/devtron/pkg/cluster"
	pipeline "github.com/devtron-labs/devtron/pkg/pipeline"
	gomock "github.com/golang/mock/gomock"
)

// MockPipelineBuilder is a mock of PipelineBuilder interface.
type MockPipelineBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineBuilderMockRecorder
}

// MockPipelineBuilderMockRecorder is the mock recorder for MockPipelineBuilder.
type MockPipelineBuilderMockRecorder struct {
	mock *MockPipelineBuilder
}

// NewMockPipelineBuilder creates a new mock instance.
func NewMockPipelineBuilder(ctrl *gomock.Controller) *MockPipelineBuilder {
	mock := &MockPipelineBuilder{ctrl: ctrl}
	mock.recorder = &MockPipelineBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineBuilder) EXPECT() *MockPipelineBuilderMockRecorder {
	return m.recorder
}

// ChangeDeploymentType mocks base method.
func (m *MockPipelineBuilder) ChangeDeploymentType(ctx context.Context, request *bean0.DeploymentAppTypeChangeRequest) (*bean0.DeploymentAppTypeChangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDeploymentType", ctx, request)
	ret0, _ := ret[0].(*bean0.DeploymentAppTypeChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeDeploymentType indicates an expected call of ChangeDeploymentType.
func (mr *MockPipelineBuilderMockRecorder) ChangeDeploymentType(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDeploymentType", reflect.TypeOf((*MockPipelineBuilder)(nil).ChangeDeploymentType), ctx, request)
}

// ChangePipelineDeploymentType mocks base method.
func (m *MockPipelineBuilder) ChangePipelineDeploymentType(ctx context.Context, request *bean0.DeploymentAppTypeChangeRequest) (*bean0.DeploymentAppTypeChangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePipelineDeploymentType", ctx, request)
	ret0, _ := ret[0].(*bean0.DeploymentAppTypeChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePipelineDeploymentType indicates an expected call of ChangePipelineDeploymentType.
func (mr *MockPipelineBuilderMockRecorder) ChangePipelineDeploymentType(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePipelineDeploymentType", reflect.TypeOf((*MockPipelineBuilder)(nil).ChangePipelineDeploymentType), ctx, request)
}

// CreateApp mocks base method.
func (m *MockPipelineBuilder) CreateApp(request *bean0.CreateAppDTO) (*bean0.CreateAppDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", request)
	ret0, _ := ret[0].(*bean0.CreateAppDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockPipelineBuilderMockRecorder) CreateApp(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockPipelineBuilder)(nil).CreateApp), request)
}

// CreateCdPipelines mocks base method.
func (m *MockPipelineBuilder) CreateCdPipelines(cdPipelines *bean0.CdPipelines, ctx context.Context) (*bean0.CdPipelines, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCdPipelines", cdPipelines, ctx)
	ret0, _ := ret[0].(*bean0.CdPipelines)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCdPipelines indicates an expected call of CreateCdPipelines.
func (mr *MockPipelineBuilderMockRecorder) CreateCdPipelines(cdPipelines, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCdPipelines", reflect.TypeOf((*MockPipelineBuilder)(nil).CreateCdPipelines), cdPipelines, ctx)
}

// CreateCiPipeline mocks base method.
func (m *MockPipelineBuilder) CreateCiPipeline(createRequest *bean0.CiConfigRequest) (*bean0.PipelineCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCiPipeline", createRequest)
	ret0, _ := ret[0].(*bean0.PipelineCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCiPipeline indicates an expected call of CreateCiPipeline.
func (mr *MockPipelineBuilderMockRecorder) CreateCiPipeline(createRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCiPipeline", reflect.TypeOf((*MockPipelineBuilder)(nil).CreateCiPipeline), createRequest)
}

// CreateMaterialsForApp mocks base method.
func (m *MockPipelineBuilder) CreateMaterialsForApp(request *bean0.CreateMaterialDTO) (*bean0.CreateMaterialDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMaterialsForApp", request)
	ret0, _ := ret[0].(*bean0.CreateMaterialDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMaterialsForApp indicates an expected call of CreateMaterialsForApp.
func (mr *MockPipelineBuilderMockRecorder) CreateMaterialsForApp(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMaterialsForApp", reflect.TypeOf((*MockPipelineBuilder)(nil).CreateMaterialsForApp), request)
}

// DeleteACDAppCdPipelineWithNonCascade mocks base method.
func (m *MockPipelineBuilder) DeleteACDAppCdPipelineWithNonCascade(pipeline *pipelineConfig.Pipeline, ctx context.Context, forceDelete bool, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteACDAppCdPipelineWithNonCascade", pipeline, ctx, forceDelete, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteACDAppCdPipelineWithNonCascade indicates an expected call of DeleteACDAppCdPipelineWithNonCascade.
func (mr *MockPipelineBuilderMockRecorder) DeleteACDAppCdPipelineWithNonCascade(pipeline, ctx, forceDelete, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteACDAppCdPipelineWithNonCascade", reflect.TypeOf((*MockPipelineBuilder)(nil).DeleteACDAppCdPipelineWithNonCascade), pipeline, ctx, forceDelete, userId)
}

// DeleteApp mocks base method.
func (m *MockPipelineBuilder) DeleteApp(appId int, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", appId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockPipelineBuilderMockRecorder) DeleteApp(appId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockPipelineBuilder)(nil).DeleteApp), appId, userId)
}

// DeleteCdPipeline mocks base method.
func (m *MockPipelineBuilder) DeleteCdPipeline(pipeline *pipelineConfig.Pipeline, ctx context.Context, deleteAction int, acdDelete bool, userId int32) (*bean0.AppDeleteResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCdPipeline", pipeline, ctx, deleteAction, acdDelete, userId)
	ret0, _ := ret[0].(*bean0.AppDeleteResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCdPipeline indicates an expected call of DeleteCdPipeline.
func (mr *MockPipelineBuilderMockRecorder) DeleteCdPipeline(pipeline, ctx, deleteAction, acdDelete, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCdPipeline", reflect.TypeOf((*MockPipelineBuilder)(nil).DeleteCdPipeline), pipeline, ctx, deleteAction, acdDelete, userId)
}

// DeleteCiPipeline mocks base method.
func (m *MockPipelineBuilder) DeleteCiPipeline(request *bean0.CiPatchRequest) (*bean0.CiPipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCiPipeline", request)
	ret0, _ := ret[0].(*bean0.CiPipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCiPipeline indicates an expected call of DeleteCiPipeline.
func (mr *MockPipelineBuilderMockRecorder) DeleteCiPipeline(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCiPipeline", reflect.TypeOf((*MockPipelineBuilder)(nil).DeleteCiPipeline), request)
}

// DeleteDeploymentApps mocks base method.
func (m *MockPipelineBuilder) DeleteDeploymentApps(ctx context.Context, pipelines []*pipelineConfig.Pipeline, userId int32) *bean0.DeploymentAppTypeChangeResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentApps", ctx, pipelines, userId)
	ret0, _ := ret[0].(*bean0.DeploymentAppTypeChangeResponse)
	return ret0
}

// DeleteDeploymentApps indicates an expected call of DeleteDeploymentApps.
func (mr *MockPipelineBuilderMockRecorder) DeleteDeploymentApps(ctx, pipelines, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentApps", reflect.TypeOf((*MockPipelineBuilder)(nil).DeleteDeploymentApps), ctx, pipelines, userId)
}

// DeleteDeploymentAppsForEnvironment mocks base method.
func (m *MockPipelineBuilder) DeleteDeploymentAppsForEnvironment(ctx context.Context, environmentId int, currentDeploymentAppType bean0.DeploymentType, exclusionList, includeApps []int, userId int32) (*bean0.DeploymentAppTypeChangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentAppsForEnvironment", ctx, environmentId, currentDeploymentAppType, exclusionList, includeApps, userId)
	ret0, _ := ret[0].(*bean0.DeploymentAppTypeChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeploymentAppsForEnvironment indicates an expected call of DeleteDeploymentAppsForEnvironment.
func (mr *MockPipelineBuilderMockRecorder) DeleteDeploymentAppsForEnvironment(ctx, environmentId, currentDeploymentAppType, exclusionList, includeApps, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentAppsForEnvironment", reflect.TypeOf((*MockPipelineBuilder)(nil).DeleteDeploymentAppsForEnvironment), ctx, environmentId, currentDeploymentAppType, exclusionList, includeApps, userId)
}

// DeleteMaterial mocks base method.
func (m *MockPipelineBuilder) DeleteMaterial(request *bean0.UpdateMaterialDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaterial", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMaterial indicates an expected call of DeleteMaterial.
func (mr *MockPipelineBuilderMockRecorder) DeleteMaterial(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaterial", reflect.TypeOf((*MockPipelineBuilder)(nil).DeleteMaterial), request)
}

// FetchArtifactForRollback mocks base method.
func (m *MockPipelineBuilder) FetchArtifactForRollback(cdPipelineId, offset, limit int) (bean0.CiArtifactResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArtifactForRollback", cdPipelineId, offset, limit)
	ret0, _ := ret[0].(bean0.CiArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchArtifactForRollback indicates an expected call of FetchArtifactForRollback.
func (mr *MockPipelineBuilderMockRecorder) FetchArtifactForRollback(cdPipelineId, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArtifactForRollback", reflect.TypeOf((*MockPipelineBuilder)(nil).FetchArtifactForRollback), cdPipelineId, offset, limit)
}

// FetchCDPipelineStrategy mocks base method.
func (m *MockPipelineBuilder) FetchCDPipelineStrategy(appId int) (pipeline.PipelineStrategiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCDPipelineStrategy", appId)
	ret0, _ := ret[0].(pipeline.PipelineStrategiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCDPipelineStrategy indicates an expected call of FetchCDPipelineStrategy.
func (mr *MockPipelineBuilderMockRecorder) FetchCDPipelineStrategy(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCDPipelineStrategy", reflect.TypeOf((*MockPipelineBuilder)(nil).FetchCDPipelineStrategy), appId)
}

// FetchConfigmapSecretsForCdStages mocks base method.
func (m *MockPipelineBuilder) FetchConfigmapSecretsForCdStages(appId, envId, cdPipelineId int) (pipeline.ConfigMapSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchConfigmapSecretsForCdStages", appId, envId, cdPipelineId)
	ret0, _ := ret[0].(pipeline.ConfigMapSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchConfigmapSecretsForCdStages indicates an expected call of FetchConfigmapSecretsForCdStages.
func (mr *MockPipelineBuilderMockRecorder) FetchConfigmapSecretsForCdStages(appId, envId, cdPipelineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchConfigmapSecretsForCdStages", reflect.TypeOf((*MockPipelineBuilder)(nil).FetchConfigmapSecretsForCdStages), appId, envId, cdPipelineId)
}

// FetchDefaultCDPipelineStrategy mocks base method.
func (m *MockPipelineBuilder) FetchDefaultCDPipelineStrategy(appId, envId int) (pipeline.PipelineStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDefaultCDPipelineStrategy", appId, envId)
	ret0, _ := ret[0].(pipeline.PipelineStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDefaultCDPipelineStrategy indicates an expected call of FetchDefaultCDPipelineStrategy.
func (mr *MockPipelineBuilderMockRecorder) FetchDefaultCDPipelineStrategy(appId, envId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDefaultCDPipelineStrategy", reflect.TypeOf((*MockPipelineBuilder)(nil).FetchDefaultCDPipelineStrategy), appId, envId)
}

// FindAllMatchesByAppName mocks base method.
func (m *MockPipelineBuilder) FindAllMatchesByAppName(appName string, appType helper.AppType) ([]*pipeline.AppBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMatchesByAppName", appName, appType)
	ret0, _ := ret[0].([]*pipeline.AppBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMatchesByAppName indicates an expected call of FindAllMatchesByAppName.
func (mr *MockPipelineBuilderMockRecorder) FindAllMatchesByAppName(appName, appType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMatchesByAppName", reflect.TypeOf((*MockPipelineBuilder)(nil).FindAllMatchesByAppName), appName, appType)
}

// FindAppAndEnvDetailsByPipelineId mocks base method.
func (m *MockPipelineBuilder) FindAppAndEnvDetailsByPipelineId(cdPipelineId int) (*pipelineConfig.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAppAndEnvDetailsByPipelineId", cdPipelineId)
	ret0, _ := ret[0].(*pipelineConfig.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAppAndEnvDetailsByPipelineId indicates an expected call of FindAppAndEnvDetailsByPipelineId.
func (mr *MockPipelineBuilderMockRecorder) FindAppAndEnvDetailsByPipelineId(cdPipelineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAppAndEnvDetailsByPipelineId", reflect.TypeOf((*MockPipelineBuilder)(nil).FindAppAndEnvDetailsByPipelineId), cdPipelineId)
}

// FindAppsByTeamId mocks base method.
func (m *MockPipelineBuilder) FindAppsByTeamId(teamId int) ([]*pipeline.AppBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAppsByTeamId", teamId)
	ret0, _ := ret[0].([]*pipeline.AppBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAppsByTeamId indicates an expected call of FindAppsByTeamId.
func (mr *MockPipelineBuilderMockRecorder) FindAppsByTeamId(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAppsByTeamId", reflect.TypeOf((*MockPipelineBuilder)(nil).FindAppsByTeamId), teamId)
}

// FindAppsByTeamName mocks base method.
func (m *MockPipelineBuilder) FindAppsByTeamName(teamName string) ([]pipeline.AppBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAppsByTeamName", teamName)
	ret0, _ := ret[0].([]pipeline.AppBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAppsByTeamName indicates an expected call of FindAppsByTeamName.
func (mr *MockPipelineBuilderMockRecorder) FindAppsByTeamName(teamName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAppsByTeamName", reflect.TypeOf((*MockPipelineBuilder)(nil).FindAppsByTeamName), teamName)
}

// FindByIds mocks base method.
func (m *MockPipelineBuilder) FindByIds(ids []*int) ([]*pipeline.AppBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIds", ids)
	ret0, _ := ret[0].([]*pipeline.AppBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIds indicates an expected call of FindByIds.
func (mr *MockPipelineBuilderMockRecorder) FindByIds(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIds", reflect.TypeOf((*MockPipelineBuilder)(nil).FindByIds), ids)
}

// FindPipelineById mocks base method.
func (m *MockPipelineBuilder) FindPipelineById(cdPipelineId int) (*pipelineConfig.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPipelineById", cdPipelineId)
	ret0, _ := ret[0].(*pipelineConfig.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPipelineById indicates an expected call of FindPipelineById.
func (mr *MockPipelineBuilderMockRecorder) FindPipelineById(cdPipelineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPipelineById", reflect.TypeOf((*MockPipelineBuilder)(nil).FindPipelineById), cdPipelineId)
}

// GetApp mocks base method.
func (m *MockPipelineBuilder) GetApp(appId int) (*bean0.CreateAppDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", appId)
	ret0, _ := ret[0].(*bean0.CreateAppDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockPipelineBuilderMockRecorder) GetApp(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockPipelineBuilder)(nil).GetApp), appId)
}

// GetAppList mocks base method.
func (m *MockPipelineBuilder) GetAppList() ([]pipeline.AppBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppList")
	ret0, _ := ret[0].([]pipeline.AppBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppList indicates an expected call of GetAppList.
func (mr *MockPipelineBuilderMockRecorder) GetAppList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppList", reflect.TypeOf((*MockPipelineBuilder)(nil).GetAppList))
}

// GetAppListForEnvironment mocks base method.
func (m *MockPipelineBuilder) GetAppListForEnvironment(request appGroup.AppGroupingRequest) ([]*pipeline.AppBean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppListForEnvironment", request)
	ret0, _ := ret[0].([]*pipeline.AppBean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppListForEnvironment indicates an expected call of GetAppListForEnvironment.
func (mr *MockPipelineBuilderMockRecorder) GetAppListForEnvironment(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppListForEnvironment", reflect.TypeOf((*MockPipelineBuilder)(nil).GetAppListForEnvironment), request)
}

// GetBulkActionImpactedPipelines mocks base method.
func (m *MockPipelineBuilder) GetBulkActionImpactedPipelines(dto *bean0.CdBulkActionRequestDto) ([]*pipelineConfig.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBulkActionImpactedPipelines", dto)
	ret0, _ := ret[0].([]*pipelineConfig.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBulkActionImpactedPipelines indicates an expected call of GetBulkActionImpactedPipelines.
func (mr *MockPipelineBuilderMockRecorder) GetBulkActionImpactedPipelines(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBulkActionImpactedPipelines", reflect.TypeOf((*MockPipelineBuilder)(nil).GetBulkActionImpactedPipelines), dto)
}

// GetCdPipelineById mocks base method.
func (m *MockPipelineBuilder) GetCdPipelineById(pipelineId int) (*bean0.CDPipelineConfigObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCdPipelineById", pipelineId)
	ret0, _ := ret[0].(*bean0.CDPipelineConfigObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCdPipelineById indicates an expected call of GetCdPipelineById.
func (mr *MockPipelineBuilderMockRecorder) GetCdPipelineById(pipelineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCdPipelineById", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCdPipelineById), pipelineId)
}

// GetCdPipelinesByEnvironment mocks base method.
func (m *MockPipelineBuilder) GetCdPipelinesByEnvironment(request appGroup.AppGroupingRequest) (*bean0.CdPipelines, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCdPipelinesByEnvironment", request)
	ret0, _ := ret[0].(*bean0.CdPipelines)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCdPipelinesByEnvironment indicates an expected call of GetCdPipelinesByEnvironment.
func (mr *MockPipelineBuilderMockRecorder) GetCdPipelinesByEnvironment(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCdPipelinesByEnvironment", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCdPipelinesByEnvironment), request)
}

// GetCdPipelinesByEnvironmentMin mocks base method.
func (m *MockPipelineBuilder) GetCdPipelinesByEnvironmentMin(request appGroup.AppGroupingRequest) ([]*bean0.CDPipelineConfigObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCdPipelinesByEnvironmentMin", request)
	ret0, _ := ret[0].([]*bean0.CDPipelineConfigObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCdPipelinesByEnvironmentMin indicates an expected call of GetCdPipelinesByEnvironmentMin.
func (mr *MockPipelineBuilderMockRecorder) GetCdPipelinesByEnvironmentMin(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCdPipelinesByEnvironmentMin", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCdPipelinesByEnvironmentMin), request)
}

// GetCdPipelinesForApp mocks base method.
func (m *MockPipelineBuilder) GetCdPipelinesForApp(appId int) (*bean0.CdPipelines, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCdPipelinesForApp", appId)
	ret0, _ := ret[0].(*bean0.CdPipelines)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCdPipelinesForApp indicates an expected call of GetCdPipelinesForApp.
func (mr *MockPipelineBuilderMockRecorder) GetCdPipelinesForApp(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCdPipelinesForApp", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCdPipelinesForApp), appId)
}

// GetCdPipelinesForAppAndEnv mocks base method.
func (m *MockPipelineBuilder) GetCdPipelinesForAppAndEnv(appId, envId int) (*bean0.CdPipelines, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCdPipelinesForAppAndEnv", appId, envId)
	ret0, _ := ret[0].(*bean0.CdPipelines)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCdPipelinesForAppAndEnv indicates an expected call of GetCdPipelinesForAppAndEnv.
func (mr *MockPipelineBuilderMockRecorder) GetCdPipelinesForAppAndEnv(appId, envId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCdPipelinesForAppAndEnv", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCdPipelinesForAppAndEnv), appId, envId)
}

// GetCiPipeline mocks base method.
func (m *MockPipelineBuilder) GetCiPipeline(appId int) (*bean0.CiConfigRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCiPipeline", appId)
	ret0, _ := ret[0].(*bean0.CiConfigRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCiPipeline indicates an expected call of GetCiPipeline.
func (mr *MockPipelineBuilderMockRecorder) GetCiPipeline(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCiPipeline", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCiPipeline), appId)
}

// GetCiPipelineByEnvironment mocks base method.
func (m *MockPipelineBuilder) GetCiPipelineByEnvironment(request appGroup.AppGroupingRequest) ([]*bean0.CiConfigRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCiPipelineByEnvironment", request)
	ret0, _ := ret[0].([]*bean0.CiConfigRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCiPipelineByEnvironment indicates an expected call of GetCiPipelineByEnvironment.
func (mr *MockPipelineBuilderMockRecorder) GetCiPipelineByEnvironment(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCiPipelineByEnvironment", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCiPipelineByEnvironment), request)
}

// GetCiPipelineByEnvironmentMin mocks base method.
func (m *MockPipelineBuilder) GetCiPipelineByEnvironmentMin(request appGroup.AppGroupingRequest) ([]*bean0.CiPipelineMinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCiPipelineByEnvironmentMin", request)
	ret0, _ := ret[0].([]*bean0.CiPipelineMinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCiPipelineByEnvironmentMin indicates an expected call of GetCiPipelineByEnvironmentMin.
func (mr *MockPipelineBuilderMockRecorder) GetCiPipelineByEnvironmentMin(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCiPipelineByEnvironmentMin", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCiPipelineByEnvironmentMin), request)
}

// GetCiPipelineById mocks base method.
func (m *MockPipelineBuilder) GetCiPipelineById(pipelineId int) (*bean0.CiPipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCiPipelineById", pipelineId)
	ret0, _ := ret[0].(*bean0.CiPipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCiPipelineById indicates an expected call of GetCiPipelineById.
func (mr *MockPipelineBuilderMockRecorder) GetCiPipelineById(pipelineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCiPipelineById", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCiPipelineById), pipelineId)
}

// GetCiPipelineMin mocks base method.
func (m *MockPipelineBuilder) GetCiPipelineMin(appId int) ([]*bean0.CiPipelineMin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCiPipelineMin", appId)
	ret0, _ := ret[0].([]*bean0.CiPipelineMin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCiPipelineMin indicates an expected call of GetCiPipelineMin.
func (mr *MockPipelineBuilderMockRecorder) GetCiPipelineMin(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCiPipelineMin", reflect.TypeOf((*MockPipelineBuilder)(nil).GetCiPipelineMin), appId)
}

// GetDeploymentConfigMap mocks base method.
func (m *MockPipelineBuilder) GetDeploymentConfigMap(environmentId int) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentConfigMap", environmentId)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentConfigMap indicates an expected call of GetDeploymentConfigMap.
func (mr *MockPipelineBuilderMockRecorder) GetDeploymentConfigMap(environmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentConfigMap", reflect.TypeOf((*MockPipelineBuilder)(nil).GetDeploymentConfigMap), environmentId)
}

// GetEnvironmentByCdPipelineId mocks base method.
func (m *MockPipelineBuilder) GetEnvironmentByCdPipelineId(pipelineId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentByCdPipelineId", pipelineId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentByCdPipelineId indicates an expected call of GetEnvironmentByCdPipelineId.
func (mr *MockPipelineBuilderMockRecorder) GetEnvironmentByCdPipelineId(pipelineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentByCdPipelineId", reflect.TypeOf((*MockPipelineBuilder)(nil).GetEnvironmentByCdPipelineId), pipelineId)
}

// GetEnvironmentListForAutocompleteFilter mocks base method.
func (m *MockPipelineBuilder) GetEnvironmentListForAutocompleteFilter(envName string, clusterIds []int, offset, size int, emailId string, checkAuthBatch func(string, []string, []string) (map[string]bool, map[string]bool), ctx context.Context) (*cluster.AppGroupingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentListForAutocompleteFilter", envName, clusterIds, offset, size, emailId, checkAuthBatch, ctx)
	ret0, _ := ret[0].(*cluster.AppGroupingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentListForAutocompleteFilter indicates an expected call of GetEnvironmentListForAutocompleteFilter.
func (mr *MockPipelineBuilderMockRecorder) GetEnvironmentListForAutocompleteFilter(envName, clusterIds, offset, size, emailId, checkAuthBatch, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentListForAutocompleteFilter", reflect.TypeOf((*MockPipelineBuilder)(nil).GetEnvironmentListForAutocompleteFilter), envName, clusterIds, offset, size, emailId, checkAuthBatch, ctx)
}

// GetExternalCi mocks base method.
func (m *MockPipelineBuilder) GetExternalCi(appId int) ([]*bean0.ExternalCiConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalCi", appId)
	ret0, _ := ret[0].([]*bean0.ExternalCiConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalCi indicates an expected call of GetExternalCi.
func (mr *MockPipelineBuilderMockRecorder) GetExternalCi(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalCi", reflect.TypeOf((*MockPipelineBuilder)(nil).GetExternalCi), appId)
}

// GetExternalCiByEnvironment mocks base method.
func (m *MockPipelineBuilder) GetExternalCiByEnvironment(request appGroup.AppGroupingRequest) ([]*bean0.ExternalCiConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalCiByEnvironment", request)
	ret0, _ := ret[0].([]*bean0.ExternalCiConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalCiByEnvironment indicates an expected call of GetExternalCiByEnvironment.
func (mr *MockPipelineBuilderMockRecorder) GetExternalCiByEnvironment(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalCiByEnvironment", reflect.TypeOf((*MockPipelineBuilder)(nil).GetExternalCiByEnvironment), request)
}

// GetExternalCiById mocks base method.
func (m *MockPipelineBuilder) GetExternalCiById(appId, externalCiId int) (*bean0.ExternalCiConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalCiById", appId, externalCiId)
	ret0, _ := ret[0].(*bean0.ExternalCiConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalCiById indicates an expected call of GetExternalCiById.
func (mr *MockPipelineBuilderMockRecorder) GetExternalCiById(appId, externalCiId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalCiById", reflect.TypeOf((*MockPipelineBuilder)(nil).GetExternalCiById), appId, externalCiId)
}

// GetMaterialsForAppId mocks base method.
func (m *MockPipelineBuilder) GetMaterialsForAppId(appId int) []*bean0.GitMaterial {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialsForAppId", appId)
	ret0, _ := ret[0].([]*bean0.GitMaterial)
	return ret0
}

// GetMaterialsForAppId indicates an expected call of GetMaterialsForAppId.
func (mr *MockPipelineBuilderMockRecorder) GetMaterialsForAppId(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialsForAppId", reflect.TypeOf((*MockPipelineBuilder)(nil).GetMaterialsForAppId), appId)
}

// GetTriggerViewCdPipelinesForApp mocks base method.
func (m *MockPipelineBuilder) GetTriggerViewCdPipelinesForApp(appId int) (*bean0.CdPipelines, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerViewCdPipelinesForApp", appId)
	ret0, _ := ret[0].(*bean0.CdPipelines)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerViewCdPipelinesForApp indicates an expected call of GetTriggerViewCdPipelinesForApp.
func (mr *MockPipelineBuilderMockRecorder) GetTriggerViewCdPipelinesForApp(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerViewCdPipelinesForApp", reflect.TypeOf((*MockPipelineBuilder)(nil).GetTriggerViewCdPipelinesForApp), appId)
}

// GetTriggerViewCiPipeline mocks base method.
func (m *MockPipelineBuilder) GetTriggerViewCiPipeline(appId int) (*bean0.TriggerViewCiConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerViewCiPipeline", appId)
	ret0, _ := ret[0].(*bean0.TriggerViewCiConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerViewCiPipeline indicates an expected call of GetTriggerViewCiPipeline.
func (mr *MockPipelineBuilderMockRecorder) GetTriggerViewCiPipeline(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerViewCiPipeline", reflect.TypeOf((*MockPipelineBuilder)(nil).GetTriggerViewCiPipeline), appId)
}

// IsGitOpsRequiredForCD mocks base method.
func (m *MockPipelineBuilder) IsGitOpsRequiredForCD(pipelineCreateRequest *bean0.CdPipelines) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGitOpsRequiredForCD", pipelineCreateRequest)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGitOpsRequiredForCD indicates an expected call of IsGitOpsRequiredForCD.
func (mr *MockPipelineBuilderMockRecorder) IsGitOpsRequiredForCD(pipelineCreateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGitOpsRequiredForCD", reflect.TypeOf((*MockPipelineBuilder)(nil).IsGitOpsRequiredForCD), pipelineCreateRequest)
}

// IsGitopsConfigured mocks base method.
func (m *MockPipelineBuilder) IsGitopsConfigured() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGitopsConfigured")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsGitopsConfigured indicates an expected call of IsGitopsConfigured.
func (mr *MockPipelineBuilderMockRecorder) IsGitopsConfigured() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGitopsConfigured", reflect.TypeOf((*MockPipelineBuilder)(nil).IsGitopsConfigured))
}

// MarkGitOpsDevtronAppsDeletedWhereArgoAppIsDeleted mocks base method.
func (m *MockPipelineBuilder) MarkGitOpsDevtronAppsDeletedWhereArgoAppIsDeleted(appId, envId int, acdToken string, pipeline *pipelineConfig.Pipeline) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkGitOpsDevtronAppsDeletedWhereArgoAppIsDeleted", appId, envId, acdToken, pipeline)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkGitOpsDevtronAppsDeletedWhereArgoAppIsDeleted indicates an expected call of MarkGitOpsDevtronAppsDeletedWhereArgoAppIsDeleted.
func (mr *MockPipelineBuilderMockRecorder) MarkGitOpsDevtronAppsDeletedWhereArgoAppIsDeleted(appId, envId, acdToken, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkGitOpsDevtronAppsDeletedWhereArgoAppIsDeleted", reflect.TypeOf((*MockPipelineBuilder)(nil).MarkGitOpsDevtronAppsDeletedWhereArgoAppIsDeleted), appId, envId, acdToken, pipeline)
}

// PatchCdPipelines mocks base method.
func (m *MockPipelineBuilder) PatchCdPipelines(cdPipelines *bean0.CDPatchRequest, ctx context.Context) (*bean0.CdPipelines, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCdPipelines", cdPipelines, ctx)
	ret0, _ := ret[0].(*bean0.CdPipelines)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchCdPipelines indicates an expected call of PatchCdPipelines.
func (mr *MockPipelineBuilderMockRecorder) PatchCdPipelines(cdPipelines, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCdPipelines", reflect.TypeOf((*MockPipelineBuilder)(nil).PatchCdPipelines), cdPipelines, ctx)
}

// PatchCiMaterialSource mocks base method.
func (m *MockPipelineBuilder) PatchCiMaterialSource(ciPipeline *bean0.CiMaterialPatchRequest, userId int32) (*bean0.CiMaterialPatchRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCiMaterialSource", ciPipeline, userId)
	ret0, _ := ret[0].(*bean0.CiMaterialPatchRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchCiMaterialSource indicates an expected call of PatchCiMaterialSource.
func (mr *MockPipelineBuilderMockRecorder) PatchCiMaterialSource(ciPipeline, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCiMaterialSource", reflect.TypeOf((*MockPipelineBuilder)(nil).PatchCiMaterialSource), ciPipeline, userId)
}

// PatchCiPipeline mocks base method.
func (m *MockPipelineBuilder) PatchCiPipeline(request *bean0.CiPatchRequest) (*bean0.CiConfigRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCiPipeline", request)
	ret0, _ := ret[0].(*bean0.CiConfigRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchCiPipeline indicates an expected call of PatchCiPipeline.
func (mr *MockPipelineBuilderMockRecorder) PatchCiPipeline(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCiPipeline", reflect.TypeOf((*MockPipelineBuilder)(nil).PatchCiPipeline), request)
}

// PatchRegexCiPipeline mocks base method.
func (m *MockPipelineBuilder) PatchRegexCiPipeline(request *bean0.CiRegexPatchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRegexCiPipeline", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRegexCiPipeline indicates an expected call of PatchRegexCiPipeline.
func (mr *MockPipelineBuilderMockRecorder) PatchRegexCiPipeline(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRegexCiPipeline", reflect.TypeOf((*MockPipelineBuilder)(nil).PatchRegexCiPipeline), request)
}

// PerformBulkActionOnCdPipelines mocks base method.
func (m *MockPipelineBuilder) PerformBulkActionOnCdPipelines(dto *bean0.CdBulkActionRequestDto, impactedPipelines []*pipelineConfig.Pipeline, ctx context.Context, dryRun bool, userId int32) ([]*bean0.CdBulkActionResponseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformBulkActionOnCdPipelines", dto, impactedPipelines, ctx, dryRun, userId)
	ret0, _ := ret[0].([]*bean0.CdBulkActionResponseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformBulkActionOnCdPipelines indicates an expected call of PerformBulkActionOnCdPipelines.
func (mr *MockPipelineBuilderMockRecorder) PerformBulkActionOnCdPipelines(dto, impactedPipelines, ctx, dryRun, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformBulkActionOnCdPipelines", reflect.TypeOf((*MockPipelineBuilder)(nil).PerformBulkActionOnCdPipelines), dto, impactedPipelines, ctx, dryRun, userId)
}

// RetrieveArtifactsByCDPipeline mocks base method.
func (m *MockPipelineBuilder) RetrieveArtifactsByCDPipeline(pipeline *pipelineConfig.Pipeline, stage bean.WorkflowType) (*bean0.CiArtifactResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveArtifactsByCDPipeline", pipeline, stage)
	ret0, _ := ret[0].(*bean0.CiArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveArtifactsByCDPipeline indicates an expected call of RetrieveArtifactsByCDPipeline.
func (mr *MockPipelineBuilderMockRecorder) RetrieveArtifactsByCDPipeline(pipeline, stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveArtifactsByCDPipeline", reflect.TypeOf((*MockPipelineBuilder)(nil).RetrieveArtifactsByCDPipeline), pipeline, stage)
}

// RetrieveParentDetails mocks base method.
func (m *MockPipelineBuilder) RetrieveParentDetails(pipelineId int) (int, bean.WorkflowType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveParentDetails", pipelineId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bean.WorkflowType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveParentDetails indicates an expected call of RetrieveParentDetails.
func (mr *MockPipelineBuilderMockRecorder) RetrieveParentDetails(pipelineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveParentDetails", reflect.TypeOf((*MockPipelineBuilder)(nil).RetrieveParentDetails), pipelineId)
}

// SetPipelineDeploymentAppType mocks base method.
func (m *MockPipelineBuilder) SetPipelineDeploymentAppType(pipelineCreateRequest *bean0.CdPipelines, isGitOpsConfigured bool, deploymentTypeValidationConfig map[string]bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPipelineDeploymentAppType", pipelineCreateRequest, isGitOpsConfigured, deploymentTypeValidationConfig)
}

// SetPipelineDeploymentAppType indicates an expected call of SetPipelineDeploymentAppType.
func (mr *MockPipelineBuilderMockRecorder) SetPipelineDeploymentAppType(pipelineCreateRequest, isGitOpsConfigured, deploymentTypeValidationConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPipelineDeploymentAppType", reflect.TypeOf((*MockPipelineBuilder)(nil).SetPipelineDeploymentAppType), pipelineCreateRequest, isGitOpsConfigured, deploymentTypeValidationConfig)
}

// TriggerDeploymentAfterTypeChange mocks base method.
func (m *MockPipelineBuilder) TriggerDeploymentAfterTypeChange(ctx context.Context, request *bean0.DeploymentAppTypeChangeRequest) (*bean0.DeploymentAppTypeChangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerDeploymentAfterTypeChange", ctx, request)
	ret0, _ := ret[0].(*bean0.DeploymentAppTypeChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerDeploymentAfterTypeChange indicates an expected call of TriggerDeploymentAfterTypeChange.
func (mr *MockPipelineBuilderMockRecorder) TriggerDeploymentAfterTypeChange(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerDeploymentAfterTypeChange", reflect.TypeOf((*MockPipelineBuilder)(nil).TriggerDeploymentAfterTypeChange), ctx, request)
}

// UpdateCiTemplate mocks base method.
func (m *MockPipelineBuilder) UpdateCiTemplate(updateRequest *bean0.CiConfigRequest) (*bean0.CiConfigRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCiTemplate", updateRequest)
	ret0, _ := ret[0].(*bean0.CiConfigRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCiTemplate indicates an expected call of UpdateCiTemplate.
func (mr *MockPipelineBuilderMockRecorder) UpdateCiTemplate(updateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCiTemplate", reflect.TypeOf((*MockPipelineBuilder)(nil).UpdateCiTemplate), updateRequest)
}

// UpdateMaterialsForApp mocks base method.
func (m *MockPipelineBuilder) UpdateMaterialsForApp(request *bean0.UpdateMaterialDTO) (*bean0.UpdateMaterialDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaterialsForApp", request)
	ret0, _ := ret[0].(*bean0.UpdateMaterialDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaterialsForApp indicates an expected call of UpdateMaterialsForApp.
func (mr *MockPipelineBuilderMockRecorder) UpdateMaterialsForApp(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaterialsForApp", reflect.TypeOf((*MockPipelineBuilder)(nil).UpdateMaterialsForApp), request)
}
