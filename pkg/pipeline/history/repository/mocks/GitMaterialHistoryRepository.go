// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	repository "github.com/devtron-labs/devtron/pkg/pipeline/history/repository"
	mock "github.com/stretchr/testify/mock"
)

// GitMaterialHistoryRepository is an autogenerated mock type for the GitMaterialHistoryRepository type
type GitMaterialHistoryRepository struct {
	mock.Mock
}

// SaveDeleteMaterialHistory provides a mock function with given fields: materials
func (_m *GitMaterialHistoryRepository) SaveDeleteMaterialHistory(materials []*repository.GitMaterialHistory) error {
	ret := _m.Called(materials)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*repository.GitMaterialHistory) error); ok {
		r0 = rf(materials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveGitMaterialHistory provides a mock function with given fields: material
func (_m *GitMaterialHistoryRepository) SaveGitMaterialHistory(material *repository.GitMaterialHistory) error {
	ret := _m.Called(material)

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.GitMaterialHistory) error); ok {
		r0 = rf(material)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGitMaterialHistoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGitMaterialHistoryRepository creates a new instance of GitMaterialHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGitMaterialHistoryRepository(t mockConstructorTestingTNewGitMaterialHistoryRepository) *GitMaterialHistoryRepository {
	mock := &GitMaterialHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
