// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	chart "github.com/devtron-labs/devtron/pkg/chart"
	bean "github.com/devtron-labs/devtron/pkg/pipeline/bean"

	chartConfig "github.com/devtron-labs/devtron/internal/sql/repository/chartConfig"

	chartRepoRepository "github.com/devtron-labs/devtron/pkg/chartRepo/repository"

	mock "github.com/stretchr/testify/mock"

	models "github.com/devtron-labs/devtron/internal/sql/models"

	pg "github.com/go-pg/pg"

	repository "github.com/devtron-labs/devtron/internal/sql/repository"
)

// PropertiesConfigService is an autogenerated mock type for the PropertiesConfigService type
type PropertiesConfigService struct {
	mock.Mock
}

// CreateEnvironmentProperties provides a mock function with given fields: appId, propertiesRequest
func (_m *PropertiesConfigService) CreateEnvironmentProperties(appId int, propertiesRequest *bean.EnvironmentProperties) (*bean.EnvironmentProperties, error) {
	ret := _m.Called(appId, propertiesRequest)

	var r0 *bean.EnvironmentProperties
	if rf, ok := ret.Get(0).(func(int, *bean.EnvironmentProperties) *bean.EnvironmentProperties); ok {
		r0 = rf(appId, propertiesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.EnvironmentProperties)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *bean.EnvironmentProperties) error); ok {
		r1 = rf(appId, propertiesRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentPropertiesWithNamespace provides a mock function with given fields: appId, propertiesRequest
func (_m *PropertiesConfigService) CreateEnvironmentPropertiesWithNamespace(appId int, propertiesRequest *bean.EnvironmentProperties) (*bean.EnvironmentProperties, error) {
	ret := _m.Called(appId, propertiesRequest)

	var r0 *bean.EnvironmentProperties
	if rf, ok := ret.Get(0).(func(int, *bean.EnvironmentProperties) *bean.EnvironmentProperties); ok {
		r0 = rf(appId, propertiesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.EnvironmentProperties)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *bean.EnvironmentProperties) error); ok {
		r1 = rf(appId, propertiesRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIfRequired provides a mock function with given fields: _a0, environmentId, userId, manualReviewed, chartStatus, isOverride, isAppMetricsEnabled, namespace, IsBasicViewLocked, CurrentViewEditor, tx
func (_m *PropertiesConfigService) CreateIfRequired(_a0 *chartRepoRepository.Chart, environmentId int, userId int32, manualReviewed bool, chartStatus models.ChartStatus, isOverride bool, isAppMetricsEnabled bool, namespace string, IsBasicViewLocked bool, CurrentViewEditor models.ChartsViewEditorType, tx *pg.Tx) (*chartConfig.EnvConfigOverride, error) {
	ret := _m.Called(_a0, environmentId, userId, manualReviewed, chartStatus, isOverride, isAppMetricsEnabled, namespace, IsBasicViewLocked, CurrentViewEditor, tx)

	var r0 *chartConfig.EnvConfigOverride
	if rf, ok := ret.Get(0).(func(*chartRepoRepository.Chart, int, int32, bool, models.ChartStatus, bool, bool, string, bool, models.ChartsViewEditorType, *pg.Tx) *chartConfig.EnvConfigOverride); ok {
		r0 = rf(_a0, environmentId, userId, manualReviewed, chartStatus, isOverride, isAppMetricsEnabled, namespace, IsBasicViewLocked, CurrentViewEditor, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartConfig.EnvConfigOverride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*chartRepoRepository.Chart, int, int32, bool, models.ChartStatus, bool, bool, string, bool, models.ChartsViewEditorType, *pg.Tx) error); ok {
		r1 = rf(_a0, environmentId, userId, manualReviewed, chartStatus, isOverride, isAppMetricsEnabled, namespace, IsBasicViewLocked, CurrentViewEditor, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnvMetricsEnableDisable provides a mock function with given fields: appMetricRequest
func (_m *PropertiesConfigService) EnvMetricsEnableDisable(appMetricRequest *chart.AppMetricEnableDisableRequest) (*chart.AppMetricEnableDisableRequest, error) {
	ret := _m.Called(appMetricRequest)

	var r0 *chart.AppMetricEnableDisableRequest
	if rf, ok := ret.Get(0).(func(*chart.AppMetricEnableDisableRequest) *chart.AppMetricEnableDisableRequest); ok {
		r0 = rf(appMetricRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chart.AppMetricEnableDisableRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*chart.AppMetricEnableDisableRequest) error); ok {
		r1 = rf(appMetricRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchEnvProperties provides a mock function with given fields: appId, envId, chartRefId
func (_m *PropertiesConfigService) FetchEnvProperties(appId int, envId int, chartRefId int) (*chartConfig.EnvConfigOverride, error) {
	ret := _m.Called(appId, envId, chartRefId)

	var r0 *chartConfig.EnvConfigOverride
	if rf, ok := ret.Get(0).(func(int, int, int) *chartConfig.EnvConfigOverride); ok {
		r0 = rf(appId, envId, chartRefId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartConfig.EnvConfigOverride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(appId, envId, chartRefId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindEnvLevelAppMetricsByAppIdAndEnvId provides a mock function with given fields: appId, envId
func (_m *PropertiesConfigService) FindEnvLevelAppMetricsByAppIdAndEnvId(appId int, envId int) (*repository.EnvLevelAppMetrics, error) {
	ret := _m.Called(appId, envId)

	var r0 *repository.EnvLevelAppMetrics
	if rf, ok := ret.Get(0).(func(int, int) *repository.EnvLevelAppMetrics); ok {
		r0 = rf(appId, envId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.EnvLevelAppMetrics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, envId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppIdByChartEnvId provides a mock function with given fields: chartEnvId
func (_m *PropertiesConfigService) GetAppIdByChartEnvId(chartEnvId int) (*chartConfig.EnvConfigOverride, error) {
	ret := _m.Called(chartEnvId)

	var r0 *chartConfig.EnvConfigOverride
	if rf, ok := ret.Get(0).(func(int) *chartConfig.EnvConfigOverride); ok {
		r0 = rf(chartEnvId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chartConfig.EnvConfigOverride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(chartEnvId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentProperties provides a mock function with given fields: appId, environmentId, chartRefId
func (_m *PropertiesConfigService) GetEnvironmentProperties(appId int, environmentId int, chartRefId int) (*bean.EnvironmentPropertiesResponse, error) {
	ret := _m.Called(appId, environmentId, chartRefId)

	var r0 *bean.EnvironmentPropertiesResponse
	if rf, ok := ret.Get(0).(func(int, int, int) *bean.EnvironmentPropertiesResponse); ok {
		r0 = rf(appId, environmentId, chartRefId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.EnvironmentPropertiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(appId, environmentId, chartRefId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentPropertiesById provides a mock function with given fields: environmentId
func (_m *PropertiesConfigService) GetEnvironmentPropertiesById(environmentId int) ([]bean.EnvironmentProperties, error) {
	ret := _m.Called(environmentId)

	var r0 []bean.EnvironmentProperties
	if rf, ok := ret.Get(0).(func(int) []bean.EnvironmentProperties); ok {
		r0 = rf(environmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bean.EnvironmentProperties)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(environmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestEnvironmentProperties provides a mock function with given fields: appId, environmentId
func (_m *PropertiesConfigService) GetLatestEnvironmentProperties(appId int, environmentId int) (*bean.EnvironmentProperties, error) {
	ret := _m.Called(appId, environmentId)

	var r0 *bean.EnvironmentProperties
	if rf, ok := ret.Get(0).(func(int, int) *bean.EnvironmentProperties); ok {
		r0 = rf(appId, environmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.EnvironmentProperties)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, environmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetEnvironmentProperties provides a mock function with given fields: id
func (_m *PropertiesConfigService) ResetEnvironmentProperties(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentProperties provides a mock function with given fields: appId, propertiesRequest, userId
func (_m *PropertiesConfigService) UpdateEnvironmentProperties(appId int, propertiesRequest *bean.EnvironmentProperties, userId int32) (*bean.EnvironmentProperties, error) {
	ret := _m.Called(appId, propertiesRequest, userId)

	var r0 *bean.EnvironmentProperties
	if rf, ok := ret.Get(0).(func(int, *bean.EnvironmentProperties, int32) *bean.EnvironmentProperties); ok {
		r0 = rf(appId, propertiesRequest, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.EnvironmentProperties)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *bean.EnvironmentProperties, int32) error); ok {
		r1 = rf(appId, propertiesRequest, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPropertiesConfigService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPropertiesConfigService creates a new instance of PropertiesConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPropertiesConfigService(t mockConstructorTestingTNewPropertiesConfigService) *PropertiesConfigService {
	mock := &PropertiesConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
