// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	chartConfig "github.com/devtron-labs/devtron/internal/sql/repository/chartConfig"
	bean "github.com/devtron-labs/devtron/pkg/pipeline/bean"
	mock "github.com/stretchr/testify/mock"
)

// ConfigMapService is an autogenerated mock type for the ConfigMapService type
type ConfigMapService struct {
	mock.Mock
}

// CMEnvironmentAddUpdate provides a mock function with given fields: configMapRequest
func (_m *ConfigMapService) CMEnvironmentAddUpdate(configMapRequest *bean.ConfigDataRequest) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(configMapRequest)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(*bean.ConfigDataRequest) *bean.ConfigDataRequest); ok {
		r0 = rf(configMapRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.ConfigDataRequest) error); ok {
		r1 = rf(configMapRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMEnvironmentDelete provides a mock function with given fields: name, id, userId
func (_m *ConfigMapService) CMEnvironmentDelete(name string, id int, userId int32) (bool, error) {
	ret := _m.Called(name, id, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int, int32) bool); ok {
		r0 = rf(name, id, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int32) error); ok {
		r1 = rf(name, id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMEnvironmentDeleteByAppIdAndEnvId provides a mock function with given fields: name, appId, envId, userId
func (_m *ConfigMapService) CMEnvironmentDeleteByAppIdAndEnvId(name string, appId int, envId int, userId int32) (bool, error) {
	ret := _m.Called(name, appId, envId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int, int, int32) bool); ok {
		r0 = rf(name, appId, envId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, int32) error); ok {
		r1 = rf(name, appId, envId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMEnvironmentFetch provides a mock function with given fields: appId, envId
func (_m *ConfigMapService) CMEnvironmentFetch(appId int, envId int) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(appId, envId)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(int, int) *bean.ConfigDataRequest); ok {
		r0 = rf(appId, envId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, envId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMEnvironmentFetchForEdit provides a mock function with given fields: name, id, appId, envId
func (_m *ConfigMapService) CMEnvironmentFetchForEdit(name string, id int, appId int, envId int) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(name, id, appId, envId)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(string, int, int, int) *bean.ConfigDataRequest); ok {
		r0 = rf(name, id, appId, envId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, int) error); ok {
		r1 = rf(name, id, appId, envId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMGlobalAddUpdate provides a mock function with given fields: configMapRequest
func (_m *ConfigMapService) CMGlobalAddUpdate(configMapRequest *bean.ConfigDataRequest) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(configMapRequest)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(*bean.ConfigDataRequest) *bean.ConfigDataRequest); ok {
		r0 = rf(configMapRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.ConfigDataRequest) error); ok {
		r1 = rf(configMapRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMGlobalDelete provides a mock function with given fields: name, id, userId
func (_m *ConfigMapService) CMGlobalDelete(name string, id int, userId int32) (bool, error) {
	ret := _m.Called(name, id, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int, int32) bool); ok {
		r0 = rf(name, id, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int32) error); ok {
		r1 = rf(name, id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMGlobalDeleteByAppId provides a mock function with given fields: name, appId, userId
func (_m *ConfigMapService) CMGlobalDeleteByAppId(name string, appId int, userId int32) (bool, error) {
	ret := _m.Called(name, appId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int, int32) bool); ok {
		r0 = rf(name, appId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int32) error); ok {
		r1 = rf(name, appId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMGlobalFetch provides a mock function with given fields: appId
func (_m *ConfigMapService) CMGlobalFetch(appId int) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(appId)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(int) *bean.ConfigDataRequest); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CMGlobalFetchForEdit provides a mock function with given fields: name, id
func (_m *ConfigMapService) CMGlobalFetchForEdit(name string, id int) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(name, id)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(string, int) *bean.ConfigDataRequest); ok {
		r0 = rf(name, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(name, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSEnvironmentAddUpdate provides a mock function with given fields: configMapRequest
func (_m *ConfigMapService) CSEnvironmentAddUpdate(configMapRequest *bean.ConfigDataRequest) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(configMapRequest)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(*bean.ConfigDataRequest) *bean.ConfigDataRequest); ok {
		r0 = rf(configMapRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.ConfigDataRequest) error); ok {
		r1 = rf(configMapRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSEnvironmentDelete provides a mock function with given fields: name, id, userId
func (_m *ConfigMapService) CSEnvironmentDelete(name string, id int, userId int32) (bool, error) {
	ret := _m.Called(name, id, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int, int32) bool); ok {
		r0 = rf(name, id, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int32) error); ok {
		r1 = rf(name, id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSEnvironmentDeleteByAppIdAndEnvId provides a mock function with given fields: name, appId, envId, userId
func (_m *ConfigMapService) CSEnvironmentDeleteByAppIdAndEnvId(name string, appId int, envId int, userId int32) (bool, error) {
	ret := _m.Called(name, appId, envId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int, int, int32) bool); ok {
		r0 = rf(name, appId, envId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, int32) error); ok {
		r1 = rf(name, appId, envId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSEnvironmentFetch provides a mock function with given fields: appId, envId
func (_m *ConfigMapService) CSEnvironmentFetch(appId int, envId int) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(appId, envId)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(int, int) *bean.ConfigDataRequest); ok {
		r0 = rf(appId, envId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, envId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSEnvironmentFetchForEdit provides a mock function with given fields: name, id, appId, envId
func (_m *ConfigMapService) CSEnvironmentFetchForEdit(name string, id int, appId int, envId int) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(name, id, appId, envId)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(string, int, int, int) *bean.ConfigDataRequest); ok {
		r0 = rf(name, id, appId, envId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, int) error); ok {
		r1 = rf(name, id, appId, envId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSGlobalAddUpdate provides a mock function with given fields: configMapRequest
func (_m *ConfigMapService) CSGlobalAddUpdate(configMapRequest *bean.ConfigDataRequest) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(configMapRequest)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(*bean.ConfigDataRequest) *bean.ConfigDataRequest); ok {
		r0 = rf(configMapRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.ConfigDataRequest) error); ok {
		r1 = rf(configMapRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSGlobalDelete provides a mock function with given fields: name, id, userId
func (_m *ConfigMapService) CSGlobalDelete(name string, id int, userId int32) (bool, error) {
	ret := _m.Called(name, id, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int, int32) bool); ok {
		r0 = rf(name, id, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int32) error); ok {
		r1 = rf(name, id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSGlobalDeleteByAppId provides a mock function with given fields: name, appId, userId
func (_m *ConfigMapService) CSGlobalDeleteByAppId(name string, appId int, userId int32) (bool, error) {
	ret := _m.Called(name, appId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int, int32) bool); ok {
		r0 = rf(name, appId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int32) error); ok {
		r1 = rf(name, appId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSGlobalFetch provides a mock function with given fields: appId
func (_m *ConfigMapService) CSGlobalFetch(appId int) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(appId)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(int) *bean.ConfigDataRequest); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CSGlobalFetchForEdit provides a mock function with given fields: name, id
func (_m *ConfigMapService) CSGlobalFetchForEdit(name string, id int) (*bean.ConfigDataRequest, error) {
	ret := _m.Called(name, id)

	var r0 *bean.ConfigDataRequest
	if rf, ok := ret.Get(0).(func(string, int) *bean.ConfigDataRequest); ok {
		r0 = rf(name, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigDataRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(name, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigSecretEnvironmentBulkPatch provides a mock function with given fields: bulkPatchRequest
func (_m *ConfigMapService) ConfigSecretEnvironmentBulkPatch(bulkPatchRequest *bean.BulkPatchRequest) (*bean.BulkPatchRequest, error) {
	ret := _m.Called(bulkPatchRequest)

	var r0 *bean.BulkPatchRequest
	if rf, ok := ret.Get(0).(func(*bean.BulkPatchRequest) *bean.BulkPatchRequest); ok {
		r0 = rf(bulkPatchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.BulkPatchRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.BulkPatchRequest) error); ok {
		r1 = rf(bulkPatchRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigSecretEnvironmentClone provides a mock function with given fields: appId, cloneAppId, userId
func (_m *ConfigMapService) ConfigSecretEnvironmentClone(appId int, cloneAppId int, userId int32) ([]chartConfig.ConfigMapEnvModel, error) {
	ret := _m.Called(appId, cloneAppId, userId)

	var r0 []chartConfig.ConfigMapEnvModel
	if rf, ok := ret.Get(0).(func(int, int, int32) []chartConfig.ConfigMapEnvModel); ok {
		r0 = rf(appId, cloneAppId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chartConfig.ConfigMapEnvModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int32) error); ok {
		r1 = rf(appId, cloneAppId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigSecretEnvironmentCreate provides a mock function with given fields: createJobEnvOverrideRequest
func (_m *ConfigMapService) ConfigSecretEnvironmentCreate(createJobEnvOverrideRequest *bean.CreateJobEnvOverridePayload) (*bean.CreateJobEnvOverridePayload, error) {
	ret := _m.Called(createJobEnvOverrideRequest)

	var r0 *bean.CreateJobEnvOverridePayload
	if rf, ok := ret.Get(0).(func(*bean.CreateJobEnvOverridePayload) *bean.CreateJobEnvOverridePayload); ok {
		r0 = rf(createJobEnvOverrideRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.CreateJobEnvOverridePayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.CreateJobEnvOverridePayload) error); ok {
		r1 = rf(createJobEnvOverrideRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigSecretEnvironmentDelete provides a mock function with given fields: createJobEnvOverrideRequest
func (_m *ConfigMapService) ConfigSecretEnvironmentDelete(createJobEnvOverrideRequest *bean.CreateJobEnvOverridePayload) (*bean.CreateJobEnvOverridePayload, error) {
	ret := _m.Called(createJobEnvOverrideRequest)

	var r0 *bean.CreateJobEnvOverridePayload
	if rf, ok := ret.Get(0).(func(*bean.CreateJobEnvOverridePayload) *bean.CreateJobEnvOverridePayload); ok {
		r0 = rf(createJobEnvOverrideRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.CreateJobEnvOverridePayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.CreateJobEnvOverridePayload) error); ok {
		r1 = rf(createJobEnvOverrideRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigSecretEnvironmentGet provides a mock function with given fields: appId
func (_m *ConfigMapService) ConfigSecretEnvironmentGet(appId int) ([]bean.JobEnvOverrideResponse, error) {
	ret := _m.Called(appId)

	var r0 []bean.JobEnvOverrideResponse
	if rf, ok := ret.Get(0).(func(int) []bean.JobEnvOverrideResponse); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bean.JobEnvOverrideResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigSecretGlobalBulkPatch provides a mock function with given fields: bulkPatchRequest
func (_m *ConfigMapService) ConfigSecretGlobalBulkPatch(bulkPatchRequest *bean.BulkPatchRequest) (*bean.BulkPatchRequest, error) {
	ret := _m.Called(bulkPatchRequest)

	var r0 *bean.BulkPatchRequest
	if rf, ok := ret.Get(0).(func(*bean.BulkPatchRequest) *bean.BulkPatchRequest); ok {
		r0 = rf(bulkPatchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.BulkPatchRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.BulkPatchRequest) error); ok {
		r1 = rf(bulkPatchRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptCSData provides a mock function with given fields: item
func (_m *ConfigMapService) EncryptCSData(item *bean.ConfigData) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*bean.ConfigData) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateConfigData provides a mock function with given fields: configData
func (_m *ConfigMapService) ValidateConfigData(configData *bean.ConfigData) (bool, error) {
	ret := _m.Called(configData)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*bean.ConfigData) bool); ok {
		r0 = rf(configData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.ConfigData) error); ok {
		r1 = rf(configData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConfigMapService interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfigMapService creates a new instance of ConfigMapService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfigMapService(t mockConstructorTestingTNewConfigMapService) *ConfigMapService {
	mock := &ConfigMapService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
