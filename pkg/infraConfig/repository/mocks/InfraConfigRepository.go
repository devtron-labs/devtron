// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	pg "github.com/go-pg/pg"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/devtron-labs/devtron/pkg/infraConfig/repository"

	v1 "github.com/devtron-labs/devtron/pkg/infraConfig/bean/v1"
)

// InfraConfigRepository is an autogenerated mock type for the InfraConfigRepository type
type InfraConfigRepository struct {
	mock.Mock
}

// CheckIfProfileExistsByName provides a mock function with given fields: name
func (_m *InfraConfigRepository) CheckIfProfileExistsByName(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfProfileExistsByName")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: tx
func (_m *InfraConfigRepository) CommitTx(tx *pg.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateConfigurations provides a mock function with given fields: tx, configurations
func (_m *InfraConfigRepository) CreateConfigurations(tx *pg.Tx, configurations []*repository.InfraProfileConfigurationEntity) error {
	ret := _m.Called(tx, configurations)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, []*repository.InfraProfileConfigurationEntity) error); ok {
		r0 = rf(tx, configurations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePlatformProfileMapping provides a mock function with given fields: tx, platformMapping
func (_m *InfraConfigRepository) CreatePlatformProfileMapping(tx *pg.Tx, platformMapping []*repository.ProfilePlatformMapping) error {
	ret := _m.Called(tx, platformMapping)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlatformProfileMapping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, []*repository.ProfilePlatformMapping) error); ok {
		r0 = rf(tx, platformMapping)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProfile provides a mock function with given fields: tx, infraProfile
func (_m *InfraConfigRepository) CreateProfile(tx *pg.Tx, infraProfile *repository.InfraProfileEntity) error {
	ret := _m.Called(tx, infraProfile)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, *repository.InfraProfileEntity) error); ok {
		r0 = rf(tx, infraProfile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteConfigurations provides a mock function with given fields: tx, profileId
func (_m *InfraConfigRepository) DeleteConfigurations(tx *pg.Tx, profileId int) error {
	ret := _m.Called(tx, profileId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, int) error); ok {
		r0 = rf(tx, profileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProfile provides a mock function with given fields: tx, id
func (_m *InfraConfigRepository) DeleteProfile(tx *pg.Tx, id int) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, int) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProfilePlatformMapping provides a mock function with given fields: tx, profileId
func (_m *InfraConfigRepository) DeleteProfilePlatformMapping(tx *pg.Tx, profileId int) error {
	ret := _m.Called(tx, profileId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfilePlatformMapping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, int) error); ok {
		r0 = rf(tx, profileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveProfileNames provides a mock function with given fields:
func (_m *InfraConfigRepository) GetActiveProfileNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveProfileNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveUniquePlatformNames provides a mock function with given fields:
func (_m *InfraConfigRepository) GetActiveUniquePlatformNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveUniquePlatformNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllActiveProfilesIds provides a mock function with given fields:
func (_m *InfraConfigRepository) GetAllActiveProfilesIds() ([]int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllActiveProfilesIds")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationsByProfileId provides a mock function with given fields: profileId
func (_m *InfraConfigRepository) GetConfigurationsByProfileId(profileId int) ([]*repository.InfraProfileConfigurationEntity, error) {
	ret := _m.Called(profileId)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationsByProfileId")
	}

	var r0 []*repository.InfraProfileConfigurationEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*repository.InfraProfileConfigurationEntity, error)); ok {
		return rf(profileId)
	}
	if rf, ok := ret.Get(0).(func(int) []*repository.InfraProfileConfigurationEntity); ok {
		r0 = rf(profileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.InfraProfileConfigurationEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(profileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationsByProfileIds provides a mock function with given fields: profileIds
func (_m *InfraConfigRepository) GetConfigurationsByProfileIds(profileIds []int) ([]*repository.InfraProfileConfigurationEntity, error) {
	ret := _m.Called(profileIds)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationsByProfileIds")
	}

	var r0 []*repository.InfraProfileConfigurationEntity
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) ([]*repository.InfraProfileConfigurationEntity, error)); ok {
		return rf(profileIds)
	}
	if rf, ok := ret.Get(0).(func([]int) []*repository.InfraProfileConfigurationEntity); ok {
		r0 = rf(profileIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.InfraProfileConfigurationEntity)
		}
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(profileIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationsByProfileName provides a mock function with given fields: profileName
func (_m *InfraConfigRepository) GetConfigurationsByProfileName(profileName string) ([]*repository.InfraProfileConfigurationEntity, error) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationsByProfileName")
	}

	var r0 []*repository.InfraProfileConfigurationEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*repository.InfraProfileConfigurationEntity, error)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) []*repository.InfraProfileConfigurationEntity); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.InfraProfileConfigurationEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(profileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatformListByProfileId provides a mock function with given fields: profileId
func (_m *InfraConfigRepository) GetPlatformListByProfileId(profileId int) ([]string, error) {
	ret := _m.Called(profileId)

	if len(ret) == 0 {
		panic("no return value specified for GetPlatformListByProfileId")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]string, error)); ok {
		return rf(profileId)
	}
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(profileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(profileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatformsByProfileById provides a mock function with given fields: profileId
func (_m *InfraConfigRepository) GetPlatformsByProfileById(profileId int) ([]*repository.ProfilePlatformMapping, error) {
	ret := _m.Called(profileId)

	if len(ret) == 0 {
		panic("no return value specified for GetPlatformsByProfileById")
	}

	var r0 []*repository.ProfilePlatformMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*repository.ProfilePlatformMapping, error)); ok {
		return rf(profileId)
	}
	if rf, ok := ret.Get(0).(func(int) []*repository.ProfilePlatformMapping); ok {
		r0 = rf(profileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.ProfilePlatformMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(profileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatformsByProfileIds provides a mock function with given fields: profileIds
func (_m *InfraConfigRepository) GetPlatformsByProfileIds(profileIds []int) ([]*repository.ProfilePlatformMapping, error) {
	ret := _m.Called(profileIds)

	if len(ret) == 0 {
		panic("no return value specified for GetPlatformsByProfileIds")
	}

	var r0 []*repository.ProfilePlatformMapping
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) ([]*repository.ProfilePlatformMapping, error)); ok {
		return rf(profileIds)
	}
	if rf, ok := ret.Get(0).(func([]int) []*repository.ProfilePlatformMapping); ok {
		r0 = rf(profileIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.ProfilePlatformMapping)
		}
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(profileIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatformsByProfileName provides a mock function with given fields: profileName
func (_m *InfraConfigRepository) GetPlatformsByProfileName(profileName string) ([]*repository.ProfilePlatformMapping, error) {
	ret := _m.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for GetPlatformsByProfileName")
	}

	var r0 []*repository.ProfilePlatformMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*repository.ProfilePlatformMapping, error)); ok {
		return rf(profileName)
	}
	if rf, ok := ret.Get(0).(func(string) []*repository.ProfilePlatformMapping); ok {
		r0 = rf(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.ProfilePlatformMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(profileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileById provides a mock function with given fields: profileId
func (_m *InfraConfigRepository) GetProfileById(profileId int) (*repository.InfraProfileEntity, error) {
	ret := _m.Called(profileId)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileById")
	}

	var r0 *repository.InfraProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*repository.InfraProfileEntity, error)); ok {
		return rf(profileId)
	}
	if rf, ok := ret.Get(0).(func(int) *repository.InfraProfileEntity); ok {
		r0 = rf(profileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.InfraProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(profileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileByName provides a mock function with given fields: name
func (_m *InfraConfigRepository) GetProfileByName(name string) (*repository.InfraProfileEntity, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileByName")
	}

	var r0 *repository.InfraProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*repository.InfraProfileEntity, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *repository.InfraProfileEntity); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.InfraProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileIdByName provides a mock function with given fields: name
func (_m *InfraConfigRepository) GetProfileIdByName(name string) (int, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileIdByName")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileList provides a mock function with given fields: profileNameLike
func (_m *InfraConfigRepository) GetProfileList(profileNameLike string) ([]*repository.InfraProfileEntity, error) {
	ret := _m.Called(profileNameLike)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileList")
	}

	var r0 []*repository.InfraProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*repository.InfraProfileEntity, error)); ok {
		return rf(profileNameLike)
	}
	if rf, ok := ret.Get(0).(func(string) []*repository.InfraProfileEntity); ok {
		r0 = rf(profileNameLike)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.InfraProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(profileNameLike)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileListByIds provides a mock function with given fields: profileIds, includeDefault
func (_m *InfraConfigRepository) GetProfileListByIds(profileIds []int, includeDefault bool) ([]*repository.InfraProfileEntity, error) {
	ret := _m.Called(profileIds, includeDefault)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileListByIds")
	}

	var r0 []*repository.InfraProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func([]int, bool) ([]*repository.InfraProfileEntity, error)); ok {
		return rf(profileIds, includeDefault)
	}
	if rf, ok := ret.Get(0).(func([]int, bool) []*repository.InfraProfileEntity); ok {
		r0 = rf(profileIds, includeDefault)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.InfraProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func([]int, bool) error); ok {
		r1 = rf(profileIds, includeDefault)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfilesWhichContainsAllDefaultConfigurationKeysUsingProfileName provides a mock function with given fields:
func (_m *InfraConfigRepository) GetProfilesWhichContainsAllDefaultConfigurationKeysUsingProfileName() ([]int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProfilesWhichContainsAllDefaultConfigurationKeysUsingProfileName")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfilesWhichContainsAllDefaultConfigurationKeysWithProfileId provides a mock function with given fields: defaultProfileId
func (_m *InfraConfigRepository) GetProfilesWhichContainsAllDefaultConfigurationKeysWithProfileId(defaultProfileId int) ([]int, error) {
	ret := _m.Called(defaultProfileId)

	if len(ret) == 0 {
		panic("no return value specified for GetProfilesWhichContainsAllDefaultConfigurationKeysWithProfileId")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]int, error)); ok {
		return rf(defaultProfileId)
	}
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(defaultProfileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(defaultProfileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackTx provides a mock function with given fields: tx
func (_m *InfraConfigRepository) RollbackTx(tx *pg.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartTx provides a mock function with given fields:
func (_m *InfraConfigRepository) StartTx() (*pg.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartTx")
	}

	var r0 *pg.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*pg.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *pg.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuildxDriverTypeInAllProfiles provides a mock function with given fields: tx, buildxDriverType
func (_m *InfraConfigRepository) UpdateBuildxDriverTypeInAllProfiles(tx *pg.Tx, buildxDriverType v1.BuildxDriver) error {
	ret := _m.Called(tx, buildxDriverType)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBuildxDriverTypeInAllProfiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, v1.BuildxDriver) error); ok {
		r0 = rf(tx, buildxDriverType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfigurations provides a mock function with given fields: tx, configurations
func (_m *InfraConfigRepository) UpdateConfigurations(tx *pg.Tx, configurations []*repository.InfraProfileConfigurationEntity) error {
	ret := _m.Called(tx, configurations)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, []*repository.InfraProfileConfigurationEntity) error); ok {
		r0 = rf(tx, configurations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePlatformProfileMapping provides a mock function with given fields: tx, platformMappings
func (_m *InfraConfigRepository) UpdatePlatformProfileMapping(tx *pg.Tx, platformMappings []*repository.ProfilePlatformMapping) error {
	ret := _m.Called(tx, platformMappings)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlatformProfileMapping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, []*repository.ProfilePlatformMapping) error); ok {
		r0 = rf(tx, platformMappings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: tx, profileName, profile
func (_m *InfraConfigRepository) UpdateProfile(tx *pg.Tx, profileName string, profile *repository.InfraProfileEntity) error {
	ret := _m.Called(tx, profileName, profile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx, string, *repository.InfraProfileEntity) error); ok {
		r0 = rf(tx, profileName, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInfraConfigRepository creates a new instance of InfraConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInfraConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InfraConfigRepository {
	mock := &InfraConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
