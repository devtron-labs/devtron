// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bean "github.com/devtron-labs/devtron/api/bean"

	mock "github.com/stretchr/testify/mock"

	pipelineConfig "github.com/devtron-labs/devtron/internal/sql/repository/pipelineConfig"

	repository "github.com/devtron-labs/devtron/internal/sql/repository"

	time "time"

	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
)

// AppService is an autogenerated mock type for the AppService type
type AppService struct {
	mock.Mock
}

// GetChartRepoName provides a mock function with given fields: gitRepoUrl
func (_m *AppService) GetChartRepoName(gitRepoUrl string) string {
	ret := _m.Called(gitRepoUrl)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(gitRepoUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCmSecretNew provides a mock function with given fields: appId, envId
func (_m *AppService) GetCmSecretNew(appId int, envId int) (*bean.ConfigMapJson, *bean.ConfigSecretJson, error) {
	ret := _m.Called(appId, envId)

	var r0 *bean.ConfigMapJson
	if rf, ok := ret.Get(0).(func(int, int) *bean.ConfigMapJson); ok {
		r0 = rf(appId, envId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bean.ConfigMapJson)
		}
	}

	var r1 *bean.ConfigSecretJson
	if rf, ok := ret.Get(1).(func(int, int) *bean.ConfigSecretJson); ok {
		r1 = rf(appId, envId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*bean.ConfigSecretJson)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(appId, envId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetConfigMapAndSecretJson provides a mock function with given fields: appId, envId, pipelineId
func (_m *AppService) GetConfigMapAndSecretJson(appId int, envId int, pipelineId int) ([]byte, error) {
	ret := _m.Called(appId, envId, pipelineId)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int, int, int) []byte); ok {
		r0 = rf(appId, envId, pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(appId, envId, pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkImageScanDeployed provides a mock function with given fields: appId, envId, imageDigest, clusterId
func (_m *AppService) MarkImageScanDeployed(appId int, envId int, imageDigest string, clusterId int) error {
	ret := _m.Called(appId, envId, imageDigest, clusterId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string, int) error); ok {
		r0 = rf(appId, envId, imageDigest, clusterId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerCD provides a mock function with given fields: artifact, cdWorkflowId, wfrId, pipeline, async, triggeredAt
func (_m *AppService) TriggerCD(artifact *repository.CiArtifact, cdWorkflowId int, wfrId int, pipeline *pipelineConfig.Pipeline, async bool, triggeredAt time.Time) error {
	ret := _m.Called(artifact, cdWorkflowId, wfrId, pipeline, async, triggeredAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.CiArtifact, int, int, *pipelineConfig.Pipeline, bool, time.Time) error); ok {
		r0 = rf(artifact, cdWorkflowId, wfrId, pipeline, async, triggeredAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerRelease provides a mock function with given fields: overrideRequest, ctx, triggeredAt, triggeredBy, wfrId
func (_m *AppService) TriggerRelease(overrideRequest *bean.ValuesOverrideRequest, ctx context.Context, triggeredAt time.Time, triggeredBy int32, wfrId int) (int, error) {
	ret := _m.Called(overrideRequest, ctx, triggeredAt, triggeredBy, wfrId)

	var r0 int
	if rf, ok := ret.Get(0).(func(*bean.ValuesOverrideRequest, context.Context, time.Time, int32, int) int); ok {
		r0 = rf(overrideRequest, ctx, triggeredAt, triggeredBy, wfrId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.ValuesOverrideRequest, context.Context, time.Time, int32, int) error); ok {
		r1 = rf(overrideRequest, ctx, triggeredAt, triggeredBy, wfrId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCdWorkflowRunnerByACDObject provides a mock function with given fields: _a0, cdWorkflowId, statusTimeoutDuration, latestTimeline
func (_m *AppService) UpdateCdWorkflowRunnerByACDObject(_a0 *v1alpha1.Application, cdWorkflowId int, statusTimeoutDuration int, latestTimeline *pipelineConfig.PipelineStatusTimeline) error {
	ret := _m.Called(_a0, cdWorkflowId, statusTimeoutDuration, latestTimeline)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Application, int, int, *pipelineConfig.PipelineStatusTimeline) error); ok {
		r0 = rf(_a0, cdWorkflowId, statusTimeoutDuration, latestTimeline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeploymentStatusAndCheckIsSucceeded provides a mock function with given fields: _a0, statusTime
func (_m *AppService) UpdateDeploymentStatusAndCheckIsSucceeded(_a0 *v1alpha1.Application, statusTime time.Time) (bool, error) {
	ret := _m.Called(_a0, statusTime)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Application, time.Time) bool); ok {
		r0 = rf(_a0, statusTime)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Application, time.Time) error); ok {
		r1 = rf(_a0, statusTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentStatusForGitOpsCdPipelines provides a mock function with given fields: _a0, statusTime
func (_m *AppService) UpdateDeploymentStatusForGitOpsCdPipelines(_a0 *v1alpha1.Application, statusTime time.Time) (bool, bool, error) {
	ret := _m.Called(_a0, statusTime)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Application, time.Time) bool); ok {
		r0 = rf(_a0, statusTime)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*v1alpha1.Application, time.Time) bool); ok {
		r1 = rf(_a0, statusTime)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*v1alpha1.Application, time.Time) error); ok {
		r2 = rf(_a0, statusTime)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateReleaseStatus provides a mock function with given fields: request
func (_m *AppService) UpdateReleaseStatus(request *bean.ReleaseStatusUpdateRequest) (bool, error) {
	ret := _m.Called(request)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*bean.ReleaseStatusUpdateRequest) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bean.ReleaseStatusUpdateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAppService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppService creates a new instance of AppService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppService(t mockConstructorTestingTNewAppService) *AppService {
	mock := &AppService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
