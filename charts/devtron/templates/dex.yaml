{{- with .Values.components.argocdDexServer }}
{{- $argocdEnabled :=  index $.Values "argo-cd" }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": {{ $.Release.Name }}
    "meta.helm.sh/release-namespace": {{ $.Release.Namespace }}
    {{- if and ($argocdEnabled.enabled) ($.Release.IsInstall) }}
    "helm.sh/hook": pre-install
    {{- end }}
  name: argocd-dex-server
spec:
  ports:
  - name: http
    port: 5556
    protocol: TCP
    targetPort: 5556
  - name: grpc
    port: 5557
    protocol: TCP
    targetPort: 5557
  - name: metrics
    port: 5558
    protocol: TCP
    targetPort: 5558
  selector:
    app.kubernetes.io/name: argocd-dex-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": {{ $.Release.Name }}
    "meta.helm.sh/release-namespace": {{ $.Release.Namespace }}
    {{- if and ($argocdEnabled.enabled) ($.Release.IsInstall) }}
    "helm.sh/hook": pre-install
    {{- end }}
  name: argocd-dex-server
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-dex-server
  minReadySeconds: 60
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-dex-server
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/part-of: argocd
              topologyKey: kubernetes.io/hostname
            weight: 5
      {{- if and $.Values.global $.Values.global.podSecurityContext }}
      securityContext:
{{- toYaml $.Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      containers:
      - command:
        - /shared/authenticator
        - rundex
        image: {{ .image }}
        imagePullPolicy: {{ .imagePullPolicy }}
        name: dex
        {{- if and $.Values.global $.Values.global.containerSecurityContext }}
        securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: 5556
        - containerPort: 5557
        - containerPort: 5558
        volumeMounts:
        - mountPath: /shared
          name: static-files
        {{- if .resources }}  
        resources:
        {{- toYaml .resources | nindent 10 }} 
        {{- end }}         
      initContainers:
      - command:
        - cp
        - -n
        - /authenticator
        - /shared
        image: {{ .initContainer.authenticator }}
        imagePullPolicy: IfNotPresent
        name: copyutil
        {{- if and $.Values.global $.Values.global.containerSecurityContext }}
        securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /shared
          name: static-files
        {{- if .initContainer.resources }}  
        resources:
        {{- toYaml .initContainer.resources | nindent 10 }} 
        {{- end }}           
      serviceAccountName: argocd-dex-server
      volumes:
      - emptyDir: {}
        name: static-files
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": {{ $.Release.Name }}
    "meta.helm.sh/release-namespace": {{ $.Release.Namespace }}
    {{- if and ($argocdEnabled.enabled) ($.Release.IsInstall) }}
    "helm.sh/hook": pre-install
    {{- end }}
  name: argocd-dex-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": {{ $.Release.Name }}
    "meta.helm.sh/release-namespace": {{ $.Release.Namespace }}
    {{- if and ($argocdEnabled.enabled) ($.Release.IsInstall) }}
    "helm.sh/hook": pre-install
    {{- end }}
  name: argocd-dex-server
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": {{ $.Release.Name }}
    "meta.helm.sh/release-namespace": {{ $.Release.Namespace }}
    {{- if and ($argocdEnabled.enabled) ($.Release.IsInstall) }}
    "helm.sh/hook": pre-install
    {{- end }}
  name: argocd-dex-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-dex-server
subjects:
- kind: ServiceAccount
  name: argocd-dex-server
{{- end }}
