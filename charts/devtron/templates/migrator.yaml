{{- with .Values.components.migrator }}
---
{{- if $.Capabilities.APIVersions.Has "batch/v1/Job" }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: Job
metadata:
  name: postgresql-migrate-devtron-{{ randAlphaNum 5 | lower }}
  annotations: {}
  labels:
    job: postgresql-migrate-devtron
spec:
  template:
    spec:
      {{- if and $.Values.global $.Values.global.podSecurityContext }}
      securityContext:
{{- toYaml $.Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      initContainers:
        - command:
            - /bin/sh
            - -c
            - cp -r /scripts/ /shared/
          {{- if $.Values.installer.modules }}
          {{- if and (has "cicd" $.Values.installer.modules) ($.Release.IsUpgrade) }}
          image: {{ include "common.image" (dict "component" $.Values.components.devtron "global" $.Values.global "extraImage" $.Values.components.devtron.cicdImage ) }}
          {{- else }}
          image: {{ include "common.image" (dict "component" $.Values.components.devtron "global" $.Values.global) }}
          {{- end }}
          {{- else }}
          image: {{ include "common.image" (dict "component" $.Values.components.devtron "global" $.Values.global) }}
          {{- end }}
          {{- if and $.Values.global $.Values.global.containerSecurityContext }}
          securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 12 }}
          {{- end }}
          name: init-devtron
          volumeMounts:
            - mountPath: /shared
              name: shared-volume
      containers:
        - command:
            - /bin/sh
            - -c
            - 'if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then migrate -path $(SCRIPT_LOCATION) -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable up;  else   echo $(MIGRATE_TO_VERSION); migrate -path $(SCRIPT_LOCATION)  -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable goto $(MIGRATE_TO_VERSION);    fi '
          env:
            - name: SCRIPT_LOCATION
              value: /shared/sql/
            - name: DB_TYPE
              value: postgres
            - name: DB_USER_NAME
              value: postgres
            - name: DB_HOST
              value: postgresql-postgresql.devtroncd
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: {{ $.Values.components.migrator.envVars.devtron.DB_NAME }}
            - name: MIGRATE_TO_VERSION
              value: "0"
          envFrom:
            - secretRef:
                name: postgresql-migrator
          {{- if $.Values.components.migrator.image }}        
          image: {{ $.Values.components.migrator.image }}    
          {{- else }}
          image: migrate/migrate
          {{- end }} 
          {{- if and $.Values.global $.Values.global.containerSecurityContext }}
          securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 12 }}
          {{- end }}
          name: postgresql-migrate-devtron
          volumeMounts:
            - mountPath: /shared
              name: shared-volume
          {{- if .devtron }}
          {{- if .devtron.resources }}        
          resources:
          {{- toYaml .devtron.resources | nindent 10 }}
          {{- end }}
          {{- end }}           
      restartPolicy: OnFailure
      imagePullSecrets:
      - name: devtron-image-pull
      volumes:
        - emptyDir: {}
          name: shared-volume 
  backoffLimit: 20
  activeDeadlineSeconds: 1500
---
{{- if $.Capabilities.APIVersions.Has "batch/v1/Job" }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: Job
metadata:
  name: postgresql-migrate-casbin-{{ randAlphaNum 5 | lower }}
  annotations: {}
spec:
  template:
    spec:
      serviceAccountName: devtron
      {{- if and $.Values.global $.Values.global.podSecurityContext }}
      securityContext:
{{- toYaml $.Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      containers:
      - name: devtron-rollout
        image: {{ include "common.image" (dict "component" $.Values.components.migrator "global" $.Values.global "extraImage" $.Values.components.migrator.kubectlImage ) }}
        {{- if and $.Values.global $.Values.global.containerSecurityContext }}
        securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 10 }}
        {{- end }}
        command: ['sh', '-c', 'kubectl rollout restart deployment/devtron -n devtroncd && kubectl rollout restart deployment/kubelink -n devtroncd']
        {{- if .casbin }}
        {{- if .casbin.resources }}        
        resources:
        {{- toYaml .casbin.resources | nindent 10 }}
        {{- end }}
        {{- end }} 
      initContainers:
        - command:
            - /bin/sh
            - -c
            - cp -r /scripts/. /shared/
          {{- if $.Values.installer.modules }}
          {{- if and (has "cicd" $.Values.installer.modules) ($.Release.IsUpgrade) }}
          image: {{ include "common.image" (dict "component" $.Values.components.devtron "global" $.Values.global "extraImage" $.Values.components.devtron.cicdImage ) }}
          {{- else }}
          image: {{ include "common.image" (dict "component" $.Values.components.devtron "global" $.Values.global) }}
          {{- end }}
          {{- else }}
          image: {{ include "common.image" (dict "component" $.Values.components.devtron "global" $.Values.global) }}
          {{- end }}
          name: init-devtron
          {{- if and $.Values.global $.Values.global.containerSecurityContext }}
          securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /shared
              name: shared-volume
        - command:
            - /bin/sh
            - -c
            - 'if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then migrate -path $(SCRIPT_LOCATION) -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable up;  else   echo $(MIGRATE_TO_VERSION); migrate -path $(SCRIPT_LOCATION)  -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable goto $(MIGRATE_TO_VERSION);    fi '
          env:
            - name: SCRIPT_LOCATION
              value: /shared/casbin/
            - name: DB_TYPE
              value: postgres
            - name: DB_USER_NAME
              value: postgres
            - name: DB_HOST
              value: postgresql-postgresql.devtroncd
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: {{ $.Values.components.migrator.envVars.casbin.DB_NAME }}
            - name: MIGRATE_TO_VERSION
              value: "0"
          envFrom:
            - secretRef:
                name: postgresql-migrator
          {{- if $.Values.components.migrator.image }}        
          image: {{ $.Values.components.migrator.image }}    
          {{- else }}
          image: migrate/migrate
          {{- end }} 
          {{- if and $.Values.global $.Values.global.containerSecurityContext }}
          securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 12 }}
          {{- end }}
          name: postgresql-migrate-casbin
          volumeMounts:
            - mountPath: /shared
              name: shared-volume  
      restartPolicy: OnFailure
      imagePullSecrets:
      - name: devtron-image-pull
      volumes:
        - emptyDir: {}
          name: shared-volume 
  backoffLimit: 20
  activeDeadlineSeconds: 1500
{{- if $.Values.installer.modules }}
{{- if has "cicd" $.Values.installer.modules }}
---
{{- if $.Capabilities.APIVersions.Has "batch/v1/Job" }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: Job
metadata:
  name: postgresql-migrate-gitsensor-{{ randAlphaNum 5 | lower }}
spec:
  template:
    spec:
      {{- if and $.Values.global $.Values.global.podSecurityContext }}
      securityContext:
{{- toYaml $.Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      initContainers:
        - command:
            - /bin/sh
            - -c
            - cp -r sql /shared/
          image: {{ include "common.image" (dict "component" $.Values.components.gitsensor "global" $.Values.global) }}
          {{- if and $.Values.global $.Values.global.containerSecurityContext }}
          securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 12 }}
          {{- end }}
          name: init-git-sensor
          volumeMounts:
            - mountPath: /shared
              name: shared-volume
      containers:
      - command:
            - /bin/sh
            - -c
            - 'if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then migrate -path $(SCRIPT_LOCATION) -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable up;  else   echo $(MIGRATE_TO_VERSION); migrate -path $(SCRIPT_LOCATION)  -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable goto $(MIGRATE_TO_VERSION);    fi '
          env:
            - name: SCRIPT_LOCATION
              value: /shared/sql/
            - name: DB_TYPE
              value: postgres
            - name: DB_USER_NAME
              value: postgres
            - name: DB_HOST
              value: postgresql-postgresql.devtroncd
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: {{ $.Values.components.migrator.envVars.gitsensor.DB_NAME }}
            - name: MIGRATE_TO_VERSION
              value: "0"
          envFrom:
            - secretRef:
                name: postgresql-migrator
          {{- if $.Values.components.migrator.image }}        
          image: {{ $.Values.components.migrator.image }}    
          {{- else }}
          image: migrate/migrate
          {{- end }} 
          {{- if and $.Values.global $.Values.global.containerSecurityContext }}
          securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 12 }}
          {{- end }}
          name: postgresql-migrate-git-sensor
          volumeMounts:
            - mountPath: /shared
              name: shared-volume
          {{- if .gitsensor }}
          {{- if .gitsensor.resources }}        
          resources:
          {{- toYaml .gitsensor.resources | nindent 10 }}
          {{- end }}
          {{- end }}
      restartPolicy: OnFailure
      volumes:
        - emptyDir: {}
          name: shared-volume 
  backoffLimit: 20
  activeDeadlineSeconds: 1500
---
{{- if $.Capabilities.APIVersions.Has "batch/v1/Job" }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: Job
metadata:
  name: postgresql-migrate-lens-{{ randAlphaNum 5 | lower }}
spec:
  template:
    spec:
      {{- if and $.Values.global $.Values.global.podSecurityContext }}
      securityContext:
{{- toYaml $.Values.global.podSecurityContext | nindent 8 }}
      {{- end }}
      initContainers:
        - command:
            - /bin/sh
            - -c
            - cp -r sql /shared/
          image: {{ include "common.image" (dict "component" $.Values.lens "global" $.Values.global) }}
          name: init-lens
          {{- if and $.Values.global $.Values.global.containerSecurityContext }}
          securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /shared
              name: shared-volume
      containers:
      - name: postgresql-migrate-lens
        {{- if and $.Values.global $.Values.global.containerSecurityContext }}
        securityContext:
{{- toYaml $.Values.global.containerSecurityContext | nindent 10 }}
        {{- end }}
        command:
            - /bin/sh
            - -c
            - 'if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then migrate -path $(SCRIPT_LOCATION) -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable up;  else   echo $(MIGRATE_TO_VERSION); migrate -path $(SCRIPT_LOCATION)  -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable goto $(MIGRATE_TO_VERSION);    fi ' 
        env:
            - name: SCRIPT_LOCATION
              value: /shared/sql/
            - name: DB_TYPE
              value: postgres
            - name: DB_USER_NAME
              value: postgres
            - name: DB_HOST
              value: postgresql-postgresql.devtroncd
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: {{ $.Values.components.migrator.envVars.lens.DB_NAME }}
            - name: MIGRATE_TO_VERSION
              value: "0"
          envFrom:
          - secretRef:
              name: postgresql-migrator
          {{- if $.Values.components.migrator.image }}        
          image: {{ $.Values.components.migrator.image }}    
          {{- else }}
          image: migrate/migrate
          {{- end }} 
          {{- if .lens }}
          {{- if .lens.resources }}        
          resources:
          {{- toYaml .lens.resources | nindent 10 }}
          {{- end }} 
          {{- end }}
          volumeMounts:
              - mountPath: /shared
                name: shared-volume
      restartPolicy: OnFailure
      volumes:
        - emptyDir: {}
          name: shared-volume  
  backoffLimit: 20
  activeDeadlineSeconds: 1500
{{- end }}
{{- end }}
{{- end }}
