{{- $grafanaPwd := include "getOrGeneratePass" (dict "Namespace" "devtroncd" "Kind" "Secret" "Name" "devtron-grafana-cred-secret" "Key" "admin-password") }}
{{- $minioAccessKey := include "getOrGeneratePass" (dict "Namespace" "devtroncd" "Kind" "Secret" "Name" "devtron-minio" "Key" "accesskey") }}
{{- $minioSecretKey := include "getOrGeneratePass" (dict "Namespace" "devtroncd" "Kind" "Secret" "Name" "devtron-minio" "Key" "secretkey") }}
{{- if $.Values.installer.modules }}
{{- if has "cicd" $.Values.installer.modules }}
apiVersion: v1
kind: Secret
metadata:
  name: devtron-operator-secret
  namespace: devtroncd
type: Opaque
data:
{{- range $k, $v := $.Values.secrets }}
  {{ $k }}: {{ $v | b64enc | quote }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: devtron-operator-cm
  namespace: devtroncd
data:
{{- if $.Values.configs }}
{{ toYaml $.Values.configs | indent 2 }}
{{- end }}
  INSTALLATION_THROUGH_HELM: "True"
  DEVTRON_HELM_RELEASE_NAME: {{ $.Release.Name }}
{{- if and ($.Values.minio.enabled) (not $.Values.configs.BLOB_STORAGE_PROVIDER) }}
  BLOB_STORAGE_PROVIDER: "S3"
  BLOB_STORAGE_S3_ENDPOINT: "http://devtron-minio.devtroncd:9000"
  BLOB_STORAGE_S3_ENDPOINT_INSECURE: "true"
  DEFAULT_BUILD_LOGS_BUCKET: "devtron-ci-log"
  DEFAULT_CACHE_BUCKET: "devtron-ci-cache"
{{- end }}
{{- if or ($.Values.minio.enabled) (eq $.Values.configs.BLOB_STORAGE_PROVIDER "AZURE") }}
  DEFAULT_CACHE_BUCKET_REGION: "us-west-2"
  DEFAULT_CD_LOGS_BUCKET_REGION: "us-west-2"
{{- end }}
{{- if or ($.Values.minio.enabled) (eq $.Values.configs.BLOB_STORAGE_PROVIDER "AZURE") }}
---
apiVersion: v1
kind: Secret
metadata:
  name: devtron-minio
  labels:
    app: minio
    chart: {{ $.Release.Name }}-{{ $.Chart.Version }}
    release: devtron
    heritage: Helm
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
{{- if and ($.Values.minio.enabled) (eq $.Values.configs.BLOB_STORAGE_PROVIDER "AZURE") }}
data:
  accesskey: {{ $.Values.configs.AZURE_ACCOUNT_NAME | b64enc }}
  secretkey: {{ $.Values.secrets.AZURE_ACCOUNT_KEY | b64enc }}
{{- else if $.Values.minio.enabled }}
data:
  accesskey: {{ $minioAccessKey }}
  secretkey: {{ $minioSecretKey }}
{{- else if eq $.Values.configs.BLOB_STORAGE_PROVIDER "AZURE" }}
data:
  accesskey: {{ $.Values.configs.AZURE_ACCOUNT_NAME | b64enc }}
  secretkey: {{ $.Values.secrets.AZURE_ACCOUNT_KEY | b64enc }}
{{- end }}
{{- end }}
{{- if or ($.Values.minio.enabled) ($.Values.configs.BLOB_STORAGE_PROVIDER) }}
---
{{- if eq $.Values.configs.BLOB_STORAGE_PROVIDER "AZURE" }}
apiVersion: v1
data:
  accessKey: {{ $.Values.configs.AZURE_ACCOUNT_NAME | b64enc }}
  secretKey: {{ $.Values.secrets.AZURE_ACCOUNT_KEY | b64enc }}
kind: Secret
metadata:
  name: workflow-minio-cred
  namespace: devtron-ci
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
---
apiVersion: v1
data:
  accessKey: {{ $.Values.configs.AZURE_ACCOUNT_NAME | b64enc }}
  secretKey: {{ $.Values.secrets.AZURE_ACCOUNT_KEY | b64enc }}
kind: Secret
metadata:
  name: workflow-minio-cred
  namespace: devtron-cd
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
{{- else if eq $.Values.configs.BLOB_STORAGE_PROVIDER "GCP" }}
apiVersion: v1
data:
  secretKey: {{ $.Values.secrets.BLOB_STORAGE_GCP_CREDENTIALS_JSON }}
kind: Secret
metadata:
  name: workflow-minio-cred
  namespace: devtron-ci
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
---
apiVersion: v1
data:
  secretKey: {{ $.Values.secrets.BLOB_STORAGE_GCP_CREDENTIALS_JSON }}
kind: Secret
metadata:
  name: workflow-minio-cred
  namespace: devtron-cd
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
{{- else if and (eq $.Values.configs.BLOB_STORAGE_PROVIDER "S3") ($.Values.secrets.BLOB_STORAGE_S3_ACCESS_KEY) ($.Values.secrets.BLOB_STORAGE_S3_SECRET_KEY) }}
apiVersion: v1
data:
  accessKey: {{ $.Values.secrets.BLOB_STORAGE_S3_ACCESS_KEY | b64enc }}
  secretKey: {{ $.Values.secrets.BLOB_STORAGE_S3_SECRET_KEY | b64enc }}
kind: Secret
metadata:
  name: workflow-minio-cred
  namespace: devtron-ci
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
---
apiVersion: v1
data:
  accessKey: {{ $.Values.secrets.BLOB_STORAGE_S3_ACCESS_KEY | b64enc }}
  secretKey: {{ $.Values.secrets.BLOB_STORAGE_S3_SECRET_KEY | b64enc }}
kind: Secret
metadata:
  name: workflow-minio-cred
  namespace: devtron-cd
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
{{- else if and ($.Values.minio.enabled) (ne $.Values.configs.BLOB_STORAGE_PROVIDER "S3") }}
apiVersion: v1
data:
  accessKey: {{ $minioAccessKey }}
  secretKey: {{ $minioSecretKey }}
kind: Secret
metadata:
  name: workflow-minio-cred
  namespace: devtron-ci
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
---
apiVersion: v1
data:
  accessKey: {{ $minioAccessKey }}
  secretKey: {{ $minioSecretKey }}
kind: Secret
metadata:
  name: workflow-minio-cred
  namespace: devtron-cd
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
{{- end }}
{{- end }}
{{- if $.Values.monitoring }}
{{- if $.Values.monitoring.grafana }}
{{- if $.Values.monitoring.grafana.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: devtron-grafana-cred-secret
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/resource-policy": keep
type: Opaque
data:
  admin-user: YWRtaW4=
  admin-password: {{ $grafanaPwd }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
---
{{- $secretObj := (lookup "v1" "Secret" "devtroncd" "postgresql-postgresql") | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
{{- $Secret := (get $secretData "postgresql-password") | default (randAlphaNum 32) | b64enc }}
apiVersion: v1
kind: Secret
data:
  postgresql-password: {{ $Secret }}
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_DB: b3JjaGVzdHJhdG9y
metadata:
  name: postgresql-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/resource-policy": keep
type: Opaque
---
apiVersion: v1
kind: Secret
data:
  DB_PASSWORD: {{ $Secret }}
metadata:
  name: postgresql-migrator
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-4"
    "helm.sh/resource-policy": keep
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: "devtron-secret"
  labels:
    release: devtron
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-3"
    "helm.sh/resource-policy": keep
data:
  PG_PASSWORD: {{ $Secret }}
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: "devtron-custom-secret"
  labels:
    release: devtron
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
data:
  {{- if $.Values.installer.modules }}
  {{- if has "cicd" $.Values.installer.modules }}
  {{- if and ($.Values.minio.enabled) (not $.Values.configs.BLOB_STORAGE_PROVIDER) }}
  BLOB_STORAGE_S3_ACCESS_KEY: {{ $minioAccessKey }}
  BLOB_STORAGE_S3_SECRET_KEY: {{ $minioSecretKey }}  
  {{- end }}
  {{- if $.Values.monitoring }}
  {{- if $.Values.monitoring.grafana }}
  {{- if $.Values.monitoring.grafana.enabled }}
  GRAFANA_PASSWORD: {{ $grafanaPwd }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- range $k, $v := $.Values.secrets }}
  {{- if and (eq $k "BLOB_STORAGE_GCP_CREDENTIALS_JSON" ) (eq $.Values.configs.BLOB_STORAGE_PROVIDER "GCP") }}
  BLOB_STORAGE_GCP_CREDENTIALS_JSON: {{ $.Values.secrets.BLOB_STORAGE_GCP_CREDENTIALS_JSON }}
  {{- else }}
  {{ $k }}: {{ $v | b64enc }}
  {{- end }}
  {{- end }}
type: Opaque
