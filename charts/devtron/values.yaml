global:
  podSecurityContext:
    fsGroup: 1000
    runAsGroup: 1000
    runAsUser: 1000
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 1000
    runAsNonRoot: true
  containerRegistry: "quay.io/devtron"

installer:
  repo: "devtron-labs/devtron"
  release: "v0.6.29"
  registry: ""
  image: inception
  tag: 473deaa4-185-21582
  source: "github" # Available options are github and gitee
#  mode: "dashboard" # Available options are dashboard, full and hyperion (deprecated) NOT USING THIS
  modules: [] # Available options are cicd
  openshift: false # Set this to true if you are installing on openshift
  production_overrides: "" # Set true if you want to use this Devtron stack in Production (This will require more resources)

# Change the below values for full mode only

#Use secrets in plaintext, they'll be encoded to base64 automatically.
secrets: {}

#  REQUIRED IF BLOB_STORAGE_PROVIDER=AZURE Token with read write access to AZURE_BLOB_CONTAINER_CI_LOG and AZURE_BLOB_CONTAINER_CI_CACHE
#  AZURE_ACCOUNT_KEY: "xxxxxxxxxx"
configs:
  BLOB_STORAGE_PROVIDER: ""   #AZURE|S3|MINIO|GCP
  ENABLE_LEGACY_API: "false"  # Set to true if you are installing Devtron on a kubernetes version < k8s 1.19
# Amazon AWS S3 bucket and region for storing Build-cache for faster build process. Mandatory if BLOB_STORAGE_PROVIDER is AWS.
  #DEFAULT_CACHE_BUCKET: "change-me"   #Do not include s3://
  #DEFAULT_CACHE_BUCKET_REGION: "us-east-1"
# Amazon AWS S3 bucket and region for storing Build-logs. Mandatory if BLOB_STORAGE_PROVIDER is AWS.
  #DEFAULT_BUILD_LOGS_BUCKET: "change-me"   #Do not include s3://
  #DEFAULT_CD_LOGS_BUCKET_REGION: "us-east-1"
# Amazon AWS Secret Region if you will be using AWS Secret manager for storing secrets.
  #EXTERNAL_SECRET_AMAZON_REGION: ""
# Azure Blob storage Info for storing Build Logs and Build cache for faster build process.
  #AZURE_ACCOUNT_NAME: "test-account"
  #AZURE_BLOB_CONTAINER_CI_LOG: "ci-log-container"
  #AZURE_BLOB_CONTAINER_CI_CACHE: "ci-cache-container"

# Change the below values for hyperion only mode (Refer https://docs.devtron.ai/#hyperion )
components:
  dashboard:
    config:
      analytics: "false"
      hotjar: "false"
      sentry: "false"
      sentryEnv: "PRODUCTION"
      applicationMetrics: "true"
      extraConfigs:
        USE_V2: "true"
        ENABLE_BUILD_CONTEXT: "true"
        ENABLE_RESTART_WORKLOAD: "true"
        HIDE_EXCLUDE_INCLUDE_GIT_COMMITS: "false"
        ENABLE_SCOPED_VARIABLES: "true"
        ENABLE_CI_JOB: "true"
        GLOBAL_API_TIMEOUT: "60000"
        TRIGGER_API_TIMEOUT: "60000"
        ENABLE_EXTERNAL_ARGO_CD: "false"
        SERVICE_WORKER_TIMEOUT: "1"
        API_BATCH_SIZE: "30"
    registry: ""
    image: "dashboard:1c86e84e-325-22108"
    imagePullPolicy: IfNotPresent

  devtron:
    registry: ""
    image: "hyperion:e7f34f5a-280-22107"
    cicdImage: "devtron:e7f34f5a-434-22106"
    imagePullPolicy: IfNotPresent
    customOverrides: {}
    serviceMonitor:
      enabled: false
    service:
      type: LoadBalancer
      port: 80
      # nodePort: 32080
      labels: {}
      annotations: {}
      loadBalancerSourceRanges: []
    ingress:
      enabled: false
      className: nginx
      labels: {}
      annotations: {}
        # kubernetes.io/tls-acme: "true"
      pathType: ImplementationSpecific
      host: devtron.example.com
      tls: []
      #  - secretName: devtron-tls
      #    hosts:
      #      - devtron.example.com
  ciRunner:
    registry: ""
    image: "ci-runner:f5614d79-541-22176"


  argocdDexServer:
    registry: ""
    image: "dex:v2.30.2"
    imagePullPolicy: IfNotPresent
    initContainer:
      authenticator: "authenticator:e414faff-393-13273"

  kubelink:
    registry: ""
    image: "kubelink:2610ac5a-564-22109"
    imagePullPolicy: IfNotPresent
    configs:
      ENABLE_HELM_RELEASE_CACHE: "true"
      MANIFEST_FETCH_BATCH_SIZE: "2"
      NATS_MSG_PROCESSING_BATCH_SIZE: "1"
      NATS_SERVER_HOST: nats://devtron-nats.devtroncd:4222
      PG_ADDR: postgresql-postgresql.devtroncd
      PG_DATABASE: orchestrator
      PG_LOG_QUERY: "true"
      PG_PORT: "5432"
      PG_USER: postgres
    dbconfig:
      secretName: postgresql-postgresql
      keyName: postgresql-password

  kubewatch:
    registry: ""
    image: "kubewatch:50d4d32d-419-22116"
    imagePullPolicy: IfNotPresent
    configs:
      devtroncd_NAMESPACE: "devtron-ci"
      CI_INFORMER: "true"
      ACD_NAMESPACE: "devtroncd"
      ACD_INFORMER: "true"
      NATS_STREAM_MAX_AGE: "10800"

  postgres:
    registry: ""
    image: "postgres:11.9.0-debian-10-r26"
    armImage: "postgres:11.9"
    initImage: "minideb:latest"
    imagePullPolicy: "IfNotPresent"
    metrics:
      image: postgres_exporter:v0.4.7
      armImage: postgres_exporter:v0.10.1
    persistence:
      volumeSize: "20Gi"

  gitsensor:
    registry: ""
    image: "git-sensor:8545feb5-200-22005"
    imagePullPolicy: IfNotPresent
    serviceMonitor:
      enabled: false
    persistence:
      volumeSize: 2Gi
    configs:
      PG_ADDR: postgresql-postgresql.devtroncd
      PG_USER: postgres
      COMMIT_STATS_TIMEOUT_IN_SEC: "2"
      ENABLE_FILE_STATS: "true"
      USE_GIT_CLI: "true"
    dbconfig:
      secretName: postgresql-postgresql
      keyName: postgresql-password
# Values for lens
  lens:
    registry: ""
    image: "lens:70577aaa-333-21179"
    imagePullPolicy: IfNotPresent
    secrets: {}
    resources: {}
    configs:
      GIT_SENSOR_PROTOCOL: GRPC
      GIT_SENSOR_URL: git-sensor-service.devtroncd:90
      NATS_SERVER_HOST: nats://devtron-nats.devtroncd:4222
      PG_ADDR: postgresql-postgresql.devtroncd
      PG_PORT: "5432"
      PG_USER: postgres
      PG_DATABASE: lens
    dbconfig:
      secretName: postgresql-postgresql
      keyName: postgresql-password
# Change below values for nats
  nats:
    registry: ""
    image: nats:2.9.3-alpine
    reloader:
      image: nats-server-config-reloader:0.6.2
      imagePullPolicy: IfNotPresent
    metrics:
      image: prometheus-nats-exporter:0.9.0
      imagePullPolicy: IfNotPresent
    natsBox:
      image: nats-box
    serviceMonitor:
      enabled: false
    persistence:
      storage: 5Gi
  migrator:
    registry: ""
    image: "migrator:v4.16.2"
    kubectlImage: "kubectl:latest"
    duplicateChartImage: devtron-utils:dup-chart-repo-v1.1.0
    envVars:
      devtron:
        DB_NAME: "orchestrator"
      casbin:
        DB_NAME: "casbin"
      gitsensor:
        DB_NAME: "git_sensor"
      lens: 
        DB_NAME: "lens"

  chartSync:
    registry: ""
    image: chart-sync:d0dcc590-373-21074
  
# values for argocd integration
argo-cd:
  enabled: false
  fullnameOverride: "argocd"
  global:
    image:
      # -- If defined, a repository applied to all Argo CD deployments
      repository: quay.io/argoproj/argocd
      # -- Overrides the global Argo CD image tag whose default is the chart appVersion
      tag: "v2.5.2"
      # -- If defined, a imagePullPolicy applied to all Argo CD deployments
      imagePullPolicy: IfNotPresent
  configs:
    secret:
      createSecret: false
  # argocd-application-controller
  controller:
    args:
      # -- define the application controller `--status-processors`
      statusProcessors: "50"
      # -- define the application controller `--operation-processors`
      operationProcessors: "25"
      # -- define the application controller `--app-hard-resync`
      appHardResyncPeriod: "0"
      # -- define the application controller `--app-resync`
      appResyncPeriod: "180"
      # -- define the application controller `--self-heal-timeout-seconds`
      selfHealTimeout: "5"
      # -- define the application controller `--repo-server-timeout-seconds`
      repoServerTimeoutSeconds: "200"
    extraArgs:
    - --kubectl-parallelism-limit
    - "35"
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    env:
    - name: ARGOCD_RECONCILIATION_TIMEOUT
      valueFrom:
        configMapKeyRef:
          key: timeout.reconciliation
          name: argocd-cm
          optional: true
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-application-controller
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
  # argocd-dex-server
  dex:
    enabled: false
  # argocd-redis
  redis:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-redis
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    image:
      repository: public.ecr.aws/docker/library/redis
      tag: 7.0.5-alpine
  # argocd-server
  server:
    configEnabled: false
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    # argocd-rbac-cm
    rbacConfig:
      policy.default: role:admin
  # argocd-repo-server
  repoServer:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-repo-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    extraArgs:
    - --repo-cache-expiration
    - 24h
    - --parallelismlimit
    - "50"
    env:
    - name: ARGOCD_RECONCILIATION_TIMEOUT
      valueFrom:
        configMapKeyRef:
          key: timeout.reconciliation
          name: argocd-cm
          optional: true
    - name: ARGOCD_EXEC_TIMEOUT
      value: 180s
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
  applicationSet:
    enabled: false
  notifications:
    enabled: false
# Values for security integration
security:
  enabled: false
  imageScanner:
    image: "image-scanner:c0416bc2-334-22111"
  # Values for trivy
  trivy:
    enabled: false
  # Values for clair
  clair:
    enabled: false
    fullnameOverride: clair
    image:
      repository: clair
      tag: 4.3.6
# Values for notifier integration
notifier:
  enabled: false
  imagePullPolicy: IfNotPresent
  image: "notifier:924a17f6-372-22110"
  configs:
    CD_ENVIRONMENT: PROD
    DB: orchestrator
    DB_HOST: postgresql-postgresql.devtroncd
    DB_PORT: "5432"
    DB_USER: postgres
  secrets: {}
  dbconfig:
    secretName: postgresql-postgresql
    keyName: postgresql-password
  resources: {}
# Set enable to true if you want to use minio for storing cache and logs
minio:
  enabled: false
  replicaCount: 1
  image: "minio:RELEASE.2021-02-14T04-01-33Z"
  imagePullPolicy: IfNotPresent
  mbImage: "minio-mc:RELEASE.2021-02-14T04-28-06Z"
  mbImagePullPolicy: IfNotPresent
  gatewayImage: "minio:RELEASE.2020-12-03T05-49-24Z"
  persistence:
    storage: "50Gi"
# Change below values for workflow controller
workflowController:
  registry: "quay.io/argoproj"
  # Set this to true if you have IMDSv2 enforced or IMDSv1 and v2 on your AWS EKS cluster and false if you are using IMDSv1 with token hop limit set to 1
  IMDSv2Enforced: true
  image: "workflow-controller:v3.4.3"
  executorImage: "argoexec:v3.4.3"
  IMDSv1Image: "workflow-controller:v3.0.7"
  IMDSv1ExecutorImage: "argoexec:v3.0.7"


# Values for grafana integration
monitoring:
  grafana:
    enabled: false
    registry: ""
    image: "grafana:7.3.1"
    busyboxImage: "busybox:1.31.1"
    batsImage: "bats:v1.4.1"
    imagePullPolicy: IfNotPresent
    resources: {}
    grafanaOrgJob:
      curlImage: k8s-utils:tutum-curl
    grafanaDashboards:
      image: "k8s-sidecar:1.1.0"
      curlImage: "curl:7.73.0"
      imagePullPolicy: IfNotPresent
      resources: {}
    persistence:
      storage: "2Gi"