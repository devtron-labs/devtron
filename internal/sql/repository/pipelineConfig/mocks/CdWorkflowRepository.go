// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"context"
	bean "github.com/devtron-labs/devtron/api/bean"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/go-pg/pg"

	pipelineConfig "github.com/devtron-labs/devtron/internal/sql/repository/pipelineConfig"
)

// CdWorkflowRepository is an autogenerated mock type for the CdWorkflowRepository type
type CdWorkflowRepository struct {
	mock.Mock
}

// ExistsByStatus provides a mock function with given fields: status
func (_m *CdWorkflowRepository) ExistsByStatus(status string) (bool, error) {
	ret := _m.Called(status)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllCdStagesLatestEntity provides a mock function with given fields: pipelineIds
func (_m *CdWorkflowRepository) FetchAllCdStagesLatestEntity(pipelineIds []int) ([]*pipelineConfig.CdWorkflowStatus, error) {
	ret := _m.Called(pipelineIds)

	var r0 []*pipelineConfig.CdWorkflowStatus
	if rf, ok := ret.Get(0).(func([]int) []*pipelineConfig.CdWorkflowStatus); ok {
		r0 = rf(pipelineIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pipelineConfig.CdWorkflowStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(pipelineIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllCdStagesLatestEntityStatus provides a mock function with given fields: wfrIds
func (_m *CdWorkflowRepository) FetchAllCdStagesLatestEntityStatus(wfrIds []int) ([]*pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(wfrIds)

	var r0 []*pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func([]int) []*pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(wfrIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(wfrIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchArtifactsByCdPipelineId provides a mock function with given fields: pipelineId, runnerType, offset, limit
func (_m *CdWorkflowRepository) FetchArtifactsByCdPipelineId(pipelineId int, runnerType bean.WorkflowType, offset int, limit int) ([]pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(pipelineId, runnerType, offset, limit)

	var r0 []pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, bean.WorkflowType, int, int) []pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(pipelineId, runnerType, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bean.WorkflowType, int, int) error); ok {
		r1 = rf(pipelineId, runnerType, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindArtifactByPipelineIdAndRunnerType provides a mock function with given fields: pipelineId, runnerType, limit
func (_m *CdWorkflowRepository) FindArtifactByPipelineIdAndRunnerType(pipelineId int, runnerType bean.WorkflowType, limit int) ([]pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(pipelineId, runnerType, limit)

	var r0 []pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, bean.WorkflowType, int) []pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(pipelineId, runnerType, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bean.WorkflowType, int) error); ok {
		r1 = rf(pipelineId, runnerType, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: wfId
func (_m *CdWorkflowRepository) FindById(wfId int) (*pipelineConfig.CdWorkflow, error) {
	ret := _m.Called(wfId)

	var r0 *pipelineConfig.CdWorkflow
	if rf, ok := ret.Get(0).(func(int) *pipelineConfig.CdWorkflow); ok {
		r0 = rf(wfId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelineConfig.CdWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(wfId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByWorkflowIdAndRunnerType provides a mock function with given fields: wfId, runnerType
func (_m *CdWorkflowRepository) FindByWorkflowIdAndRunnerType(ctx context.Context, wfId int, runnerType bean.WorkflowType) (pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(wfId, runnerType)

	var r0 pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, bean.WorkflowType) pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(wfId, runnerType)
	} else {
		r0 = ret.Get(0).(pipelineConfig.CdWorkflowRunner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bean.WorkflowType) error); ok {
		r1 = rf(wfId, runnerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCdWorkflowMetaByEnvironmentId provides a mock function with given fields: appId, environmentId, offset, size
func (_m *CdWorkflowRepository) FindCdWorkflowMetaByEnvironmentId(appId int, environmentId int, offset int, size int) ([]pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(appId, environmentId, offset, size)

	var r0 []pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, int, int, int) []pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(appId, environmentId, offset, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, int) error); ok {
		r1 = rf(appId, environmentId, offset, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCdWorkflowMetaByPipelineId provides a mock function with given fields: pipelineId, offset, size
func (_m *CdWorkflowRepository) FindCdWorkflowMetaByPipelineId(pipelineId int, offset int, size int) ([]pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(pipelineId, offset, size)

	var r0 []pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, int, int) []pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(pipelineId, offset, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(pipelineId, offset, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCdWorkflowRunnerByEnvironmentIdAndRunnerType provides a mock function with given fields: appId, environmentId, runnerType
func (_m *CdWorkflowRepository) FindLatestCdWorkflowRunnerByEnvironmentIdAndRunnerType(appId int, environmentId int, runnerType bean.WorkflowType) (pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(appId, environmentId, runnerType)

	var r0 pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, int, bean.WorkflowType) pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(appId, environmentId, runnerType)
	} else {
		r0 = ret.Get(0).(pipelineConfig.CdWorkflowRunner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, bean.WorkflowType) error); ok {
		r1 = rf(appId, environmentId, runnerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindConfigByPipelineId provides a mock function with given fields: pipelineId
func (_m *CdWorkflowRepository) FindConfigByPipelineId(pipelineId int) (*pipelineConfig.CdWorkflowConfig, error) {
	ret := _m.Called(pipelineId)

	var r0 *pipelineConfig.CdWorkflowConfig
	if rf, ok := ret.Get(0).(func(int) *pipelineConfig.CdWorkflowConfig); ok {
		r0 = rf(pipelineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelineConfig.CdWorkflowConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastPreOrPostTriggeredByEnvironmentId provides a mock function with given fields: appId, environmentId
func (_m *CdWorkflowRepository) FindLastPreOrPostTriggeredByEnvironmentId(appId int, environmentId int) (pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(appId, environmentId)

	var r0 pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, int) pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(appId, environmentId)
	} else {
		r0 = ret.Get(0).(pipelineConfig.CdWorkflowRunner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, environmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastPreOrPostTriggeredByPipelineId provides a mock function with given fields: pipelineId
func (_m *CdWorkflowRepository) FindLastPreOrPostTriggeredByPipelineId(pipelineId int) (pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(pipelineId)

	var r0 pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int) pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(pipelineId)
	} else {
		r0 = ret.Get(0).(pipelineConfig.CdWorkflowRunner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(pipelineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastStatusByPipelineIdAndRunnerType provides a mock function with given fields: pipelineId, runnerType
func (_m *CdWorkflowRepository) FindLastStatusByPipelineIdAndRunnerType(pipelineId int, runnerType bean.WorkflowType) (pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(pipelineId, runnerType)

	var r0 pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, bean.WorkflowType) pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(pipelineId, runnerType)
	} else {
		r0 = ret.Get(0).(pipelineConfig.CdWorkflowRunner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bean.WorkflowType) error); ok {
		r1 = rf(pipelineId, runnerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestCdWorkflowByPipelineId provides a mock function with given fields: pipelineIds
func (_m *CdWorkflowRepository) FindLatestCdWorkflowByPipelineId(pipelineIds []int) (*pipelineConfig.CdWorkflow, error) {
	ret := _m.Called(pipelineIds)

	var r0 *pipelineConfig.CdWorkflow
	if rf, ok := ret.Get(0).(func([]int) *pipelineConfig.CdWorkflow); ok {
		r0 = rf(pipelineIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelineConfig.CdWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(pipelineIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestCdWorkflowByPipelineIdV2 provides a mock function with given fields: pipelineIds
func (_m *CdWorkflowRepository) FindLatestCdWorkflowByPipelineIdV2(pipelineIds []int) ([]*pipelineConfig.CdWorkflow, error) {
	ret := _m.Called(pipelineIds)

	var r0 []*pipelineConfig.CdWorkflow
	if rf, ok := ret.Get(0).(func([]int) []*pipelineConfig.CdWorkflow); ok {
		r0 = rf(pipelineIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pipelineConfig.CdWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(pipelineIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestWfrByAppIdAndEnvironmentId provides a mock function with given fields: appId, environmentId
func (_m *CdWorkflowRepository) FindLatestWfrByAppIdAndEnvironmentId(appId int, environmentId int) (*pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(appId, environmentId)

	var r0 pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, int) pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(appId, environmentId)
	} else {
		r0 = ret.Get(0).(pipelineConfig.CdWorkflowRunner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, environmentId)
	} else {
		r1 = ret.Error(1)
	}

	return &r0, r1
}

// FindPreviousCdWfRunnerByStatus provides a mock function with given fields: pipelineId, currentWFRunnerId, status
func (_m *CdWorkflowRepository) FindPreviousCdWfRunnerByStatus(pipelineId int, currentWFRunnerId int, status []string) ([]*pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(pipelineId, currentWFRunnerId, status)

	var r0 []*pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int, int, []string) []*pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(pipelineId, currentWFRunnerId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, []string) error); ok {
		r1 = rf(pipelineId, currentWFRunnerId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkflowRunnerByCdWorkflowId provides a mock function with given fields: wfIds
func (_m *CdWorkflowRepository) FindWorkflowRunnerByCdWorkflowId(wfIds []int) ([]*pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(wfIds)

	var r0 []*pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func([]int) []*pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(wfIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(wfIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkflowRunnerById provides a mock function with given fields: wfrId
func (_m *CdWorkflowRepository) FindWorkflowRunnerById(wfrId int) (*pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(wfrId)

	var r0 *pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(int) *pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(wfrId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(wfrId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnection provides a mock function with given fields:
func (_m *CdWorkflowRepository) GetConnection() *pg.DB {
	ret := _m.Called()

	var r0 *pg.DB
	if rf, ok := ret.Get(0).(func() *pg.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.DB)
		}
	}

	return r0
}

// IsLatestWf provides a mock function with given fields: pipelineId, wfId
func (_m *CdWorkflowRepository) IsLatestWf(pipelineId int, wfId int) (bool, error) {
	ret := _m.Called(pipelineId, wfId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(pipelineId, wfId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(pipelineId, wfId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveWorkFlow provides a mock function with given fields: wf
func (_m *CdWorkflowRepository) SaveWorkFlow(ctx context.Context, wf *pipelineConfig.CdWorkflow) error {
	ret := _m.Called(wf)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipelineConfig.CdWorkflow) error); ok {
		r0 = rf(wf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWorkFlowRunner provides a mock function with given fields: wfr
func (_m *CdWorkflowRepository) SaveWorkFlowRunner(wfr *pipelineConfig.CdWorkflowRunner) (*pipelineConfig.CdWorkflowRunner, error) {
	ret := _m.Called(wfr)

	var r0 *pipelineConfig.CdWorkflowRunner
	if rf, ok := ret.Get(0).(func(*pipelineConfig.CdWorkflowRunner) *pipelineConfig.CdWorkflowRunner); ok {
		r0 = rf(wfr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipelineConfig.CdWorkflowRunner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pipelineConfig.CdWorkflowRunner) error); ok {
		r1 = rf(wfr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveWorkFlows provides a mock function with given fields: wfs
func (_m *CdWorkflowRepository) SaveWorkFlows(wfs ...*pipelineConfig.CdWorkflow) error {
	_va := make([]interface{}, len(wfs))
	for _i := range wfs {
		_va[_i] = wfs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...*pipelineConfig.CdWorkflow) error); ok {
		r0 = rf(wfs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWorkFlow provides a mock function with given fields: wf
func (_m *CdWorkflowRepository) UpdateWorkFlow(wf *pipelineConfig.CdWorkflow) error {
	ret := _m.Called(wf)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipelineConfig.CdWorkflow) error); ok {
		r0 = rf(wf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWorkFlowRunner provides a mock function with given fields: wfr
func (_m *CdWorkflowRepository) UpdateWorkFlowRunner(wfr *pipelineConfig.CdWorkflowRunner) error {
	ret := _m.Called(wfr)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipelineConfig.CdWorkflowRunner) error); ok {
		r0 = rf(wfr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWorkFlowRunners provides a mock function with given fields: wfr
func (_m *CdWorkflowRepository) UpdateWorkFlowRunners(wfr []*pipelineConfig.CdWorkflowRunner) error {
	ret := _m.Called(wfr)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*pipelineConfig.CdWorkflowRunner) error); ok {
		r0 = rf(wfr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWorkFlowRunnersWithTxn provides a mock function with given fields: wfrs, tx
func (_m *CdWorkflowRepository) UpdateWorkFlowRunnersWithTxn(wfrs []*pipelineConfig.CdWorkflowRunner, tx *pg.Tx) error {
	ret := _m.Called(wfrs, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*pipelineConfig.CdWorkflowRunner, *pg.Tx) error); ok {
		r0 = rf(wfrs, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCdWorkflowRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCdWorkflowRepository creates a new instance of CdWorkflowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCdWorkflowRepository(t mockConstructorTestingTNewCdWorkflowRepository) *CdWorkflowRepository {
	mock := &CdWorkflowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
