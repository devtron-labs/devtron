openapi: "3.0.0"
info:
  version: 1.0.0
  title: Devtron
servers:
  - url: http://petstore.swagger.io/api
paths:
  /user/v2:
    get:
      summary: Returns all users
      description: Returns a paginated list of users with optional filtering and sorting
      operationId: GetAllV2
      parameters:
        - name: searchKey
          in: query
          description: Search key for filtering users
          required: false
          schema:
            type: string

        - name: sortOrder
          in: query
          description: Sorting order (ASC or DESC)
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC

        - name: sortBy
          in: query
          description: Field to sort by (email_id or last_login)
          required: false
          schema:
            type: string
            enum:
              - email_id
              - last_login

        - name: offset
          in: query
          description: Offset for pagination
          required: false
          schema:
            type: integer

        - name: size
          in: query
          description: Number of records per page
          required: false
          schema:
            type: integer

        - name: showAll
          in: query
          description: Whether to show all users or only active ones
          required: false
          schema:
            type: boolean

      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListingResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

  /user:
    get:
      summary: Returns all users (deprecated)
      description: Returns all users (deprecated, use /user/v2 instead)
      operationId: findAllUsers
      deprecated: true
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    post:
      summary: Creates a new user
      description: Creates a new user with specified roles and permissions
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not acceptable - incompatible request format
        '500':
          description: Internal server error

    put:
      summary: Updates a user
      description: Updates an existing user's roles and permissions
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not acceptable - incompatible request format
        '500':
          description: Internal server error

  /user/email:
    get:
      summary: Search user by email
      description: Search for a user by their email address
      operationId: findUserByEmail
      parameters:
        - name: email-id
          in: query
          description: Email ID of the user to search for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /user/{id}:
    get:
      summary: Get user by ID
      description: Returns user details with role filters
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /orchestrator/user/bulk:
    delete:
      summary: Delete multiple users
      description: Deletes multiple users in bulk
      operationId: bulkDeleteUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteRequest'
      responses:
        '200':
          description: Successfully deleted users
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      required:
        - email_id
      properties:
        id:
          type: integer
          description: Unique ID of the user
        email_id:
          type: string
          description: Email ID of the user
        userRoleGroups:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleGroupItem'
        roleFilters:
          type: array
          items:
            $ref: '#/components/schemas/roleFilter'
          description: Role filters for the user
        superAdmin:
          type: boolean
          description: Whether the user is a super admin
        userId:
          type: integer
          description: ID of the user making the request

    UserListingResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/AllUsersV2'
          description: List of users
        totalCount:
          type: integer
          description: Total number of users

    AllUsersV2:
      type: object
      properties:
        id:
          type: integer
          description: User ID
        email_id:
          type: string
          description: Email ID
        last_login:
          type: string
          format: date-time
          description: Last login timestamp
        roleFilters:
          type: array
          items:
            $ref: '#/components/schemas/roleFilter'
          description: Role filters

    UserRoleGroupItem:
      type: object
      properties:
        id:
          type: integer
          description: Role group ID
        name:
          type: string
          description: Role group name

    roleFilter:
      type: object
      properties:
        entity:
          type: string
          description: Entity type
        team:
          type: string
          description: Team name
        environment:
          type: string
          description: Environment name
        action:
          type: string
          description: Action type

    BulkDeleteRequest:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: integer
          description: List of user IDs to delete

    AllUsers:
      type: object
      required:
        - email_id
      properties:
        id:
          type: integer
          description: Unique id of user
        email_id:
          type: string
          description: Unique valid email-id of user, comma separated emails ids for multiple users
        groups:
          type: array
          items:
            type: string
        roleFilters:
          type: array
          items:
            $ref: '#/components/schemas/emptyRoleFilter'
          description: role filters objects
        lastLogin:
          type: string
          format: date-time
          description: user last login time

    emptyRoleFilter:
      type: object
      required:
        - action

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message