openapi: "3.0.3"
info:
  title: Devtron ConfigMap and Secret Management API (CORRECTED)
  description: |
    **CORRECTED API SPECIFICATIONS** for ConfigMap and Secret management in Devtron.
    
    ## üö® CRITICAL ISSUES FOUND:
    
    ### 1. **PATH MISMATCHES** ‚ùå
    - **Frontend expects**: `/orchestrator/global/cm/{appId}` 
    - **Actual codebase**: `/orchestrator/config/global/cm/{appId}`
    - **Frontend expects**: `/orchestrator/global/cs/{appId}`
    - **Actual codebase**: `/orchestrator/config/global/cs/{appId}`
    
    ### 2. **MISSING PUT METHODS** ‚ùå
    - **Frontend expects**: `PUT /orchestrator/global/cm/{appId}/{id}`
    - **Actual codebase**: Only has `POST /config/global/cm` (CMGlobalAddUpdate)
    - **Frontend expects**: `PUT /orchestrator/global/cs/{appId}/{id}`
    - **Actual codebase**: Only has `POST /config/global/cs` (CSGlobalAddUpdate)
    
    ### 3. **PAYLOAD STRUCTURE MISMATCH** ‚ùå
    - **Frontend sends**: `{name: "global-configmap", data: {key1: "value1"}}`
    - **Codebase expects**: `ConfigDataRequest` with complex nested structure
    
    ## ‚úÖ CORRECTED SPECIFICATIONS BELOW
    
    This specification includes:
    - **Actual codebase endpoints** (what currently exists)
    - **Missing endpoints** your frontend needs (marked as TODO)
    - **Correct payload structures** based on codebase analysis
    - **Frontend-compatible examples** matching your provided payloads
  version: "1.0.0"
  contact:
    name: Devtron Support
    email: support@devtron.ai
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: /orchestrator
    description: Devtron Orchestrator API Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
        status:
          type: string
          description: Response status
        result:
          type: object
          description: Response data

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        status:
          type: string
          description: Error status
        errors:
          type: array
          items:
            type: string
          description: List of error messages

    # Based on pkg/pipeline/bean/ConfigDataRequest from codebase
    ConfigDataRequest:
      type: object
      description: |
        **ACTUAL CODEBASE STRUCTURE** - This is what the handlers expect.
        Your frontend payloads need to be transformed to this structure.
      required:
        - appId
        - configData
      properties:
        id:
          type: integer
          description: ID of the ConfigMap/Secret (0 for new)
          example: 0
        appId:
          type: integer
          description: Application ID
          example: 123
        environmentId:
          type: integer
          description: Environment ID (for environment-specific configs)
          example: 456
        configData:
          type: array
          description: Array of ConfigData objects
          items:
            $ref: '#/components/schemas/ConfigData'
        isDeletable:
          type: boolean
          description: Whether the config is deletable
          default: true

    # Based on pkg/pipeline/bean/ConfigData from codebase
    ConfigData:
      type: object
      description: |
        **ACTUAL CODEBASE STRUCTURE** - Individual ConfigMap or Secret data.
        Your frontend's simple {name, data} structure needs transformation.
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: Name of the ConfigMap/Secret
          example: "global-configmap"
        type:
          type: string
          description: Type of configuration
          enum: ["CONFIGMAP", "SECRET"]
          example: "CONFIGMAP"
        external:
          type: boolean
          description: Whether this is an external ConfigMap/Secret
          default: false
        mountPath:
          type: string
          description: Path where the ConfigMap/Secret should be mounted
          example: "/etc/config"
        data:
          type: object
          description: |
            **KEY DIFFERENCE**: Your frontend sends simple key-value pairs,
            but codebase expects JSON RawMessage format.
            Frontend: {"key1": "value1", "key2": "value2"}
            Codebase: JSON.RawMessage containing the above
          additionalProperties:
            type: string
          example:
            key1: "value1"
            key2: "value2"
        global:
          type: boolean
          description: Whether this is a global configuration
          default: true
        subPath:
          type: boolean
          description: Whether to use subPath mounting
          default: false
        filePermission:
          type: string
          description: File permissions for mounted files
          example: "0644"

    # Frontend-compatible simple structure (what your FE actually sends)
    SimpleFrontendPayload:
      type: object
      description: |
        **FRONTEND PAYLOAD STRUCTURE** - This is what your frontend actually sends.
        This needs to be transformed to ConfigDataRequest structure.
      required:
        - name
        - data
      properties:
        name:
          type: string
          description: ConfigMap/Secret name
          example: "global-configmap"
        data:
          type: object
          description: Simple key-value pairs
          additionalProperties:
            type: string
          example:
            key1: "value1"
            key2: "value2"

tags:
  - name: Global ConfigMaps
    description: Operations for global ConfigMaps (available across all environments)
  - name: Global Secrets
    description: Operations for global Secrets (available across all environments)
  - name: Environment ConfigMaps
    description: Operations for environment-specific ConfigMaps
  - name: Environment Secrets
    description: Operations for environment-specific Secrets
  - name: Missing Endpoints
    description: Endpoints your frontend expects but don't exist in codebase

paths:
  # ===== ACTUAL CODEBASE ENDPOINTS (WORKING) =====
  
  /config/global/cm:
    post:
      tags:
        - Global ConfigMaps
      summary: Create or update global ConfigMap
      description: |
        **ACTUAL CODEBASE ENDPOINT** ‚úÖ
        Handler: CMGlobalAddUpdate
        Path: /orchestrator/config/global/cm
        Method: POST (handles both create and update)
        
        **PAYLOAD TRANSFORMATION NEEDED:**
        Your frontend sends: `{name: "global-configmap", data: {key1: "value1"}}`
        But codebase expects: `ConfigDataRequest` structure (see schema below)
      operationId: CMGlobalAddUpdate
      requestBody:
        description: ConfigMap configuration request (codebase structure)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigDataRequest'
            examples:
              frontend_compatible:
                summary: Transformed from your frontend payload
                description: |
                  Your frontend payload:
                  ```json
                  {
                    "name": "global-configmap",
                    "data": {"key1": "value1", "key2": "value2"}
                  }
                  ```
                  
                  Needs to be transformed to:
                value:
                  appId: 123
                  configData:
                    - name: "global-configmap"
                      type: "CONFIGMAP"
                      external: false
                      global: true
                      data:
                        key1: "value1"
                        key2: "value2"
                      mountPath: "/etc/config"
                      subPath: false
                      filePermission: "0644"
      responses:
        '200':
          description: ConfigMap created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid request format or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /config/global/cs:
    post:
      tags:
        - Global Secrets
      summary: Create or update global Secret
      description: |
        **ACTUAL CODEBASE ENDPOINT** ‚úÖ
        Handler: CSGlobalAddUpdate
        Path: /orchestrator/config/global/cs
        Method: POST (handles both create and update)
        
        **PAYLOAD TRANSFORMATION NEEDED:**
        Your frontend sends: `{name: "global-secret", data: {username: "admin", password: "s3cr3t"}}`
        But codebase expects: `ConfigDataRequest` structure
      operationId: CSGlobalAddUpdate
      requestBody:
        description: Secret configuration request (codebase structure)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigDataRequest'
            examples:
              frontend_compatible:
                summary: Transformed from your frontend payload
                description: |
                  Your frontend payload:
                  ```json
                  {
                    "name": "global-secret",
                    "data": {"username": "admin", "password": "s3cr3t"}
                  }
                  ```
                  
                  Needs to be transformed to:
                value:
                  appId: 123
                  configData:
                    - name: "global-secret"
                      type: "SECRET"
                      external: false
                      global: true
                      data:
                        username: "admin"
                        password: "s3cr3t"
                      mountPath: "/etc/secrets"
                      subPath: false
                      filePermission: "0600"
      responses:
        '200':
          description: Secret created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid request format or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # ===== MISSING ENDPOINTS YOUR FRONTEND NEEDS =====

  /global/cm/{appId}:
    get:
      tags:
        - Missing Endpoints
      summary: "‚ùå MISSING: Get global ConfigMaps (Frontend Path)"
      description: |
        **MISSING ENDPOINT** ‚ùå

        **Frontend expects**: `GET /orchestrator/global/cm/{appId}`
        **Actual codebase**: `GET /orchestrator/config/global/cm/{appId}`

        **SOLUTION**: Update your frontend to use the correct path:
        `/orchestrator/config/global/cm/{appId}`
      operationId: CMGlobalFetchFrontendPath
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
          example: 123
      responses:
        '501':
          description: |
            **ENDPOINT DOES NOT EXIST**
            Use `/orchestrator/config/global/cm/{appId}` instead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /global/cs/{appId}:
    get:
      tags:
        - Missing Endpoints
      summary: "‚ùå MISSING: Get global Secrets (Frontend Path)"
      description: |
        **MISSING ENDPOINT** ‚ùå

        **Frontend expects**: `GET /orchestrator/global/cs/{appId}`
        **Actual codebase**: `GET /orchestrator/config/global/cs/{appId}`

        **SOLUTION**: Update your frontend to use the correct path:
        `/orchestrator/config/global/cs/{appId}`
      operationId: CSGlobalFetchFrontendPath
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
          example: 123
      responses:
        '501':
          description: |
            **ENDPOINT DOES NOT EXIST**
            Use `/orchestrator/config/global/cs/{appId}` instead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /global/cm/{appId}/{id}:
    get:
      tags:
        - Missing Endpoints
      summary: "‚ùå MISSING: Get global ConfigMap by ID (Frontend Path)"
      description: |
        **MISSING ENDPOINT** ‚ùå

        **Frontend expects**: `GET /orchestrator/global/cm/{appId}/{id}`
        **Actual codebase**: `GET /orchestrator/config/global/cm/edit/{appId}/{id}?name={name}`

        **SOLUTION**: Update your frontend to use the correct path and add name query parameter
      operationId: CMGlobalGetByIdFrontendPath
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
          example: 123
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '501':
          description: |
            **ENDPOINT DOES NOT EXIST**
            Use `/orchestrator/config/global/cm/edit/{appId}/{id}?name={name}` instead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Missing Endpoints
      summary: "‚ùå MISSING: Update global ConfigMap by ID"
      description: |
        **MISSING ENDPOINT** ‚ùå

        **Frontend expects**: `PUT /orchestrator/global/cm/{appId}/{id}`
        **Actual codebase**: Only has `POST /orchestrator/config/global/cm` (handles both create/update)

        **SOLUTION**: Use the existing POST endpoint with the ConfigMap ID in the payload
      operationId: CMGlobalUpdateByIdFrontendPath
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
          example: 123
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        description: |
          **FRONTEND PAYLOAD** (needs transformation):
          Your frontend sends: `{name: "global-configmap", data: {key1: "new-value"}}`

          **SOLUTION**: Transform to ConfigDataRequest and use POST /config/global/cm
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleFrontendPayload'
            example:
              name: "global-configmap"
              data:
                key1: "new-value"
      responses:
        '501':
          description: |
            **ENDPOINT DOES NOT EXIST**
            Transform payload and use `POST /orchestrator/config/global/cm` instead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /global/cs/{appId}/{id}:
    get:
      tags:
        - Missing Endpoints
      summary: "‚ùå MISSING: Get global Secret by ID (Frontend Path)"
      description: |
        **MISSING ENDPOINT** ‚ùå

        **Frontend expects**: `GET /orchestrator/global/cs/{appId}/{id}`
        **Actual codebase**: `GET /orchestrator/config/global/cs/edit/{appId}/{id}?name={name}`

        **SOLUTION**: Update your frontend to use the correct path and add name query parameter
      operationId: CSGlobalGetByIdFrontendPath
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
          example: 123
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '501':
          description: |
            **ENDPOINT DOES NOT EXIST**
            Use `/orchestrator/config/global/cs/edit/{appId}/{id}?name={name}` instead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Missing Endpoints
      summary: "‚ùå MISSING: Update global Secret by ID"
      description: |
        **MISSING ENDPOINT** ‚ùå

        **Frontend expects**: `PUT /orchestrator/global/cs/{appId}/{id}`
        **Actual codebase**: Only has `POST /orchestrator/config/global/cs` (handles both create/update)

        **SOLUTION**: Use the existing POST endpoint with the Secret ID in the payload
      operationId: CSGlobalUpdateByIdFrontendPath
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
          example: 123
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        description: |
          **FRONTEND PAYLOAD** (needs transformation):
          Your frontend sends: `{name: "global-secret", data: {username: "new-admin", password: "new-password"}}`

          **SOLUTION**: Transform to ConfigDataRequest and use POST /config/global/cs
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleFrontendPayload'
            example:
              name: "global-secret"
              data:
                username: "updated-admin"
                password: "updated-password"
      responses:
        '501':
          description: |
            **ENDPOINT DOES NOT EXIST**
            Transform payload and use `POST /orchestrator/config/global/cs` instead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ===== ENVIRONMENT-SPECIFIC ENDPOINTS =====

  /config/environment/cm:
    post:
      tags:
        - Environment ConfigMaps
      summary: Create or update environment-specific ConfigMap
      description: |
        **ACTUAL CODEBASE ENDPOINT** ‚úÖ
        Handler: CMEnvironmentAddUpdate
        Path: /orchestrator/config/environment/cm
        Method: POST (handles both create and update)

        **PAYLOAD TRANSFORMATION NEEDED:**
        Your frontend sends: `{appId: 123, envId: 456, name: "env-configmap", data: {envKey: "envValue"}}`
        But codebase expects: `ConfigDataRequest` structure with environmentId
      operationId: CMEnvironmentAddUpdate
      requestBody:
        description: Environment ConfigMap configuration request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigDataRequest'
            examples:
              frontend_compatible:
                summary: Transformed from your frontend payload
                description: |
                  Your frontend payload:
                  ```json
                  {
                    "appId": 123,
                    "envId": 456,
                    "name": "env-configmap",
                    "data": {"envKey": "envValue"}
                  }
                  ```

                  Needs to be transformed to:
                value:
                  appId: 123
                  environmentId: 456
                  configData:
                    - name: "env-configmap"
                      type: "CONFIGMAP"
                      external: false
                      global: false
                      data:
                        envKey: "envValue"
                      mountPath: "/etc/config"
                      subPath: false
                      filePermission: "0644"
      responses:
        '200':
          description: Environment ConfigMap created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid request format or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
