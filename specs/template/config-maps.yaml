openapi: "3.0.3"
info:
  title: Devtron ConfigMap and Secret Management API
  description: API specifications for ConfigMap and Secret management in Devtron orchestrator
  version: "1.0.0"
  contact:
    name: Devtron Support
    email: support@devtron.ai
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: /orchestrator
    description: Devtron Orchestrator API Server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
        status:
          type: string
        result:
          type: object

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        status:
          type: string
        errors:
          type: array
          items:
            type: string

    ConfigDataRequest:
      type: object
      required:
        - appId
        - configData
      properties:
        id:
          type: integer
          example: 0
        appId:
          type: integer
          example: 123
        environmentId:
          type: integer
          example: 456
        configData:
          type: array
          items:
            $ref: '#/components/schemas/ConfigData'
        isDeletable:
          type: boolean
          default: true

    ConfigData:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: "global-configmap"
        type:
          type: string
          enum: ["CONFIGMAP", "SECRET"]
          example: "CONFIGMAP"
        external:
          type: boolean
          default: false
        mountPath:
          type: string
          example: "/etc/config"
        data:
          type: object
          additionalProperties:
            type: string
          example:
            key1: "value1"
            key2: "value2"
        global:
          type: boolean
          default: true
        subPath:
          type: boolean
          default: false
        filePermission:
          type: string
          example: "0644"

    ConfigsList:
      type: object
      properties:
        maps:
          type: array
          items:
            $ref: '#/components/schemas/ConfigData'

tags:
  - name: Global ConfigMaps
    description: Global ConfigMap management
  - name: Global Secrets
    description: Global Secret management
  - name: Environment ConfigMaps
    description: Environment-specific ConfigMap operations
  - name: Environment Secrets
    description: Environment-specific Secret operations

paths:
  /config/global/cm:
    post:
      tags:
        - Global ConfigMaps
      summary: Create or update global ConfigMap
      description: Creates a new global ConfigMap or updates an existing one
      operationId: CMGlobalAddUpdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigDataRequest'
            example:
              id: 0
              appId: 123
              configData:
                - name: "global-configmap"
                  type: "CONFIGMAP"
                  external: false
                  mountPath: "/etc/config"
                  data:
                    key1: "value1"
                    key2: "value2"
                  global: true
                  subPath: false
                  filePermission: "0644"
              isDeletable: true
      responses:
        '200':
          description: ConfigMap created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /config/global/cs:
    post:
      tags:
        - Global Secrets
      summary: Create or update global Secret
      description: Creates a new global Secret or updates an existing one
      operationId: CSGlobalAddUpdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigDataRequest'
            example:
              id: 0
              appId: 123
              configData:
                - name: "global-secret"
                  type: "SECRET"
                  external: false
                  mountPath: "/etc/secrets"
                  data:
                    username: "admin"
                    password: "s3cr3t"
                  global: true
                  subPath: false
                  filePermission: "0600"
              isDeletable: true
      responses:
        '200':
          description: Secret created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /config/global/cm/{appId}:
    get:
      tags:
        - Global ConfigMaps
      summary: Get global ConfigMaps for application
      description: Retrieves all global ConfigMaps for the specified application
      operationId: CMGlobalFetch
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: Global ConfigMaps retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ConfigsList'
        '400':
          description: Invalid application ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /config/global/cs/{appId}:
    get:
      tags:
        - Global Secrets
      summary: Get global Secrets for application
      description: Retrieves all global Secrets for the specified application
      operationId: CSGlobalFetch
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: Global Secrets retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ConfigsList'
        '400':
          description: Invalid application ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
