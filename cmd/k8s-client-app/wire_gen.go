// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devtron-labs/common-lib/cloud-provider-identifier"
	"github.com/devtron-labs/common-lib/utils/k8s"
	cluster2 "github.com/devtron-labs/devtron/api/cluster"
	"github.com/devtron-labs/devtron/api/connector"
	"github.com/devtron-labs/devtron/api/helm-app/service"
	application2 "github.com/devtron-labs/devtron/api/k8s/application"
	capacity2 "github.com/devtron-labs/devtron/api/k8s/capacity"
	terminal3 "github.com/devtron-labs/devtron/api/terminal"
	"github.com/devtron-labs/devtron/client/dashboard"
	"github.com/devtron-labs/devtron/client/telemetry"
	terminal2 "github.com/devtron-labs/devtron/internal/sql/repository/terminal"
	"github.com/devtron-labs/devtron/internal/util"
	"github.com/devtron-labs/devtron/pkg/argoApplication/read"
	"github.com/devtron-labs/devtron/pkg/auth/authorisation/casbin"
	"github.com/devtron-labs/devtron/pkg/auth/user/noop"
	"github.com/devtron-labs/devtron/pkg/cluster"
	"github.com/devtron-labs/devtron/pkg/cluster/repository"
	"github.com/devtron-labs/devtron/pkg/clusterTerminalAccess"
	delete2 "github.com/devtron-labs/devtron/pkg/delete"
	"github.com/devtron-labs/devtron/pkg/fluxApplication"
	"github.com/devtron-labs/devtron/pkg/genericNotes"
	repository2 "github.com/devtron-labs/devtron/pkg/genericNotes/repository"
	k8s2 "github.com/devtron-labs/devtron/pkg/k8s"
	"github.com/devtron-labs/devtron/pkg/k8s/application"
	"github.com/devtron-labs/devtron/pkg/k8s/capacity"
	"github.com/devtron-labs/devtron/pkg/k8s/informer"
	"github.com/devtron-labs/devtron/pkg/kubernetesResourceAuditLogs"
	"github.com/devtron-labs/devtron/pkg/sql"
	"github.com/devtron-labs/devtron/pkg/terminal"
	util3 "github.com/devtron-labs/devtron/pkg/util"
	util2 "github.com/devtron-labs/devtron/util"
	"github.com/devtron-labs/devtron/util/argo"
	"github.com/devtron-labs/devtron/util/cron"
	"github.com/devtron-labs/devtron/util/rbac"
)

import (
	_ "embed"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	sugaredLogger, err := util.NewFileBaseSugaredLogger()
	if err != nil {
		return nil, err
	}
	sqliteConnection := sql.NewSqliteConnection(sugaredLogger)
	clusterFileBasedRepository := repository.NewClusterRepositoryFileBased(sqliteConnection, sugaredLogger)
	runtimeConfig, err := k8s.GetRuntimeConfig()
	if err != nil {
		return nil, err
	}
	k8sServiceImpl := k8s.NewK8sUtil(sugaredLogger, runtimeConfig)
	syncMap := informer.NewGlobalMapClusterNamespace()
	k8sInformerFactoryImpl := informer.NewK8sInformerFactoryImpl(sugaredLogger, syncMap, k8sServiceImpl)
	environmentVariables, err := util2.GetEnvironmentVariables()
	if err != nil {
		return nil, err
	}
	cronLoggerImpl := cron.NewCronLoggerImpl(sugaredLogger)
	noopUserService := noop.NewNoopUserService(sugaredLogger)
	clusterServiceImpl, err := cluster.NewClusterServiceImpl(clusterFileBasedRepository, sugaredLogger, k8sServiceImpl, k8sInformerFactoryImpl, environmentVariables, cronLoggerImpl, noopUserService)
	if err != nil {
		return nil, err
	}
	noopTransactionUtilImpl := sql.NewNoopTransactionUtilImpl()
	genericNoteFileBasedRepositoryImpl := repository2.NewGenericNoteFileBasedRepository(sqliteConnection, sugaredLogger, noopTransactionUtilImpl)
	genericNoteHistoryFileBasedRepositoryImpl := repository2.NewGenericNoteHistoryFileBasedRepositoryImpl(sqliteConnection, sugaredLogger, noopTransactionUtilImpl)
	genericNoteHistoryServiceImpl := genericNotes.NewGenericNoteHistoryServiceImpl(genericNoteHistoryFileBasedRepositoryImpl, sugaredLogger)
	genericNoteServiceImpl := genericNotes.NewGenericNoteServiceImpl(genericNoteFileBasedRepositoryImpl, genericNoteHistoryServiceImpl, noopUserService, sugaredLogger)
	clusterDescriptionFileBasedRepositoryImpl := repository.NewClusterDescriptionFileBasedRepository(sqliteConnection, sugaredLogger)
	clusterDescriptionServiceImpl := cluster.NewClusterDescriptionServiceImpl(clusterDescriptionFileBasedRepositoryImpl, noopUserService, sugaredLogger)
	validate, err := util.IntValidator()
	if err != nil {
		return nil, err
	}
	noopEnforcer := casbin.NewNoopEnforcer()
	deleteServiceImpl := delete2.NewNoopServiceImpl(sugaredLogger, clusterServiceImpl)
	helmUserServiceImpl, err := argo.NewHelmUserServiceImpl(sugaredLogger)
	if err != nil {
		return nil, err
	}
	environmentServiceImpl := cluster.NewNoopServiceImpl(sugaredLogger)
	clusterRbacNoopServiceImpl := cluster.NewClusterRbacNoopServiceImpl()
	clusterRestHandlerImpl := cluster2.NewClusterRestHandlerImpl(clusterServiceImpl, genericNoteServiceImpl, clusterDescriptionServiceImpl, sugaredLogger, noopUserService, validate, noopEnforcer, deleteServiceImpl, helmUserServiceImpl, environmentServiceImpl, clusterRbacNoopServiceImpl)
	clusterRouterImpl := cluster2.NewClusterRouterImpl(clusterRestHandlerImpl)
	config, err := dashboard.GetConfig()
	if err != nil {
		return nil, err
	}
	dashboardRouterImpl, err := dashboard.NewDashboardRouterImpl(sugaredLogger, config)
	if err != nil {
		return nil, err
	}
	pumpImpl := connector.NewPumpImpl(sugaredLogger)
	helmAppServiceImpl := service.NewNoopServiceImpl()
	acdAuthConfig, err := util3.GetACDAuthConfig()
	if err != nil {
		return nil, err
	}
	k8sResourceHistoryServiceImpl := kubernetesResourceAuditLogs.NewNoopServiceImpl(sugaredLogger)
	argoApplicationReadServiceImpl := read.NewNoopImpl()
	k8sCommonServiceImpl := k8s2.NewK8sCommonServiceImpl(sugaredLogger, k8sServiceImpl, clusterServiceImpl, argoApplicationReadServiceImpl)
	ephemeralContainerFileBasedRepositoryImpl := repository.NewEphemeralContainerFileBasedRepository(sqliteConnection, sugaredLogger, noopTransactionUtilImpl)
	ephemeralContainerServiceImpl := cluster.NewEphemeralContainerServiceImpl(ephemeralContainerFileBasedRepositoryImpl, sugaredLogger)
	terminalSessionHandlerImpl := terminal.NewTerminalSessionHandlerImpl(environmentServiceImpl, clusterServiceImpl, sugaredLogger, k8sServiceImpl, ephemeralContainerServiceImpl, argoApplicationReadServiceImpl)
	fluxApplicationServiceImpl := fluxApplication.NewNoopImpl()
	k8sApplicationServiceImpl, err := application.NewK8sApplicationServiceImpl(sugaredLogger, clusterServiceImpl, pumpImpl, helmAppServiceImpl, k8sServiceImpl, acdAuthConfig, k8sResourceHistoryServiceImpl, k8sCommonServiceImpl, terminalSessionHandlerImpl, ephemeralContainerServiceImpl, ephemeralContainerFileBasedRepositoryImpl, fluxApplicationServiceImpl)
	if err != nil {
		return nil, err
	}
	enforcerUtilHelmImpl := rbac.NewNoopEnforcerUtilHelm(sugaredLogger)
	enforcerUtilImpl := rbac.NewNoopEnforcerUtil(sugaredLogger)
	k8sApplicationRestHandlerImpl := application2.NewK8sApplicationRestHandlerImpl(sugaredLogger, k8sApplicationServiceImpl, pumpImpl, terminalSessionHandlerImpl, noopEnforcer, enforcerUtilHelmImpl, enforcerUtilImpl, helmAppServiceImpl, noopUserService, k8sCommonServiceImpl, validate, environmentVariables, fluxApplicationServiceImpl, argoApplicationReadServiceImpl)
	k8sApplicationRouterImpl := application2.NewK8sApplicationRouterImpl(k8sApplicationRestHandlerImpl)
	k8sCapacityServiceImpl := capacity.NewK8sCapacityServiceImpl(sugaredLogger, k8sApplicationServiceImpl, k8sServiceImpl, k8sCommonServiceImpl)
	k8sCapacityRestHandlerImpl := capacity2.NewK8sCapacityRestHandlerImpl(sugaredLogger, k8sCapacityServiceImpl, noopUserService, noopEnforcer, clusterServiceImpl, environmentServiceImpl, clusterRbacNoopServiceImpl)
	k8sCapacityRouterImpl := capacity2.NewK8sCapacityRouterImpl(k8sCapacityRestHandlerImpl)
	terminalAccessFileBasedRepository := terminal2.NewTerminalAccessFileBasedRepository(sqliteConnection, sugaredLogger)
	userTerminalSessionConfig, err := clusterTerminalAccess.GetTerminalAccessConfig()
	if err != nil {
		return nil, err
	}
	userTerminalAccessServiceImpl, err := clusterTerminalAccess.NewUserTerminalAccessServiceImpl(sugaredLogger, terminalAccessFileBasedRepository, userTerminalSessionConfig, k8sCommonServiceImpl, terminalSessionHandlerImpl, k8sCapacityServiceImpl, k8sServiceImpl, cronLoggerImpl)
	if err != nil {
		return nil, err
	}
	userTerminalAccessRestHandlerImpl := terminal3.NewUserTerminalAccessRestHandlerImpl(sugaredLogger, userTerminalAccessServiceImpl, noopEnforcer, noopUserService, validate)
	userTerminalAccessRouterImpl := terminal3.NewUserTerminalAccessRouterImpl(userTerminalAccessRestHandlerImpl)
	kubeConfigFileSyncerImpl, err := cluster.NewKubeConfigFileSyncerImpl(sugaredLogger, clusterServiceImpl)
	if err != nil {
		return nil, err
	}
	client := util.NewHttpClient()
	posthogClient, err := telemetry.NewPosthogClient(sugaredLogger)
	if err != nil {
		return nil, err
	}
	providerIdentifierServiceImpl := providerIdentifier.NewProviderIdentifierServiceImpl(sugaredLogger)
	telemetryEventClientImpl, err := telemetry.NewK8sAppTelemetryEventClientImpl(sugaredLogger, client, clusterServiceImpl, posthogClient, providerIdentifierServiceImpl, cronLoggerImpl)
	if err != nil {
		return nil, err
	}
	muxRouter := NewMuxRouter(sugaredLogger, clusterRouterImpl, dashboardRouterImpl, k8sApplicationRouterImpl, k8sCapacityRouterImpl, userTerminalAccessRouterImpl, kubeConfigFileSyncerImpl, telemetryEventClientImpl)
	app := NewApp(muxRouter, sugaredLogger)
	return app, nil
}
