// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devtron-labs/authenticator/client"
	cluster2 "github.com/devtron-labs/devtron/api/cluster"
	"github.com/devtron-labs/devtron/api/connector"
	client2 "github.com/devtron-labs/devtron/api/helm-app"
	terminal3 "github.com/devtron-labs/devtron/api/terminal"
	"github.com/devtron-labs/devtron/client/dashboard"
	"github.com/devtron-labs/devtron/client/k8s/application"
	"github.com/devtron-labs/devtron/client/k8s/informer"
	"github.com/devtron-labs/devtron/client/telemetry"
	terminal2 "github.com/devtron-labs/devtron/internal/sql/repository/terminal"
	"github.com/devtron-labs/devtron/internal/util"
	"github.com/devtron-labs/devtron/pkg/cluster"
	"github.com/devtron-labs/devtron/pkg/cluster/repository"
	"github.com/devtron-labs/devtron/pkg/clusterTerminalAccess"
	delete2 "github.com/devtron-labs/devtron/pkg/delete"
	"github.com/devtron-labs/devtron/pkg/kubernetesResourceAuditLogs"
	"github.com/devtron-labs/devtron/pkg/sql"
	"github.com/devtron-labs/devtron/pkg/terminal"
	"github.com/devtron-labs/devtron/pkg/user/casbin"
	"github.com/devtron-labs/devtron/pkg/user/noop"
	util2 "github.com/devtron-labs/devtron/pkg/util"
	"github.com/devtron-labs/devtron/util/argo"
	"github.com/devtron-labs/devtron/util/k8s"
	"github.com/devtron-labs/devtron/util/rbac"
)

import (
	_ "embed"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	sugaredLogger, err := util.NewFileBaseSugaredLogger()
	if err != nil {
		return nil, err
	}
	db, err := sql.NewNoopConnection(sugaredLogger)
	if err != nil {
		return nil, err
	}
	clusterFileBasedRepository := repository.NewClusterRepositoryFileBased(sugaredLogger)
	runtimeConfig, err := client.GetRuntimeConfig()
	if err != nil {
		return nil, err
	}
	k8sUtil := util.NewK8sUtil(sugaredLogger, runtimeConfig)
	v := informer.NewGlobalMapClusterNamespace()
	k8sInformerFactoryImpl := informer.NewK8sInformerFactoryImpl(sugaredLogger, v, runtimeConfig)
	noopUserService := noop.NewNoopUserService(sugaredLogger)
	clusterServiceImpl := cluster.NewClusterServiceImpl(clusterFileBasedRepository, sugaredLogger, k8sUtil, k8sInformerFactoryImpl, noopUserService)
	validate, err := util.IntValidator()
	if err != nil {
		return nil, err
	}
	noopEnforcer := casbin.NewNoopEnforcer()
	deleteServiceImpl := delete2.NewNoopServiceImpl(sugaredLogger, clusterServiceImpl)
	helmUserServiceImpl, err := argo.NewHelmUserServiceImpl(sugaredLogger)
	if err != nil {
		return nil, err
	}
	clusterRestHandlerImpl := cluster2.NewClusterRestHandlerImpl(clusterServiceImpl, sugaredLogger, noopUserService, validate, noopEnforcer, deleteServiceImpl, helmUserServiceImpl)
	clusterRouterImpl := cluster2.NewClusterRouterImpl(clusterRestHandlerImpl)
	config, err := dashboard.GetConfig()
	if err != nil {
		return nil, err
	}
	dashboardRouterImpl := dashboard.NewDashboardRouterImpl(sugaredLogger, config)
	pumpImpl := connector.NewPumpImpl(sugaredLogger)
	k8sClientServiceImpl := application.NewK8sClientServiceImpl(sugaredLogger, clusterFileBasedRepository)
	helmAppServiceImpl := client2.NewNoopServiceImpl(sugaredLogger)
	acdAuthConfig, err := util2.GetACDAuthConfig()
	if err != nil {
		return nil, err
	}
	k8sResourceHistoryServiceImpl := kubernetesResourceAuditLogs.NewNoopServiceImpl(sugaredLogger)
	k8sApplicationServiceImpl := k8s.NewK8sApplicationServiceImpl(sugaredLogger, clusterServiceImpl, pumpImpl, k8sClientServiceImpl, helmAppServiceImpl, k8sUtil, acdAuthConfig, k8sResourceHistoryServiceImpl, noopUserService)
	environmentServiceImpl := cluster.NewNoopServiceImpl(sugaredLogger)
	terminalSessionHandlerImpl := terminal.NewTerminalSessionHandlerImpl(environmentServiceImpl, clusterServiceImpl, sugaredLogger)
	enforcerUtilHelmImpl := rbac.NewNoopEnforcerUtilHelm(sugaredLogger)
	enforcerUtilImpl := rbac.NewNoopEnforcerUtil(sugaredLogger)
	k8sApplicationRestHandlerImpl := k8s.NewK8sApplicationRestHandlerImpl(sugaredLogger, k8sApplicationServiceImpl, pumpImpl, terminalSessionHandlerImpl, noopEnforcer, enforcerUtilHelmImpl, enforcerUtilImpl, helmAppServiceImpl, noopUserService)
	k8sApplicationRouterImpl := k8s.NewK8sApplicationRouterImpl(k8sApplicationRestHandlerImpl)
	clusterCronServiceImpl, err := k8s.NewClusterCronServiceImpl(sugaredLogger, clusterServiceImpl, k8sApplicationServiceImpl, clusterFileBasedRepository)
	if err != nil {
		return nil, err
	}
	k8sCapacityServiceImpl := k8s.NewK8sCapacityServiceImpl(sugaredLogger, clusterServiceImpl, k8sApplicationServiceImpl, k8sClientServiceImpl, clusterCronServiceImpl)
	k8sCapacityRestHandlerImpl := k8s.NewK8sCapacityRestHandlerImpl(sugaredLogger, k8sCapacityServiceImpl, noopUserService, noopEnforcer, clusterServiceImpl, environmentServiceImpl)
	k8sCapacityRouterImpl := k8s.NewK8sCapacityRouterImpl(k8sCapacityRestHandlerImpl)
	terminalAccessFileBasedRepository := terminal2.NewTerminalAccessFileBasedRepository(sugaredLogger)
	userTerminalSessionConfig, err := clusterTerminalAccess.GetTerminalAccessConfig()
	if err != nil {
		return nil, err
	}
	userTerminalAccessServiceImpl, err := clusterTerminalAccess.NewUserTerminalAccessServiceImpl(sugaredLogger, terminalAccessFileBasedRepository, userTerminalSessionConfig, k8sApplicationServiceImpl, k8sClientServiceImpl, terminalSessionHandlerImpl)
	if err != nil {
		return nil, err
	}
	userTerminalAccessRestHandlerImpl := terminal3.NewUserTerminalAccessRestHandlerImpl(sugaredLogger, userTerminalAccessServiceImpl, noopEnforcer, noopUserService, validate)
	userTerminalAccessRouterImpl := terminal3.NewUserTerminalAccessRouterImpl(userTerminalAccessRestHandlerImpl)
	kubeConfigFileSyncerImpl, err := cluster.NewKubeConfigFileSyncerImpl(sugaredLogger, clusterServiceImpl)
	if err != nil {
		return nil, err
	}
	httpClient := util.NewHttpClient()
	posthogClient, err := telemetry.NewPosthogClient(sugaredLogger)
	if err != nil {
		return nil, err
	}
	telemetryEventClientImpl, err := telemetry.NewK8sAppTelemetryEventClientImpl(sugaredLogger, httpClient, clusterServiceImpl, posthogClient)
	if err != nil {
		return nil, err
	}
	muxRouter := NewMuxRouter(sugaredLogger, clusterRouterImpl, dashboardRouterImpl, k8sApplicationRouterImpl, k8sCapacityRouterImpl, userTerminalAccessRouterImpl, kubeConfigFileSyncerImpl, telemetryEventClientImpl)
	app := NewApp(db, muxRouter, sugaredLogger)
	return app, nil
}
