/*
Copyright 2021 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.argoproj.argo_events.pkg.apis.common;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "common";

// Amount represent a numeric amount.
message Amount {
  optional bytes value = 1;
}

// Backoff for an operation
message Backoff {
  // The initial duration in nanoseconds or strings like "1s", "3m"
  // +optional
  optional Int64OrString duration = 1;

  // Duration is multiplied by factor each iteration
  // +optional
  optional Amount factor = 2;

  // The amount of jitter applied each iteration
  // +optional
  optional Amount jitter = 3;

  // Exit with error after this many steps
  // +optional
  optional int32 steps = 4;
}

// BasicAuth contains the reference to K8s secrets that holds the username and password
message BasicAuth {
  // Username refers to the Kubernetes secret that holds the username required for basic auth.
  optional k8s.io.api.core.v1.SecretKeySelector username = 1;

  // Password refers to the Kubernetes secret that holds the password required for basic auth.
  optional k8s.io.api.core.v1.SecretKeySelector password = 2;
}

// Condition contains details about resource state
message Condition {
  // Condition type.
  // +required
  optional string type = 1;

  // Condition status, True, False or Unknown.
  // +required
  optional string status = 2;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // Unique, this should be a short, machine understandable string that gives the reason
  // for condition's last transition. For example, "ImageNotFound"
  // +optional
  optional string reason = 4;

  // Human-readable message indicating details about last transition.
  // +optional
  optional string message = 5;
}

message Int64OrString {
  optional int64 type = 1;

  optional int64 int64Val = 2;

  optional string strVal = 3;
}

// Metadata holds the annotations and labels of an event source pod
message Metadata {
  map<string, string> annotations = 1;

  map<string, string> labels = 2;
}

// Resource represent arbitrary structured data.
message Resource {
  optional bytes value = 1;
}

// S3Artifact contains information about an S3 connection and bucket
message S3Artifact {
  optional string endpoint = 1;

  optional S3Bucket bucket = 2;

  optional string region = 3;

  optional bool insecure = 4;

  optional k8s.io.api.core.v1.SecretKeySelector accessKey = 5;

  optional k8s.io.api.core.v1.SecretKeySelector secretKey = 6;

  repeated string events = 7;

  optional S3Filter filter = 8;

  map<string, string> metadata = 9;
}

// S3Bucket contains information to describe an S3 Bucket
message S3Bucket {
  optional string key = 1;

  optional string name = 2;
}

// S3Filter represents filters to apply to bucket notifications for specifying constraints on objects
message S3Filter {
  optional string prefix = 1;

  optional string suffix = 2;
}

// SASLConfig refers to SASL configuration for a client
message SASLConfig {
  // SASLMechanism is the name of the enabled SASL mechanism.
  // Possible values: OAUTHBEARER, PLAIN (defaults to PLAIN).
  // +optional
  optional string mechanism = 1;

  // User is the authentication identity (authcid) to present for
  // SASL/PLAIN or SASL/SCRAM authentication
  optional k8s.io.api.core.v1.SecretKeySelector user = 2;

  // Password for SASL/PLAIN authentication
  optional k8s.io.api.core.v1.SecretKeySelector password = 3;
}

// SecureHeader refers to HTTP Headers with auth tokens as values
message SecureHeader {
  optional string name = 1;

  // Values can be read from either secrets or configmaps
  optional ValueFromSource valueFrom = 2;
}

// Status is a common structure which can be used for Status field.
message Status {
  // Conditions are the latest available observations of a resource's current state.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated Condition conditions = 1;
}

// TLSConfig refers to TLS configuration for a client.
message TLSConfig {
  // CACertSecret refers to the secret that contains the CA cert
  optional k8s.io.api.core.v1.SecretKeySelector caCertSecret = 1;

  // ClientCertSecret refers to the secret that contains the client cert
  optional k8s.io.api.core.v1.SecretKeySelector clientCertSecret = 2;

  // ClientKeySecret refers to the secret that contains the client key
  optional k8s.io.api.core.v1.SecretKeySelector clientKeySecret = 3;

  // If true, skips creation of TLSConfig with certs and creates an empty TLSConfig. (Defaults to false)
  // +optional
  optional bool insecureSkipVerify = 4;
}

// ValueFromSource allows you to reference keys from either a Configmap or Secret
message ValueFromSource {
  optional k8s.io.api.core.v1.SecretKeySelector secretKeyRef = 1;

  optional k8s.io.api.core.v1.ConfigMapKeySelector configMapKeyRef = 2;
}

