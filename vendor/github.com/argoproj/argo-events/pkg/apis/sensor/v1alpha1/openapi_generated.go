//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.AWSLambdaTrigger":           schema_pkg_apis_sensor_v1alpha1_AWSLambdaTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ArgoWorkflowTrigger":        schema_pkg_apis_sensor_v1alpha1_ArgoWorkflowTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ArtifactLocation":           schema_pkg_apis_sensor_v1alpha1_ArtifactLocation(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.AzureEventHubsTrigger":      schema_pkg_apis_sensor_v1alpha1_AzureEventHubsTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ConditionsResetByTime":      schema_pkg_apis_sensor_v1alpha1_ConditionsResetByTime(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ConditionsResetCriteria":    schema_pkg_apis_sensor_v1alpha1_ConditionsResetCriteria(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.CustomTrigger":              schema_pkg_apis_sensor_v1alpha1_CustomTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.DataFilter":                 schema_pkg_apis_sensor_v1alpha1_DataFilter(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Event":                      schema_pkg_apis_sensor_v1alpha1_Event(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventContext":               schema_pkg_apis_sensor_v1alpha1_EventContext(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependency":            schema_pkg_apis_sensor_v1alpha1_EventDependency(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependencyFilter":      schema_pkg_apis_sensor_v1alpha1_EventDependencyFilter(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependencyTransformer": schema_pkg_apis_sensor_v1alpha1_EventDependencyTransformer(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ExprFilter":                 schema_pkg_apis_sensor_v1alpha1_ExprFilter(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.FileArtifact":               schema_pkg_apis_sensor_v1alpha1_FileArtifact(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitArtifact":                schema_pkg_apis_sensor_v1alpha1_GitArtifact(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitCreds":                   schema_pkg_apis_sensor_v1alpha1_GitCreds(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitRemoteConfig":            schema_pkg_apis_sensor_v1alpha1_GitRemoteConfig(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.HTTPTrigger":                schema_pkg_apis_sensor_v1alpha1_HTTPTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.K8SResourcePolicy":          schema_pkg_apis_sensor_v1alpha1_K8SResourcePolicy(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.KafkaTrigger":               schema_pkg_apis_sensor_v1alpha1_KafkaTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.LogTrigger":                 schema_pkg_apis_sensor_v1alpha1_LogTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.NATSTrigger":                schema_pkg_apis_sensor_v1alpha1_NATSTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.OpenWhiskTrigger":           schema_pkg_apis_sensor_v1alpha1_OpenWhiskTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.PayloadField":               schema_pkg_apis_sensor_v1alpha1_PayloadField(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.PulsarTrigger":              schema_pkg_apis_sensor_v1alpha1_PulsarTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.RateLimit":                  schema_pkg_apis_sensor_v1alpha1_RateLimit(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Sensor":                     schema_pkg_apis_sensor_v1alpha1_Sensor(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SensorList":                 schema_pkg_apis_sensor_v1alpha1_SensorList(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SensorSpec":                 schema_pkg_apis_sensor_v1alpha1_SensorSpec(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SensorStatus":               schema_pkg_apis_sensor_v1alpha1_SensorStatus(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SlackTrigger":               schema_pkg_apis_sensor_v1alpha1_SlackTrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.StandardK8STrigger":         schema_pkg_apis_sensor_v1alpha1_StandardK8STrigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.StatusPolicy":               schema_pkg_apis_sensor_v1alpha1_StatusPolicy(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Template":                   schema_pkg_apis_sensor_v1alpha1_Template(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TimeFilter":                 schema_pkg_apis_sensor_v1alpha1_TimeFilter(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Trigger":                    schema_pkg_apis_sensor_v1alpha1_Trigger(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter":           schema_pkg_apis_sensor_v1alpha1_TriggerParameter(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameterSource":     schema_pkg_apis_sensor_v1alpha1_TriggerParameterSource(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerPolicy":              schema_pkg_apis_sensor_v1alpha1_TriggerPolicy(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerTemplate":            schema_pkg_apis_sensor_v1alpha1_TriggerTemplate(ref),
		"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.URLArtifact":                schema_pkg_apis_sensor_v1alpha1_URLArtifact(ref),
	}
}

func schema_pkg_apis_sensor_v1alpha1_AWSLambdaTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"functionName": {
						SchemaProps: spec.SchemaProps{
							Description: "FunctionName refers to the name of the function to invoke.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessKey refers K8s secret containing aws access key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"secretKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretKey refers K8s secret containing aws secret key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is AWS region",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Description: "Payload is the list of key-value extracted from an event payload to construct the request payload.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"invocationType": {
						SchemaProps: spec.SchemaProps{
							Description: "Choose from the following options.\n\n   * RequestResponse (default) - Invoke the function synchronously. Keep\n   the connection open until the function returns a response or times out.\n   The API response includes the function response and additional data.\n\n   * Event - Invoke the function asynchronously. Send events that fail multiple\n   times to the function's dead-letter queue (if it's configured). The API\n   response only includes a status code.\n\n   * DryRun - Validate parameter values and verify that the user or role\n   has permission to invoke the function.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"roleARN": {
						SchemaProps: spec.SchemaProps{
							Description: "RoleARN is the Amazon Resource Name (ARN) of the role to assume.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"functionName", "region", "payload"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_ArgoWorkflowTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ArgoWorkflowTrigger is the trigger for the Argo Workflow",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "Source of the K8s resource file(s)",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ArtifactLocation"),
						},
					},
					"operation": {
						SchemaProps: spec.SchemaProps{
							Description: "Operation refers to the type of operation performed on the argo workflow resource. Default value is Submit.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of parameters to pass to resolved Argo Workflow object",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Args is the list of arguments to pass to the argo CLI",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ArtifactLocation", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_ArtifactLocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ArtifactLocation describes the source location for an external artifact",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"s3": {
						SchemaProps: spec.SchemaProps{
							Description: "S3 compliant artifact",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.S3Artifact"),
						},
					},
					"inline": {
						SchemaProps: spec.SchemaProps{
							Description: "Inline artifact is embedded in sensor spec as a string",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"file": {
						SchemaProps: spec.SchemaProps{
							Description: "File artifact is artifact stored in a file",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.FileArtifact"),
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to fetch the artifact from",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.URLArtifact"),
						},
					},
					"configmap": {
						SchemaProps: spec.SchemaProps{
							Description: "Configmap that stores the artifact",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
						},
					},
					"git": {
						SchemaProps: spec.SchemaProps{
							Description: "Git repository hosting the artifact",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitArtifact"),
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource is generic template for K8s resource",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.Resource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.Resource", "github.com/argoproj/argo-events/pkg/apis/common.S3Artifact", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.FileArtifact", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitArtifact", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.URLArtifact", "k8s.io/api/core/v1.ConfigMapKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_AzureEventHubsTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureEventHubsTrigger refers to specification of the Azure Event Hubs Trigger",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"fqdn": {
						SchemaProps: spec.SchemaProps{
							Description: "FQDN refers to the namespace dns of Azure Event Hubs to be used i.e. <namespace>.servicebus.windows.net",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hubName": {
						SchemaProps: spec.SchemaProps{
							Description: "HubName refers to the Azure Event Hub to send events to",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sharedAccessKeyName": {
						SchemaProps: spec.SchemaProps{
							Description: "SharedAccessKeyName refers to the name of the Shared Access Key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"sharedAccessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SharedAccessKey refers to a K8s secret containing the primary key for the",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Description: "Payload is the list of key-value extracted from an event payload to construct the request payload.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
				},
				Required: []string{"fqdn", "hubName", "sharedAccessKeyName", "payload"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_ConditionsResetByTime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"cron": {
						SchemaProps: spec.SchemaProps{
							Description: "Cron is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timezone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_ConditionsResetCriteria(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"byTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ConditionsResetByTime"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ConditionsResetByTime"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_CustomTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CustomTrigger refers to the specification of the custom trigger.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serverURL": {
						SchemaProps: spec.SchemaProps{
							Description: "ServerURL is the url of the gRPC server that executes custom trigger",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secure": {
						SchemaProps: spec.SchemaProps{
							Description: "Secure refers to type of the connection between sensor to custom trigger gRPC",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"certSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "CertSecret refers to the secret that contains cert for secure connection between sensor and custom trigger gRPC server.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"serverNameOverride": {
						SchemaProps: spec.SchemaProps{
							Description: "ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec is the custom trigger resource specification that custom trigger gRPC server knows how to interpret.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of parameters that is applied to resolved custom trigger trigger object.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Description: "Payload is the list of key-value extracted from an event payload to construct the request payload.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
				},
				Required: []string{"serverURL", "secure", "spec", "payload"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_DataFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataFilter describes constraints and filters for event data Regular Expressions are purposefully not a feature as they are overkill for our uses here See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type contains the JSON type of the data",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Value is the allowed string values for this key Booleans are passed using strconv.ParseBool() Numbers are parsed using as float64 using strconv.ParseFloat() Strings are taken as is Nils this value is ignored",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"comparator": {
						SchemaProps: spec.SchemaProps{
							Description: "Comparator compares the event data with a user given value. Can be \">=\", \">\", \"=\", \"!=\", \"<\", or \"<=\". Is optional, and if left blank treated as equality \"=\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "Template is a go-template for extracting a string from the event's data. A Template is evaluated with provided path, type and value. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"path", "type", "value"},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_Event(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Event represents the cloudevent received from an event source.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"context": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventContext"),
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
				},
				Required: []string{"data"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventContext"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_EventContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventContext holds the context of the cloudevent received from an event source.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID of the event; must be non-empty and unique within the scope of the producer.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "Source - A URI describing the event producer.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"specversion": {
						SchemaProps: spec.SchemaProps{
							Description: "SpecVersion - The version of the CloudEvents specification used by the event.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type - The type of the occurrence which has happened.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"datacontenttype": {
						SchemaProps: spec.SchemaProps{
							Description: "DataContentType - A MIME (RFC2046) string describing the media type of `data`.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subject": {
						SchemaProps: spec.SchemaProps{
							Description: "Subject - The subject of the event in the context of the event producer",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"time": {
						SchemaProps: spec.SchemaProps{
							Description: "Time - A Timestamp when the event happened.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"id", "source", "specversion", "type", "datacontenttype", "subject", "time"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_EventDependency(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventDependency describes a dependency",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is a unique name of this dependency",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"eventSourceName": {
						SchemaProps: spec.SchemaProps{
							Description: "EventSourceName is the name of EventSource that Sensor depends on",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"eventName": {
						SchemaProps: spec.SchemaProps{
							Description: "EventName is the name of the event",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"filters": {
						SchemaProps: spec.SchemaProps{
							Description: "Filters and rules governing toleration of success and constraints on the context and data of an event",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependencyFilter"),
						},
					},
					"transform": {
						SchemaProps: spec.SchemaProps{
							Description: "Transform transforms the event data",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependencyTransformer"),
						},
					},
					"filtersLogicalOperator": {
						SchemaProps: spec.SchemaProps{
							Description: "FiltersLogicalOperator defines how different filters are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "eventSourceName", "eventName"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependencyFilter", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependencyTransformer"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_EventDependencyFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventDependencyFilter defines filters and constraints for a event.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"time": {
						SchemaProps: spec.SchemaProps{
							Description: "Time filter on the event with escalation",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TimeFilter"),
						},
					},
					"context": {
						SchemaProps: spec.SchemaProps{
							Description: "Context filter constraints",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventContext"),
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Data filter constraints with escalation",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.DataFilter"),
									},
								},
							},
						},
					},
					"exprs": {
						SchemaProps: spec.SchemaProps{
							Description: "Exprs contains the list of expressions evaluated against the event payload.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ExprFilter"),
									},
								},
							},
						},
					},
					"dataLogicalOperator": {
						SchemaProps: spec.SchemaProps{
							Description: "DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"exprLogicalOperator": {
						SchemaProps: spec.SchemaProps{
							Description: "ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"script": {
						SchemaProps: spec.SchemaProps{
							Description: "Script refers to a Lua script evaluated to determine the validity of an event.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.DataFilter", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventContext", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ExprFilter", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TimeFilter"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_EventDependencyTransformer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventDependencyTransformer transforms the event",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"jq": {
						SchemaProps: spec.SchemaProps{
							Description: "JQ holds the jq command applied for transformation",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"script": {
						SchemaProps: spec.SchemaProps{
							Description: "Script refers to a Lua script used to transform the event",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_ExprFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"expr": {
						SchemaProps: spec.SchemaProps{
							Description: "Expr refers to the expression that determines the outcome of the filter.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fields": {
						SchemaProps: spec.SchemaProps{
							Description: "Fields refers to set of keys that refer to the paths within event payload.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.PayloadField"),
									},
								},
							},
						},
					},
				},
				Required: []string{"expr", "fields"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.PayloadField"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_FileArtifact(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FileArtifact contains information about an artifact in a filesystem",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_GitArtifact(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitArtifact contains information about an artifact stored in git",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "Git URL",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cloneDirectory": {
						SchemaProps: spec.SchemaProps{
							Description: "Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creds": {
						SchemaProps: spec.SchemaProps{
							Description: "Creds contain reference to git username and password",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitCreds"),
						},
					},
					"sshKeySecret": {
						SchemaProps: spec.SchemaProps{
							Description: "SSHKeySecret refers to the secret that contains SSH key",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"filePath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to file that contains trigger resource definition",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"branch": {
						SchemaProps: spec.SchemaProps{
							Description: "Branch to use to pull trigger resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag to use to pull trigger resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ref": {
						SchemaProps: spec.SchemaProps{
							Description: "Ref to use to pull trigger resource. Will result in a shallow clone and fetch.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remote": {
						SchemaProps: spec.SchemaProps{
							Description: "Remote to manage set of tracked repositories. Defaults to \"origin\". Refer https://git-scm.com/docs/git-remote",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitRemoteConfig"),
						},
					},
					"insecureIgnoreHostKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to ignore host key",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"url", "cloneDirectory", "filePath"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitCreds", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.GitRemoteConfig", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_GitCreds(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitCreds contain reference to git username and password",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_GitRemoteConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitRemoteConfig contains the configuration of a Git remote",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the remote to fetch from.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urls": {
						SchemaProps: spec.SchemaProps{
							Description: "URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "urls"},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_HTTPTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HTTPTrigger is the trigger for the HTTP request",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL refers to the URL to send HTTP request to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"tls": {
						SchemaProps: spec.SchemaProps{
							Description: "TLS configuration for the HTTP client.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.TLSConfig"),
						},
					},
					"method": {
						SchemaProps: spec.SchemaProps{
							Description: "Method refers to the type of the HTTP request. Refer https://golang.org/src/net/http/method.go for more info. Default value is POST.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of key-value extracted from event's payload that are applied to the HTTP trigger resource.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout refers to the HTTP request timeout in seconds. Default value is 60 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"basicAuth": {
						SchemaProps: spec.SchemaProps{
							Description: "BasicAuth configuration for the http request.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.BasicAuth"),
						},
					},
					"headers": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers for the HTTP request.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"secureHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Secure Headers stored in Kubernetes Secrets for the HTTP requests.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/argoproj/argo-events/pkg/apis/common.SecureHeader"),
									},
								},
							},
						},
					},
				},
				Required: []string{"url", "payload"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.BasicAuth", "github.com/argoproj/argo-events/pkg/apis/common.SecureHeader", "github.com/argoproj/argo-events/pkg/apis/common.TLSConfig", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_K8SResourcePolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using labels",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels required to identify whether a resource is in success state",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"backoff": {
						SchemaProps: spec.SchemaProps{
							Description: "Backoff before checking resource state",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.Backoff"),
						},
					},
					"errorOnBackoffTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine the state of the resource",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"backoff", "errorOnBackoffTimeout"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.Backoff"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_KafkaTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KafkaTrigger refers to the specification of the Kafka trigger.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the Kafka broker, multiple URLs separated by comma.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the topic. More info at https://kafka.apache.org/documentation/#intro_topics",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partition": {
						SchemaProps: spec.SchemaProps{
							Description: "Partition to write data to.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of parameters that is applied to resolved Kafka trigger object.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"requiredAcks": {
						SchemaProps: spec.SchemaProps{
							Description: "RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"compress": {
						SchemaProps: spec.SchemaProps{
							Description: "Compress determines whether to compress message or not. Defaults to false. If set to true, compresses message using snappy compression.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"flushFrequency": {
						SchemaProps: spec.SchemaProps{
							Description: "FlushFrequency refers to the frequency in milliseconds to flush batches. Defaults to 500 milliseconds.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"tls": {
						SchemaProps: spec.SchemaProps{
							Description: "TLS configuration for the Kafka producer.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.TLSConfig"),
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Description: "Payload is the list of key-value extracted from an event payload to construct the request payload.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"partitioningKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The partitioning key for the messages put on the Kafka topic. Defaults to broker url.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sasl": {
						SchemaProps: spec.SchemaProps{
							Description: "SASL configuration for the kafka client",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.SASLConfig"),
						},
					},
				},
				Required: []string{"url", "topic", "partition", "payload"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.SASLConfig", "github.com/argoproj/argo-events/pkg/apis/common.TLSConfig", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_LogTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"intervalSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Only print messages every interval. Useful to prevent logging too much data for busy events.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_NATSTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NATSTrigger refers to the specification of the NATS trigger.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the NATS cluster.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subject": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the subject to put message on.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"tls": {
						SchemaProps: spec.SchemaProps{
							Description: "TLS configuration for the NATS producer.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.TLSConfig"),
						},
					},
				},
				Required: []string{"url", "subject", "payload"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.TLSConfig", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_OpenWhiskTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host URL of the OpenWhisk.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version for the API. Defaults to v1.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace for the action. Defaults to \"_\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authToken": {
						SchemaProps: spec.SchemaProps{
							Description: "AuthToken for authentication.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"actionName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the action/function.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Description: "Payload is the list of key-value extracted from an event payload to construct the request payload.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
				},
				Required: []string{"host", "actionName", "payload"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_PayloadField(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PayloadField binds a value at path within the event payload against a name.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name acts as key that holds the value at the path.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"path", "name"},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_PulsarTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PulsarTrigger refers to the specification of the Pulsar trigger.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the service URL for the Pulsar service.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the topic. See https://pulsar.apache.org/docs/en/concepts-messaging/",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of parameters that is applied to resolved Kafka trigger object.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"payload": {
						SchemaProps: spec.SchemaProps{
							Description: "Payload is the list of key-value extracted from an event payload to construct the request payload.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"tlsTrustCertsSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "Trusted TLS certificate secret.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"tlsAllowInsecureConnection": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the Pulsar client accept untrusted TLS certificate from broker.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tlsValidateHostname": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the Pulsar client verify the validity of the host name from broker.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tls": {
						SchemaProps: spec.SchemaProps{
							Description: "TLS configuration for the pulsar client.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.TLSConfig"),
						},
					},
					"authTokenSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "Authentication token for the pulsar client.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"connectionBackoff": {
						SchemaProps: spec.SchemaProps{
							Description: "Backoff holds parameters applied to connection.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.Backoff"),
						},
					},
				},
				Required: []string{"url", "topic", "payload"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.Backoff", "github.com/argoproj/argo-events/pkg/apis/common.TLSConfig", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_RateLimit(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"unit": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to Second",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestsPerUnit": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_Sensor(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Sensor is the definition of a sensor resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SensorSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SensorStatus"),
						},
					},
				},
				Required: []string{"metadata", "spec"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SensorSpec", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SensorStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_SensorList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SensorList is the list of Sensor resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Sensor"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Sensor", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_SensorSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SensorSpec represents desired sensor state",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dependencies": {
						SchemaProps: spec.SchemaProps{
							Description: "Dependencies is a list of the events that this sensor is dependent on.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependency"),
									},
								},
							},
						},
					},
					"triggers": {
						SchemaProps: spec.SchemaProps{
							Description: "Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Trigger"),
									},
								},
							},
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "Template is the pod specification for the sensor",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Template"),
						},
					},
					"errorOnFailedRound": {
						SchemaProps: spec.SchemaProps{
							Description: "ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"eventBusName": {
						SchemaProps: spec.SchemaProps{
							Description: "EventBusName references to a EventBus name. By default the value is \"default\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the sensor deployment replicas",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"dependencies", "triggers"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.EventDependency", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Template", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.Trigger"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_SensorStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SensorStatus contains information about the status of a sensor.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions are the latest available observations of a resource's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/common.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.Condition"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_SlackTrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SlackTrigger refers to the specification of the slack notification trigger.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"slackToken": {
						SchemaProps: spec.SchemaProps{
							Description: "SlackToken refers to the Kubernetes secret that holds the slack token required to send messages.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
					"channel": {
						SchemaProps: spec.SchemaProps{
							Description: "Channel refers to which Slack channel to send slack message.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message refers to the message to send to the Slack channel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_StandardK8STrigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StandardK8STrigger is the standard Kubernetes resource trigger",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "Source of the K8s resource file(s)",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ArtifactLocation"),
						},
					},
					"operation": {
						SchemaProps: spec.SchemaProps{
							Description: "Operation refers to the type of operation performed on the k8s resource. Default value is Create.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of parameters that is applied to resolved K8s trigger object.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"patchStrategy": {
						SchemaProps: spec.SchemaProps{
							Description: "PatchStrategy controls the K8s object patching strategy when the trigger operation is specified as patch. possible values: \"application/json-patch+json\" \"application/merge-patch+json\" \"application/strategic-merge-patch+json\" \"application/apply-patch+yaml\". Defaults to \"application/merge-patch+json\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"liveObject": {
						SchemaProps: spec.SchemaProps{
							Description: "LiveObject specifies whether the resource should be directly fetched from K8s instead of being marshaled from the resource artifact. If set to true, the resource artifact must contain the information required to uniquely identify the resource in the cluster, that is, you must specify \"apiVersion\", \"kind\" as well as \"name\" and \"namespace\" meta data. Only valid for operation type `update`",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ArtifactLocation", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_StatusPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StatusPolicy refers to the policy used to check the state of the trigger using response status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"allow": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int32",
									},
								},
							},
						},
					},
				},
				Required: []string{"allow"},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_Template(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Template holds the information of a sensor deployment template",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata sets the pods's metadata, i.e. annotations and labels",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.Metadata"),
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccountName is the name of the ServiceAccount to use to run sensor pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"container": {
						SchemaProps: spec.SchemaProps{
							Description: "Container is the main container image to run in the sensor pod",
							Ref:         ref("k8s.io/api/core/v1.Container"),
						},
					},
					"volumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Volumes is a list of volumes that can be mounted by containers in a workflow.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"imagePullSecrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, indicates the EventSource pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.Metadata", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Container", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_TimeFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TimeFilter describes a window in time. It filters out events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"start": {
						SchemaProps: spec.SchemaProps{
							Description: "Start is the beginning of a time window in UTC. Before this time, events for this dependency are ignored. Format is hh:mm:ss.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stop": {
						SchemaProps: spec.SchemaProps{
							Description: "Stop is the end of a time window in UTC. After or equal to this time, events for this dependency are ignored and Format is hh:mm:ss. If it is smaller than Start, it is treated as next day of Start (e.g.: 22:00:00-01:00:00 means 22:00:00-25:00:00).",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"start", "stop"},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_Trigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Trigger is an action taken, output produced, an event created, a message sent",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "Template describes the trigger specification.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerTemplate"),
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters is the list of parameters applied to the trigger template definition",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter"),
									},
								},
							},
						},
					},
					"policy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy to configure backoff and execution criteria for the trigger",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerPolicy"),
						},
					},
					"retryStrategy": {
						SchemaProps: spec.SchemaProps{
							Description: "Retry strategy, defaults to no retry",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/common.Backoff"),
						},
					},
					"rateLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Rate limit, default unit is Second",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.RateLimit"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/common.Backoff", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.RateLimit", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameter", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerPolicy", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerTemplate"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_TriggerParameter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TriggerParameter indicates a passed parameter to a service template",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"src": {
						SchemaProps: spec.SchemaProps{
							Description: "Src contains a source reference to the value of the parameter from a dependency",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameterSource"),
						},
					},
					"dest": {
						SchemaProps: spec.SchemaProps{
							Description: "Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The colon character can be escaped with '.' The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operation": {
						SchemaProps: spec.SchemaProps{
							Description: "Operation is what to do with the existing value at Dest, whether to 'prepend', 'overwrite', or 'append' it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"dest"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.TriggerParameterSource"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_TriggerParameterSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TriggerParameterSource defines the source for a parameter from a event event",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dependencyName": {
						SchemaProps: spec.SchemaProps{
							Description: "DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"contextKey": {
						SchemaProps: spec.SchemaProps{
							Description: "ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"contextTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "ContextTemplate is a go-template for extracting a string from the event's context. If a ContextTemplate is provided with a ContextKey, the template will be evaluated first and fallback to the ContextKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataKey": {
						SchemaProps: spec.SchemaProps{
							Description: "DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "DataTemplate is a go-template for extracting a string from the event's data. If a DataTemplate is provided with a DataKey, the template will be evaluated first and fallback to the DataKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"dependencyName"},
			},
		},
	}
}

func schema_pkg_apis_sensor_v1alpha1_TriggerPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TriggerPolicy dictates the policy for the trigger retries",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"k8s": {
						SchemaProps: spec.SchemaProps{
							Description: "K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using using labels",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.K8SResourcePolicy"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status refers to the policy used to check the state of the trigger using response status",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.StatusPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.K8SResourcePolicy", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.StatusPolicy"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_TriggerTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TriggerTemplate is the template that describes trigger specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is a unique name of the action to take.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is the conditions to execute the trigger. For example: \"(dep01 || dep02) && dep04\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"k8s": {
						SchemaProps: spec.SchemaProps{
							Description: "StandardK8STrigger refers to the trigger designed to create or update a generic Kubernetes resource.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.StandardK8STrigger"),
						},
					},
					"argoWorkflow": {
						SchemaProps: spec.SchemaProps{
							Description: "ArgoWorkflow refers to the trigger that can perform various operations on an Argo workflow.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ArgoWorkflowTrigger"),
						},
					},
					"http": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTP refers to the trigger designed to dispatch a HTTP request with on-the-fly constructable payload.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.HTTPTrigger"),
						},
					},
					"awsLambda": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSLambda refers to the trigger designed to invoke AWS Lambda function with with on-the-fly constructable payload.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.AWSLambdaTrigger"),
						},
					},
					"custom": {
						SchemaProps: spec.SchemaProps{
							Description: "CustomTrigger refers to the trigger designed to connect to a gRPC trigger server and execute a custom trigger.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.CustomTrigger"),
						},
					},
					"kafka": {
						SchemaProps: spec.SchemaProps{
							Description: "Kafka refers to the trigger designed to place messages on Kafka topic.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.KafkaTrigger"),
						},
					},
					"nats": {
						SchemaProps: spec.SchemaProps{
							Description: "NATS refers to the trigger designed to place message on NATS subject.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.NATSTrigger"),
						},
					},
					"slack": {
						SchemaProps: spec.SchemaProps{
							Description: "Slack refers to the trigger designed to send slack notification message.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SlackTrigger"),
						},
					},
					"openWhisk": {
						SchemaProps: spec.SchemaProps{
							Description: "OpenWhisk refers to the trigger designed to invoke OpenWhisk action.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.OpenWhiskTrigger"),
						},
					},
					"log": {
						SchemaProps: spec.SchemaProps{
							Description: "Log refers to the trigger designed to invoke log the event.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.LogTrigger"),
						},
					},
					"azureEventHubs": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureEventHubs refers to the trigger send an event to an Azure Event Hub.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.AzureEventHubsTrigger"),
						},
					},
					"pulsar": {
						SchemaProps: spec.SchemaProps{
							Description: "Pulsar refers to the trigger designed to place messages on Pulsar topic.",
							Ref:         ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.PulsarTrigger"),
						},
					},
					"conditionsReset": {
						SchemaProps: spec.SchemaProps{
							Description: "Criteria to reset the conditons",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ConditionsResetCriteria"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.AWSLambdaTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ArgoWorkflowTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.AzureEventHubsTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.ConditionsResetCriteria", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.CustomTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.HTTPTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.KafkaTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.LogTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.NATSTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.OpenWhiskTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.PulsarTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.SlackTrigger", "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1.StandardK8STrigger"},
	}
}

func schema_pkg_apis_sensor_v1alpha1_URLArtifact(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "URLArtifact contains information about an artifact at an http endpoint.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the complete URL",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"verifyCert": {
						SchemaProps: spec.SchemaProps{
							Description: "VerifyCert decides whether the connection is secure or not",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}
