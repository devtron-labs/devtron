// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.9.1
// source: gitSensor/service.proto

package gitSensor

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitMaterialList []*GitMaterial `protobuf:"bytes,1,rep,name=gitMaterialList,proto3" json:"gitMaterialList,omitempty"`
}

func (x *AddRepoRequest) Reset() {
	*x = AddRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRepoRequest) ProtoMessage() {}

func (x *AddRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRepoRequest.ProtoReflect.Descriptor instead.
func (*AddRepoRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddRepoRequest) GetGitMaterialList() []*GitMaterial {
	if x != nil {
		return x.GitMaterialList
	}
	return nil
}

type GitProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url           string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	UserName      string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Password      string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	SshPrivateKey string `protobuf:"bytes,6,opt,name=sshPrivateKey,proto3" json:"sshPrivateKey,omitempty"`
	AccessToken   string `protobuf:"bytes,7,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	AuthMode      string `protobuf:"bytes,8,opt,name=authMode,proto3" json:"authMode,omitempty"`
	Active        bool   `protobuf:"varint,9,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *GitProvider) Reset() {
	*x = GitProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProvider) ProtoMessage() {}

func (x *GitProvider) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProvider.ProtoReflect.Descriptor instead.
func (*GitProvider) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{1}
}

func (x *GitProvider) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitProvider) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitProvider) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GitProvider) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GitProvider) GetSshPrivateKey() string {
	if x != nil {
		return x.SshPrivateKey
	}
	return ""
}

func (x *GitProvider) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *GitProvider) GetAuthMode() string {
	if x != nil {
		return x.AuthMode
	}
	return ""
}

func (x *GitProvider) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type GitMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GitProviderId    int64    `protobuf:"varint,2,opt,name=gitProviderId,proto3" json:"gitProviderId,omitempty"`
	Url              string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	FetchSubmodules  bool     `protobuf:"varint,4,opt,name=fetchSubmodules,proto3" json:"fetchSubmodules,omitempty"`
	Name             string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	CheckoutLocation string   `protobuf:"bytes,6,opt,name=checkoutLocation,proto3" json:"checkoutLocation,omitempty"`
	CheckoutStatus   bool     `protobuf:"varint,7,opt,name=checkoutStatus,proto3" json:"checkoutStatus,omitempty"`
	CheckoutMsgAny   string   `protobuf:"bytes,8,opt,name=checkoutMsgAny,proto3" json:"checkoutMsgAny,omitempty"`
	Deleted          bool     `protobuf:"varint,9,opt,name=deleted,proto3" json:"deleted,omitempty"`
	FilterPattern    []string `protobuf:"bytes,10,rep,name=filterPattern,proto3" json:"filterPattern,omitempty"`
}

func (x *GitMaterial) Reset() {
	*x = GitMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitMaterial) ProtoMessage() {}

func (x *GitMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitMaterial.ProtoReflect.Descriptor instead.
func (*GitMaterial) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{2}
}

func (x *GitMaterial) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitMaterial) GetGitProviderId() int64 {
	if x != nil {
		return x.GitProviderId
	}
	return 0
}

func (x *GitMaterial) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitMaterial) GetFetchSubmodules() bool {
	if x != nil {
		return x.FetchSubmodules
	}
	return false
}

func (x *GitMaterial) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitMaterial) GetCheckoutLocation() string {
	if x != nil {
		return x.CheckoutLocation
	}
	return ""
}

func (x *GitMaterial) GetCheckoutStatus() bool {
	if x != nil {
		return x.CheckoutStatus
	}
	return false
}

func (x *GitMaterial) GetCheckoutMsgAny() string {
	if x != nil {
		return x.CheckoutMsgAny
	}
	return ""
}

func (x *GitMaterial) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *GitMaterial) GetFilterPattern() []string {
	if x != nil {
		return x.FilterPattern
	}
	return nil
}

type SavePipelineMaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiPipelineMaterials []*CiPipelineMaterial `protobuf:"bytes,1,rep,name=ciPipelineMaterials,proto3" json:"ciPipelineMaterials,omitempty"`
}

func (x *SavePipelineMaterialRequest) Reset() {
	*x = SavePipelineMaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePipelineMaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePipelineMaterialRequest) ProtoMessage() {}

func (x *SavePipelineMaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePipelineMaterialRequest.ProtoReflect.Descriptor instead.
func (*SavePipelineMaterialRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{3}
}

func (x *SavePipelineMaterialRequest) GetCiPipelineMaterials() []*CiPipelineMaterial {
	if x != nil {
		return x.CiPipelineMaterials
	}
	return nil
}

type CiPipelineMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GitMaterialId int64                `protobuf:"varint,2,opt,name=gitMaterialId,proto3" json:"gitMaterialId,omitempty"`
	Type          string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Value         string               `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Active        bool                 `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	LastSeenHash  string               `protobuf:"bytes,6,opt,name=lastSeenHash,proto3" json:"lastSeenHash,omitempty"`
	CommitAuthor  string               `protobuf:"bytes,7,opt,name=commitAuthor,proto3" json:"commitAuthor,omitempty"`
	CommitDate    *timestamp.Timestamp `protobuf:"bytes,8,opt,name=commitDate,proto3" json:"commitDate,omitempty"`
	CommitHistory string               `protobuf:"bytes,9,opt,name=commitHistory,proto3" json:"commitHistory,omitempty"`
	Errored       bool                 `protobuf:"varint,10,opt,name=errored,proto3" json:"errored,omitempty"`
	ErrorMsg      string               `protobuf:"bytes,11,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (x *CiPipelineMaterial) Reset() {
	*x = CiPipelineMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiPipelineMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiPipelineMaterial) ProtoMessage() {}

func (x *CiPipelineMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiPipelineMaterial.ProtoReflect.Descriptor instead.
func (*CiPipelineMaterial) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{4}
}

func (x *CiPipelineMaterial) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CiPipelineMaterial) GetGitMaterialId() int64 {
	if x != nil {
		return x.GitMaterialId
	}
	return 0
}

func (x *CiPipelineMaterial) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CiPipelineMaterial) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CiPipelineMaterial) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CiPipelineMaterial) GetLastSeenHash() string {
	if x != nil {
		return x.LastSeenHash
	}
	return ""
}

func (x *CiPipelineMaterial) GetCommitAuthor() string {
	if x != nil {
		return x.CommitAuthor
	}
	return ""
}

func (x *CiPipelineMaterial) GetCommitDate() *timestamp.Timestamp {
	if x != nil {
		return x.CommitDate
	}
	return nil
}

func (x *CiPipelineMaterial) GetCommitHistory() string {
	if x != nil {
		return x.CommitHistory
	}
	return ""
}

func (x *CiPipelineMaterial) GetErrored() bool {
	if x != nil {
		return x.Errored
	}
	return false
}

func (x *CiPipelineMaterial) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type FetchScmChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineMaterialId int64  `protobuf:"varint,1,opt,name=pipelineMaterialId,proto3" json:"pipelineMaterialId,omitempty"`
	From               string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                 string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Count              int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	ShowAll            bool   `protobuf:"varint,5,opt,name=showAll,proto3" json:"showAll,omitempty"`
}

func (x *FetchScmChangesRequest) Reset() {
	*x = FetchScmChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchScmChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchScmChangesRequest) ProtoMessage() {}

func (x *FetchScmChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchScmChangesRequest.ProtoReflect.Descriptor instead.
func (*FetchScmChangesRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{5}
}

func (x *FetchScmChangesRequest) GetPipelineMaterialId() int64 {
	if x != nil {
		return x.PipelineMaterialId
	}
	return 0
}

func (x *FetchScmChangesRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *FetchScmChangesRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *FetchScmChangesRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FetchScmChangesRequest) GetShowAll() bool {
	if x != nil {
		return x.ShowAll
	}
	return false
}

type MaterialChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits        []*GitCommit         `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	LastFetchTime  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=lastFetchTime,proto3" json:"lastFetchTime,omitempty"`
	IsRepoError    bool                 `protobuf:"varint,3,opt,name=isRepoError,proto3" json:"isRepoError,omitempty"`
	RepoErrorMsg   string               `protobuf:"bytes,4,opt,name=repoErrorMsg,proto3" json:"repoErrorMsg,omitempty"`
	IsBranchError  bool                 `protobuf:"varint,5,opt,name=isBranchError,proto3" json:"isBranchError,omitempty"`
	BranchErrorMsg string               `protobuf:"bytes,6,opt,name=branchErrorMsg,proto3" json:"branchErrorMsg,omitempty"`
}

func (x *MaterialChangeResponse) Reset() {
	*x = MaterialChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialChangeResponse) ProtoMessage() {}

func (x *MaterialChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialChangeResponse.ProtoReflect.Descriptor instead.
func (*MaterialChangeResponse) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{6}
}

func (x *MaterialChangeResponse) GetCommits() []*GitCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *MaterialChangeResponse) GetLastFetchTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastFetchTime
	}
	return nil
}

func (x *MaterialChangeResponse) GetIsRepoError() bool {
	if x != nil {
		return x.IsRepoError
	}
	return false
}

func (x *MaterialChangeResponse) GetRepoErrorMsg() string {
	if x != nil {
		return x.RepoErrorMsg
	}
	return ""
}

func (x *MaterialChangeResponse) GetIsBranchError() bool {
	if x != nil {
		return x.IsBranchError
	}
	return false
}

func (x *MaterialChangeResponse) GetBranchErrorMsg() string {
	if x != nil {
		return x.BranchErrorMsg
	}
	return ""
}

type GitCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit      string               `protobuf:"bytes,1,opt,name=Commit,proto3" json:"Commit,omitempty"`
	Author      string               `protobuf:"bytes,2,opt,name=Author,proto3" json:"Author,omitempty"`
	Date        *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Date,proto3" json:"Date,omitempty"`
	Message     string               `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	Changes     []string             `protobuf:"bytes,5,rep,name=Changes,proto3" json:"Changes,omitempty"`
	FileStats   []*FileStat          `protobuf:"bytes,6,rep,name=FileStats,proto3" json:"FileStats,omitempty"`
	WebhookData *WebhookData         `protobuf:"bytes,7,opt,name=WebhookData,proto3" json:"WebhookData,omitempty"`
	Excluded    bool                 `protobuf:"varint,8,opt,name=Excluded,proto3" json:"Excluded,omitempty"`
}

func (x *GitCommit) Reset() {
	*x = GitCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommit) ProtoMessage() {}

func (x *GitCommit) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommit.ProtoReflect.Descriptor instead.
func (*GitCommit) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{7}
}

func (x *GitCommit) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *GitCommit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *GitCommit) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *GitCommit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GitCommit) GetChanges() []string {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *GitCommit) GetFileStats() []*FileStat {
	if x != nil {
		return x.FileStats
	}
	return nil
}

func (x *GitCommit) GetWebhookData() *WebhookData {
	if x != nil {
		return x.WebhookData
	}
	return nil
}

func (x *GitCommit) GetExcluded() bool {
	if x != nil {
		return x.Excluded
	}
	return false
}

type FileStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Addition int64  `protobuf:"varint,2,opt,name=Addition,proto3" json:"Addition,omitempty"`
	Deletion int64  `protobuf:"varint,3,opt,name=Deletion,proto3" json:"Deletion,omitempty"`
}

func (x *FileStat) Reset() {
	*x = FileStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStat) ProtoMessage() {}

func (x *FileStat) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStat.ProtoReflect.Descriptor instead.
func (*FileStat) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{8}
}

func (x *FileStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileStat) GetAddition() int64 {
	if x != nil {
		return x.Addition
	}
	return 0
}

func (x *FileStat) GetDeletion() int64 {
	if x != nil {
		return x.Deletion
	}
	return 0
}

type WebhookData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventActionType string            `protobuf:"bytes,2,opt,name=eventActionType,proto3" json:"eventActionType,omitempty"`
	Data            map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WebhookData) Reset() {
	*x = WebhookData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookData) ProtoMessage() {}

func (x *WebhookData) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookData.ProtoReflect.Descriptor instead.
func (*WebhookData) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{9}
}

func (x *WebhookData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebhookData) GetEventActionType() string {
	if x != nil {
		return x.EventActionType
	}
	return ""
}

func (x *WebhookData) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type HeadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialIds []int64 `protobuf:"varint,1,rep,packed,name=materialIds,proto3" json:"materialIds,omitempty"`
}

func (x *HeadRequest) Reset() {
	*x = HeadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadRequest) ProtoMessage() {}

func (x *HeadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadRequest.ProtoReflect.Descriptor instead.
func (*HeadRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{10}
}

func (x *HeadRequest) GetMaterialIds() []int64 {
	if x != nil {
		return x.MaterialIds
	}
	return nil
}

type GetHeadForPipelineMaterialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Materials []*CiPipelineMaterialBean `protobuf:"bytes,1,rep,name=materials,proto3" json:"materials,omitempty"`
}

func (x *GetHeadForPipelineMaterialsResponse) Reset() {
	*x = GetHeadForPipelineMaterialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadForPipelineMaterialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadForPipelineMaterialsResponse) ProtoMessage() {}

func (x *GetHeadForPipelineMaterialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadForPipelineMaterialsResponse.ProtoReflect.Descriptor instead.
func (*GetHeadForPipelineMaterialsResponse) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetHeadForPipelineMaterialsResponse) GetMaterials() []*CiPipelineMaterialBean {
	if x != nil {
		return x.Materials
	}
	return nil
}

type CiPipelineMaterialBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GitMaterialId             int64             `protobuf:"varint,2,opt,name=GitMaterialId,proto3" json:"GitMaterialId,omitempty"`
	Type                      string            `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Value                     string            `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Active                    bool              `protobuf:"varint,5,opt,name=Active,proto3" json:"Active,omitempty"`
	GitCommit                 *GitCommit        `protobuf:"bytes,6,opt,name=GitCommit,proto3" json:"GitCommit,omitempty"`
	ExtraEnvironmentVariables map[string]string `protobuf:"bytes,7,rep,name=ExtraEnvironmentVariables,proto3" json:"ExtraEnvironmentVariables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CiPipelineMaterialBean) Reset() {
	*x = CiPipelineMaterialBean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiPipelineMaterialBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiPipelineMaterialBean) ProtoMessage() {}

func (x *CiPipelineMaterialBean) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiPipelineMaterialBean.ProtoReflect.Descriptor instead.
func (*CiPipelineMaterialBean) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{12}
}

func (x *CiPipelineMaterialBean) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CiPipelineMaterialBean) GetGitMaterialId() int64 {
	if x != nil {
		return x.GitMaterialId
	}
	return 0
}

func (x *CiPipelineMaterialBean) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CiPipelineMaterialBean) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CiPipelineMaterialBean) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CiPipelineMaterialBean) GetGitCommit() *GitCommit {
	if x != nil {
		return x.GitCommit
	}
	return nil
}

func (x *CiPipelineMaterialBean) GetExtraEnvironmentVariables() map[string]string {
	if x != nil {
		return x.ExtraEnvironmentVariables
	}
	return nil
}

type CommitMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineMaterialId int64  `protobuf:"varint,1,opt,name=pipelineMaterialId,proto3" json:"pipelineMaterialId,omitempty"`
	GitHash            string `protobuf:"bytes,2,opt,name=gitHash,proto3" json:"gitHash,omitempty"`
	GitTag             string `protobuf:"bytes,3,opt,name=gitTag,proto3" json:"gitTag,omitempty"`
	BranchName         string `protobuf:"bytes,4,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *CommitMetadataRequest) Reset() {
	*x = CommitMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMetadataRequest) ProtoMessage() {}

func (x *CommitMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMetadataRequest.ProtoReflect.Descriptor instead.
func (*CommitMetadataRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{13}
}

func (x *CommitMetadataRequest) GetPipelineMaterialId() int64 {
	if x != nil {
		return x.PipelineMaterialId
	}
	return 0
}

func (x *CommitMetadataRequest) GetGitHash() string {
	if x != nil {
		return x.GitHash
	}
	return ""
}

func (x *CommitMetadataRequest) GetGitTag() string {
	if x != nil {
		return x.GitTag
	}
	return ""
}

func (x *CommitMetadataRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type RefreshGitMaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitMaterialId int64 `protobuf:"varint,1,opt,name=gitMaterialId,proto3" json:"gitMaterialId,omitempty"`
}

func (x *RefreshGitMaterialRequest) Reset() {
	*x = RefreshGitMaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshGitMaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshGitMaterialRequest) ProtoMessage() {}

func (x *RefreshGitMaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshGitMaterialRequest.ProtoReflect.Descriptor instead.
func (*RefreshGitMaterialRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{14}
}

func (x *RefreshGitMaterialRequest) GetGitMaterialId() int64 {
	if x != nil {
		return x.GitMaterialId
	}
	return 0
}

type RefreshGitMaterialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ErrorMsg      string               `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	LastFetchTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=lastFetchTime,proto3" json:"lastFetchTime,omitempty"`
}

func (x *RefreshGitMaterialResponse) Reset() {
	*x = RefreshGitMaterialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshGitMaterialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshGitMaterialResponse) ProtoMessage() {}

func (x *RefreshGitMaterialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshGitMaterialResponse.ProtoReflect.Descriptor instead.
func (*RefreshGitMaterialResponse) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{15}
}

func (x *RefreshGitMaterialResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RefreshGitMaterialResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RefreshGitMaterialResponse) GetLastFetchTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastFetchTime
	}
	return nil
}

type ReloadMaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialId int64 `protobuf:"varint,1,opt,name=materialId,proto3" json:"materialId,omitempty"`
}

func (x *ReloadMaterialRequest) Reset() {
	*x = ReloadMaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadMaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadMaterialRequest) ProtoMessage() {}

func (x *ReloadMaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadMaterialRequest.ProtoReflect.Descriptor instead.
func (*ReloadMaterialRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{16}
}

func (x *ReloadMaterialRequest) GetMaterialId() int64 {
	if x != nil {
		return x.MaterialId
	}
	return 0
}

type GenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{17}
}

func (x *GenericResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{18}
}

type ReleaseChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineMaterialId int64  `protobuf:"varint,1,opt,name=pipelineMaterialId,proto3" json:"pipelineMaterialId,omitempty"`
	OldCommit          string `protobuf:"bytes,2,opt,name=oldCommit,proto3" json:"oldCommit,omitempty"`
	NewCommit          string `protobuf:"bytes,3,opt,name=newCommit,proto3" json:"newCommit,omitempty"`
}

func (x *ReleaseChangeRequest) Reset() {
	*x = ReleaseChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseChangeRequest) ProtoMessage() {}

func (x *ReleaseChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseChangeRequest.ProtoReflect.Descriptor instead.
func (*ReleaseChangeRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{19}
}

func (x *ReleaseChangeRequest) GetPipelineMaterialId() int64 {
	if x != nil {
		return x.PipelineMaterialId
	}
	return 0
}

func (x *ReleaseChangeRequest) GetOldCommit() string {
	if x != nil {
		return x.OldCommit
	}
	return ""
}

func (x *ReleaseChangeRequest) GetNewCommit() string {
	if x != nil {
		return x.NewCommit
	}
	return ""
}

type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Long  string `protobuf:"bytes,1,opt,name=Long,proto3" json:"Long,omitempty"`
	Short string `protobuf:"bytes,2,opt,name=Short,proto3" json:"Short,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{20}
}

func (x *Hash) GetLong() string {
	if x != nil {
		return x.Long
	}
	return ""
}

func (x *Hash) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Long  string `protobuf:"bytes,1,opt,name=Long,proto3" json:"Long,omitempty"`
	Short string `protobuf:"bytes,2,opt,name=Short,proto3" json:"Short,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{21}
}

func (x *Tree) GetLong() string {
	if x != nil {
		return x.Long
	}
	return ""
}

func (x *Tree) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

type Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Email string               `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Date  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *Author) Reset() {
	*x = Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Author) ProtoMessage() {}

func (x *Author) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Author.ProtoReflect.Descriptor instead.
func (*Author) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{22}
}

func (x *Author) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Author) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Author) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type Committer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Email string               `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Date  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *Committer) Reset() {
	*x = Committer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Committer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Committer) ProtoMessage() {}

func (x *Committer) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Committer.ProtoReflect.Descriptor instead.
func (*Committer) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{23}
}

func (x *Committer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Committer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Committer) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Date *timestamp.Timestamp `protobuf:"bytes,2,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{24}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      *Hash      `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Tree      *Tree      `protobuf:"bytes,2,opt,name=Tree,proto3" json:"Tree,omitempty"`
	Author    *Author    `protobuf:"bytes,3,opt,name=Author,proto3" json:"Author,omitempty"`
	Committer *Committer `protobuf:"bytes,4,opt,name=Committer,proto3" json:"Committer,omitempty"`
	Tag       *Tag       `protobuf:"bytes,5,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Subject   string     `protobuf:"bytes,6,opt,name=Subject,proto3" json:"Subject,omitempty"`
	Body      string     `protobuf:"bytes,7,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{25}
}

func (x *Commit) GetHash() *Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Commit) GetTree() *Tree {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *Commit) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Commit) GetCommitter() *Committer {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *Commit) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Commit) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Commit) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type GitChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits   []*Commit   `protobuf:"bytes,1,rep,name=Commits,proto3" json:"Commits,omitempty"`
	FileStats []*FileStat `protobuf:"bytes,2,rep,name=FileStats,proto3" json:"FileStats,omitempty"`
}

func (x *GitChanges) Reset() {
	*x = GitChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitChanges) ProtoMessage() {}

func (x *GitChanges) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitChanges.ProtoReflect.Descriptor instead.
func (*GitChanges) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{26}
}

func (x *GitChanges) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *GitChanges) GetFileStats() []*FileStat {
	if x != nil {
		return x.FileStats
	}
	return nil
}

type WebhookDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CiPipelineMaterialId int64 `protobuf:"varint,2,opt,name=ciPipelineMaterialId,proto3" json:"ciPipelineMaterialId,omitempty"`
}

func (x *WebhookDataRequest) Reset() {
	*x = WebhookDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookDataRequest) ProtoMessage() {}

func (x *WebhookDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookDataRequest.ProtoReflect.Descriptor instead.
func (*WebhookDataRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{27}
}

func (x *WebhookDataRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebhookDataRequest) GetCiPipelineMaterialId() int64 {
	if x != nil {
		return x.CiPipelineMaterialId
	}
	return 0
}

type WebhookAndCiData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraEnvironmentVariables map[string]string `protobuf:"bytes,1,rep,name=extraEnvironmentVariables,proto3" json:"extraEnvironmentVariables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WebhookData               *WebhookData      `protobuf:"bytes,2,opt,name=webhookData,proto3" json:"webhookData,omitempty"`
}

func (x *WebhookAndCiData) Reset() {
	*x = WebhookAndCiData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookAndCiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookAndCiData) ProtoMessage() {}

func (x *WebhookAndCiData) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookAndCiData.ProtoReflect.Descriptor instead.
func (*WebhookAndCiData) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{28}
}

func (x *WebhookAndCiData) GetExtraEnvironmentVariables() map[string]string {
	if x != nil {
		return x.ExtraEnvironmentVariables
	}
	return nil
}

func (x *WebhookAndCiData) GetWebhookData() *WebhookData {
	if x != nil {
		return x.WebhookData
	}
	return nil
}

type WebhookEventConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitHostId int64 `protobuf:"varint,1,opt,name=gitHostId,proto3" json:"gitHostId,omitempty"`
	EventId   int64 `protobuf:"varint,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *WebhookEventConfigRequest) Reset() {
	*x = WebhookEventConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookEventConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookEventConfigRequest) ProtoMessage() {}

func (x *WebhookEventConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookEventConfigRequest.ProtoReflect.Descriptor instead.
func (*WebhookEventConfigRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{29}
}

func (x *WebhookEventConfigRequest) GetGitHostId() int64 {
	if x != nil {
		return x.GitHostId
	}
	return 0
}

func (x *WebhookEventConfigRequest) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

type WebhookEventSelectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId          int64                `protobuf:"varint,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name             string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ToShow           bool                 `protobuf:"varint,4,opt,name=toShow,proto3" json:"toShow,omitempty"`
	ToShowInCiFilter bool                 `protobuf:"varint,5,opt,name=toShowInCiFilter,proto3" json:"toShowInCiFilter,omitempty"`
	FixValue         string               `protobuf:"bytes,6,opt,name=fixValue,proto3" json:"fixValue,omitempty"`
	PossibleValues   string               `protobuf:"bytes,7,opt,name=possibleValues,proto3" json:"possibleValues,omitempty"`
	IsActive         bool                 `protobuf:"varint,8,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CreatedOn        *timestamp.Timestamp `protobuf:"bytes,9,opt,name=createdOn,proto3" json:"createdOn,omitempty"`
	UpdatedOn        *timestamp.Timestamp `protobuf:"bytes,10,opt,name=updatedOn,proto3" json:"updatedOn,omitempty"`
}

func (x *WebhookEventSelectors) Reset() {
	*x = WebhookEventSelectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookEventSelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookEventSelectors) ProtoMessage() {}

func (x *WebhookEventSelectors) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookEventSelectors.ProtoReflect.Descriptor instead.
func (*WebhookEventSelectors) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{30}
}

func (x *WebhookEventSelectors) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebhookEventSelectors) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *WebhookEventSelectors) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebhookEventSelectors) GetToShow() bool {
	if x != nil {
		return x.ToShow
	}
	return false
}

func (x *WebhookEventSelectors) GetToShowInCiFilter() bool {
	if x != nil {
		return x.ToShowInCiFilter
	}
	return false
}

func (x *WebhookEventSelectors) GetFixValue() string {
	if x != nil {
		return x.FixValue
	}
	return ""
}

func (x *WebhookEventSelectors) GetPossibleValues() string {
	if x != nil {
		return x.PossibleValues
	}
	return ""
}

func (x *WebhookEventSelectors) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *WebhookEventSelectors) GetCreatedOn() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *WebhookEventSelectors) GetUpdatedOn() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedOn
	}
	return nil
}

type WebhookEventConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GitHostId     int64                    `protobuf:"varint,2,opt,name=gitHostId,proto3" json:"gitHostId,omitempty"`
	Name          string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	EventTypesCsv string                   `protobuf:"bytes,4,opt,name=eventTypesCsv,proto3" json:"eventTypesCsv,omitempty"`
	ActionType    string                   `protobuf:"bytes,5,opt,name=actionType,proto3" json:"actionType,omitempty"`
	IsActive      bool                     `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CreatedOn     *timestamp.Timestamp     `protobuf:"bytes,7,opt,name=createdOn,proto3" json:"createdOn,omitempty"`
	UpdatedOn     *timestamp.Timestamp     `protobuf:"bytes,8,opt,name=updatedOn,proto3" json:"updatedOn,omitempty"`
	Selectors     []*WebhookEventSelectors `protobuf:"bytes,9,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *WebhookEventConfig) Reset() {
	*x = WebhookEventConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookEventConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookEventConfig) ProtoMessage() {}

func (x *WebhookEventConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookEventConfig.ProtoReflect.Descriptor instead.
func (*WebhookEventConfig) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{31}
}

func (x *WebhookEventConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebhookEventConfig) GetGitHostId() int64 {
	if x != nil {
		return x.GitHostId
	}
	return 0
}

func (x *WebhookEventConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebhookEventConfig) GetEventTypesCsv() string {
	if x != nil {
		return x.EventTypesCsv
	}
	return ""
}

func (x *WebhookEventConfig) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *WebhookEventConfig) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *WebhookEventConfig) GetCreatedOn() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *WebhookEventConfig) GetUpdatedOn() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedOn
	}
	return nil
}

func (x *WebhookEventConfig) GetSelectors() []*WebhookEventSelectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type WebhookEventConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookEventConfig []*WebhookEventConfig `protobuf:"bytes,1,rep,name=webhookEventConfig,proto3" json:"webhookEventConfig,omitempty"`
}

func (x *WebhookEventConfigResponse) Reset() {
	*x = WebhookEventConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookEventConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookEventConfigResponse) ProtoMessage() {}

func (x *WebhookEventConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookEventConfigResponse.ProtoReflect.Descriptor instead.
func (*WebhookEventConfigResponse) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{32}
}

func (x *WebhookEventConfigResponse) GetWebhookEventConfig() []*WebhookEventConfig {
	if x != nil {
		return x.WebhookEventConfig
	}
	return nil
}

type WebhookPayloadDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiPipelineMaterialId int64  `protobuf:"varint,1,opt,name=ciPipelineMaterialId,proto3" json:"ciPipelineMaterialId,omitempty"`
	Limit                int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	EventTimeSortOrder   string `protobuf:"bytes,4,opt,name=eventTimeSortOrder,proto3" json:"eventTimeSortOrder,omitempty"`
}

func (x *WebhookPayloadDataRequest) Reset() {
	*x = WebhookPayloadDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPayloadDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPayloadDataRequest) ProtoMessage() {}

func (x *WebhookPayloadDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPayloadDataRequest.ProtoReflect.Descriptor instead.
func (*WebhookPayloadDataRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{33}
}

func (x *WebhookPayloadDataRequest) GetCiPipelineMaterialId() int64 {
	if x != nil {
		return x.CiPipelineMaterialId
	}
	return 0
}

func (x *WebhookPayloadDataRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WebhookPayloadDataRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WebhookPayloadDataRequest) GetEventTimeSortOrder() string {
	if x != nil {
		return x.EventTimeSortOrder
	}
	return ""
}

type WebhookPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParsedDataId        int64                `protobuf:"varint,1,opt,name=parsedDataId,proto3" json:"parsedDataId,omitempty"`
	EventTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	MatchedFiltersCount int64                `protobuf:"varint,3,opt,name=matchedFiltersCount,proto3" json:"matchedFiltersCount,omitempty"`
	FailedFiltersCount  int64                `protobuf:"varint,4,opt,name=failedFiltersCount,proto3" json:"failedFiltersCount,omitempty"`
	MatchedFilters      bool                 `protobuf:"varint,5,opt,name=matchedFilters,proto3" json:"matchedFilters,omitempty"`
}

func (x *WebhookPayload) Reset() {
	*x = WebhookPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPayload) ProtoMessage() {}

func (x *WebhookPayload) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPayload.ProtoReflect.Descriptor instead.
func (*WebhookPayload) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{34}
}

func (x *WebhookPayload) GetParsedDataId() int64 {
	if x != nil {
		return x.ParsedDataId
	}
	return 0
}

func (x *WebhookPayload) GetEventTime() *timestamp.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *WebhookPayload) GetMatchedFiltersCount() int64 {
	if x != nil {
		return x.MatchedFiltersCount
	}
	return 0
}

func (x *WebhookPayload) GetFailedFiltersCount() int64 {
	if x != nil {
		return x.FailedFiltersCount
	}
	return 0
}

func (x *WebhookPayload) GetMatchedFilters() bool {
	if x != nil {
		return x.MatchedFilters
	}
	return false
}

type WebhookPayloadDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters       map[string]string `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepositoryUrl string            `protobuf:"bytes,2,opt,name=repositoryUrl,proto3" json:"repositoryUrl,omitempty"`
	Payloads      []*WebhookPayload `protobuf:"bytes,3,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *WebhookPayloadDataResponse) Reset() {
	*x = WebhookPayloadDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPayloadDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPayloadDataResponse) ProtoMessage() {}

func (x *WebhookPayloadDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPayloadDataResponse.ProtoReflect.Descriptor instead.
func (*WebhookPayloadDataResponse) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{35}
}

func (x *WebhookPayloadDataResponse) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *WebhookPayloadDataResponse) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *WebhookPayloadDataResponse) GetPayloads() []*WebhookPayload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type WebhookPayloadFilterDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiPipelineMaterialId int64 `protobuf:"varint,1,opt,name=ciPipelineMaterialId,proto3" json:"ciPipelineMaterialId,omitempty"`
	ParsedDataId         int64 `protobuf:"varint,2,opt,name=parsedDataId,proto3" json:"parsedDataId,omitempty"`
}

func (x *WebhookPayloadFilterDataRequest) Reset() {
	*x = WebhookPayloadFilterDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPayloadFilterDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPayloadFilterDataRequest) ProtoMessage() {}

func (x *WebhookPayloadFilterDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPayloadFilterDataRequest.ProtoReflect.Descriptor instead.
func (*WebhookPayloadFilterDataRequest) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{36}
}

func (x *WebhookPayloadFilterDataRequest) GetCiPipelineMaterialId() int64 {
	if x != nil {
		return x.CiPipelineMaterialId
	}
	return 0
}

func (x *WebhookPayloadFilterDataRequest) GetParsedDataId() int64 {
	if x != nil {
		return x.ParsedDataId
	}
	return 0
}

type WebhookPayloadFilterDataSelectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectorName      string `protobuf:"bytes,1,opt,name=selectorName,proto3" json:"selectorName,omitempty"`
	SelectorCondition string `protobuf:"bytes,2,opt,name=selectorCondition,proto3" json:"selectorCondition,omitempty"`
	SelectorValue     string `protobuf:"bytes,3,opt,name=selectorValue,proto3" json:"selectorValue,omitempty"`
	Match             bool   `protobuf:"varint,4,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *WebhookPayloadFilterDataSelectorResponse) Reset() {
	*x = WebhookPayloadFilterDataSelectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPayloadFilterDataSelectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPayloadFilterDataSelectorResponse) ProtoMessage() {}

func (x *WebhookPayloadFilterDataSelectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPayloadFilterDataSelectorResponse.ProtoReflect.Descriptor instead.
func (*WebhookPayloadFilterDataSelectorResponse) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{37}
}

func (x *WebhookPayloadFilterDataSelectorResponse) GetSelectorName() string {
	if x != nil {
		return x.SelectorName
	}
	return ""
}

func (x *WebhookPayloadFilterDataSelectorResponse) GetSelectorCondition() string {
	if x != nil {
		return x.SelectorCondition
	}
	return ""
}

func (x *WebhookPayloadFilterDataSelectorResponse) GetSelectorValue() string {
	if x != nil {
		return x.SelectorValue
	}
	return ""
}

func (x *WebhookPayloadFilterDataSelectorResponse) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

type WebhookPayloadFilterDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadId     int64                                       `protobuf:"varint,1,opt,name=payloadId,proto3" json:"payloadId,omitempty"`
	SelectorsData []*WebhookPayloadFilterDataSelectorResponse `protobuf:"bytes,2,rep,name=selectorsData,proto3" json:"selectorsData,omitempty"`
	PayloadJson   string                                      `protobuf:"bytes,3,opt,name=payloadJson,proto3" json:"payloadJson,omitempty"`
}

func (x *WebhookPayloadFilterDataResponse) Reset() {
	*x = WebhookPayloadFilterDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitSensor_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPayloadFilterDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPayloadFilterDataResponse) ProtoMessage() {}

func (x *WebhookPayloadFilterDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitSensor_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPayloadFilterDataResponse.ProtoReflect.Descriptor instead.
func (*WebhookPayloadFilterDataResponse) Descriptor() ([]byte, []int) {
	return file_gitSensor_service_proto_rawDescGZIP(), []int{38}
}

func (x *WebhookPayloadFilterDataResponse) GetPayloadId() int64 {
	if x != nil {
		return x.PayloadId
	}
	return 0
}

func (x *WebhookPayloadFilterDataResponse) GetSelectorsData() []*WebhookPayloadFilterDataSelectorResponse {
	if x != nil {
		return x.SelectorsData
	}
	return nil
}

func (x *WebhookPayloadFilterDataResponse) GetPayloadJson() string {
	if x != nil {
		return x.PayloadJson
	}
	return ""
}

var File_gitSensor_service_proto protoreflect.FileDescriptor

var file_gitSensor_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x67, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x67, 0x69, 0x74, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x0b,
	0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x73, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x0b, 0x47, 0x69, 0x74, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x41, 0x6e,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x6f, 0x0a, 0x1b, 0x53, 0x61, 0x76, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x69, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x13, 0x63, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x12, 0x43, 0x69, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x68, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x22, 0x9f, 0x02, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xaa, 0x02, 0x0a, 0x09, 0x47, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x22, 0x56, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01,
	0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0x94, 0x03, 0x0a, 0x16, 0x43, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x47, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x47, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x09,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x7f, 0x0a, 0x19, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67,
	0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x69, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x65, 0x61, 0x6e,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x19, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x1e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x69, 0x74, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x47, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x37,
	0x0a, 0x15, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x82, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x22, 0x30, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x22, 0x30, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x22, 0x62, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x65, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x49, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x86, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x04, 0x54, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x69,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x33, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x6e, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x63,
	0x69, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x69, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22,
	0x96, 0x02, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x64, 0x43, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x6e, 0x64, 0x43,
	0x69, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x1e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x19, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x69, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xed, 0x02,
	0x0a, 0x15, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x43, 0x69, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x43, 0x69, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0xed, 0x02,
	0x0a, 0x12, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x43, 0x73, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x73, 0x76, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3f, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x6c, 0x0a,
	0x1a, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xad, 0x01, 0x0a, 0x19,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x69, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x0e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x1a, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79,
	0x0a, 0x1f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x63, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x28, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x22, 0xbe, 0x01, 0x0a, 0x20, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x32, 0xce, 0x0c, 0x0a, 0x10, 0x47, 0x69, 0x74, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x53, 0x61,
	0x76, 0x65, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x2e,
	0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0x11, 0x2e, 0x67, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a,
	0x14, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x56, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x60, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67,
	0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x63, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x11,
	0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e,
	0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x6e,
	0x64, 0x43, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x2a, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x67, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x67, 0x69,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x74, 0x72, 0x6f, 0x6e, 0x2d, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitSensor_service_proto_rawDescOnce sync.Once
	file_gitSensor_service_proto_rawDescData = file_gitSensor_service_proto_rawDesc
)

func file_gitSensor_service_proto_rawDescGZIP() []byte {
	file_gitSensor_service_proto_rawDescOnce.Do(func() {
		file_gitSensor_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitSensor_service_proto_rawDescData)
	})
	return file_gitSensor_service_proto_rawDescData
}

var file_gitSensor_service_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_gitSensor_service_proto_goTypes = []interface{}{
	(*AddRepoRequest)(nil),                           // 0: gitService.AddRepoRequest
	(*GitProvider)(nil),                              // 1: gitService.GitProvider
	(*GitMaterial)(nil),                              // 2: gitService.GitMaterial
	(*SavePipelineMaterialRequest)(nil),              // 3: gitService.SavePipelineMaterialRequest
	(*CiPipelineMaterial)(nil),                       // 4: gitService.CiPipelineMaterial
	(*FetchScmChangesRequest)(nil),                   // 5: gitService.FetchScmChangesRequest
	(*MaterialChangeResponse)(nil),                   // 6: gitService.MaterialChangeResponse
	(*GitCommit)(nil),                                // 7: gitService.GitCommit
	(*FileStat)(nil),                                 // 8: gitService.FileStat
	(*WebhookData)(nil),                              // 9: gitService.WebhookData
	(*HeadRequest)(nil),                              // 10: gitService.HeadRequest
	(*GetHeadForPipelineMaterialsResponse)(nil),      // 11: gitService.GetHeadForPipelineMaterialsResponse
	(*CiPipelineMaterialBean)(nil),                   // 12: gitService.CiPipelineMaterialBean
	(*CommitMetadataRequest)(nil),                    // 13: gitService.CommitMetadataRequest
	(*RefreshGitMaterialRequest)(nil),                // 14: gitService.RefreshGitMaterialRequest
	(*RefreshGitMaterialResponse)(nil),               // 15: gitService.RefreshGitMaterialResponse
	(*ReloadMaterialRequest)(nil),                    // 16: gitService.ReloadMaterialRequest
	(*GenericResponse)(nil),                          // 17: gitService.GenericResponse
	(*Empty)(nil),                                    // 18: gitService.Empty
	(*ReleaseChangeRequest)(nil),                     // 19: gitService.ReleaseChangeRequest
	(*Hash)(nil),                                     // 20: gitService.Hash
	(*Tree)(nil),                                     // 21: gitService.Tree
	(*Author)(nil),                                   // 22: gitService.Author
	(*Committer)(nil),                                // 23: gitService.Committer
	(*Tag)(nil),                                      // 24: gitService.Tag
	(*Commit)(nil),                                   // 25: gitService.Commit
	(*GitChanges)(nil),                               // 26: gitService.GitChanges
	(*WebhookDataRequest)(nil),                       // 27: gitService.WebhookDataRequest
	(*WebhookAndCiData)(nil),                         // 28: gitService.WebhookAndCiData
	(*WebhookEventConfigRequest)(nil),                // 29: gitService.WebhookEventConfigRequest
	(*WebhookEventSelectors)(nil),                    // 30: gitService.WebhookEventSelectors
	(*WebhookEventConfig)(nil),                       // 31: gitService.WebhookEventConfig
	(*WebhookEventConfigResponse)(nil),               // 32: gitService.WebhookEventConfigResponse
	(*WebhookPayloadDataRequest)(nil),                // 33: gitService.WebhookPayloadDataRequest
	(*WebhookPayload)(nil),                           // 34: gitService.WebhookPayload
	(*WebhookPayloadDataResponse)(nil),               // 35: gitService.WebhookPayloadDataResponse
	(*WebhookPayloadFilterDataRequest)(nil),          // 36: gitService.WebhookPayloadFilterDataRequest
	(*WebhookPayloadFilterDataSelectorResponse)(nil), // 37: gitService.WebhookPayloadFilterDataSelectorResponse
	(*WebhookPayloadFilterDataResponse)(nil),         // 38: gitService.WebhookPayloadFilterDataResponse
	nil,                                              // 39: gitService.WebhookData.DataEntry
	nil,                                              // 40: gitService.CiPipelineMaterialBean.ExtraEnvironmentVariablesEntry
	nil,                                              // 41: gitService.WebhookAndCiData.ExtraEnvironmentVariablesEntry
	nil,                                              // 42: gitService.WebhookPayloadDataResponse.FiltersEntry
	(*timestamp.Timestamp)(nil),                      // 43: google.protobuf.Timestamp
}
var file_gitSensor_service_proto_depIdxs = []int32{
	2,  // 0: gitService.AddRepoRequest.gitMaterialList:type_name -> gitService.GitMaterial
	4,  // 1: gitService.SavePipelineMaterialRequest.ciPipelineMaterials:type_name -> gitService.CiPipelineMaterial
	43, // 2: gitService.CiPipelineMaterial.commitDate:type_name -> google.protobuf.Timestamp
	7,  // 3: gitService.MaterialChangeResponse.commits:type_name -> gitService.GitCommit
	43, // 4: gitService.MaterialChangeResponse.lastFetchTime:type_name -> google.protobuf.Timestamp
	43, // 5: gitService.GitCommit.Date:type_name -> google.protobuf.Timestamp
	8,  // 6: gitService.GitCommit.FileStats:type_name -> gitService.FileStat
	9,  // 7: gitService.GitCommit.WebhookData:type_name -> gitService.WebhookData
	39, // 8: gitService.WebhookData.data:type_name -> gitService.WebhookData.DataEntry
	12, // 9: gitService.GetHeadForPipelineMaterialsResponse.materials:type_name -> gitService.CiPipelineMaterialBean
	7,  // 10: gitService.CiPipelineMaterialBean.GitCommit:type_name -> gitService.GitCommit
	40, // 11: gitService.CiPipelineMaterialBean.ExtraEnvironmentVariables:type_name -> gitService.CiPipelineMaterialBean.ExtraEnvironmentVariablesEntry
	43, // 12: gitService.RefreshGitMaterialResponse.lastFetchTime:type_name -> google.protobuf.Timestamp
	43, // 13: gitService.Author.Date:type_name -> google.protobuf.Timestamp
	43, // 14: gitService.Committer.Date:type_name -> google.protobuf.Timestamp
	43, // 15: gitService.Tag.Date:type_name -> google.protobuf.Timestamp
	20, // 16: gitService.Commit.Hash:type_name -> gitService.Hash
	21, // 17: gitService.Commit.Tree:type_name -> gitService.Tree
	22, // 18: gitService.Commit.Author:type_name -> gitService.Author
	23, // 19: gitService.Commit.Committer:type_name -> gitService.Committer
	24, // 20: gitService.Commit.Tag:type_name -> gitService.Tag
	25, // 21: gitService.GitChanges.Commits:type_name -> gitService.Commit
	8,  // 22: gitService.GitChanges.FileStats:type_name -> gitService.FileStat
	41, // 23: gitService.WebhookAndCiData.extraEnvironmentVariables:type_name -> gitService.WebhookAndCiData.ExtraEnvironmentVariablesEntry
	9,  // 24: gitService.WebhookAndCiData.webhookData:type_name -> gitService.WebhookData
	43, // 25: gitService.WebhookEventSelectors.createdOn:type_name -> google.protobuf.Timestamp
	43, // 26: gitService.WebhookEventSelectors.updatedOn:type_name -> google.protobuf.Timestamp
	43, // 27: gitService.WebhookEventConfig.createdOn:type_name -> google.protobuf.Timestamp
	43, // 28: gitService.WebhookEventConfig.updatedOn:type_name -> google.protobuf.Timestamp
	30, // 29: gitService.WebhookEventConfig.selectors:type_name -> gitService.WebhookEventSelectors
	31, // 30: gitService.WebhookEventConfigResponse.webhookEventConfig:type_name -> gitService.WebhookEventConfig
	43, // 31: gitService.WebhookPayload.eventTime:type_name -> google.protobuf.Timestamp
	42, // 32: gitService.WebhookPayloadDataResponse.filters:type_name -> gitService.WebhookPayloadDataResponse.FiltersEntry
	34, // 33: gitService.WebhookPayloadDataResponse.payloads:type_name -> gitService.WebhookPayload
	37, // 34: gitService.WebhookPayloadFilterDataResponse.selectorsData:type_name -> gitService.WebhookPayloadFilterDataSelectorResponse
	1,  // 35: gitService.GitSensorService.SaveGitProvider:input_type -> gitService.GitProvider
	0,  // 36: gitService.GitSensorService.AddRepo:input_type -> gitService.AddRepoRequest
	2,  // 37: gitService.GitSensorService.UpdateRepo:input_type -> gitService.GitMaterial
	3,  // 38: gitService.GitSensorService.SavePipelineMaterial:input_type -> gitService.SavePipelineMaterialRequest
	5,  // 39: gitService.GitSensorService.FetchChanges:input_type -> gitService.FetchScmChangesRequest
	10, // 40: gitService.GitSensorService.GetHeadForPipelineMaterials:input_type -> gitService.HeadRequest
	13, // 41: gitService.GitSensorService.GetCommitMetadata:input_type -> gitService.CommitMetadataRequest
	13, // 42: gitService.GitSensorService.GetCommitMetadataForPipelineMaterial:input_type -> gitService.CommitMetadataRequest
	13, // 43: gitService.GitSensorService.GetCommitInfoForTag:input_type -> gitService.CommitMetadataRequest
	14, // 44: gitService.GitSensorService.RefreshGitMaterial:input_type -> gitService.RefreshGitMaterialRequest
	18, // 45: gitService.GitSensorService.ReloadAllMaterial:input_type -> gitService.Empty
	16, // 46: gitService.GitSensorService.ReloadMaterial:input_type -> gitService.ReloadMaterialRequest
	19, // 47: gitService.GitSensorService.GetChangesInRelease:input_type -> gitService.ReleaseChangeRequest
	27, // 48: gitService.GitSensorService.GetWebhookData:input_type -> gitService.WebhookDataRequest
	29, // 49: gitService.GitSensorService.GetAllWebhookEventConfigForHost:input_type -> gitService.WebhookEventConfigRequest
	29, // 50: gitService.GitSensorService.GetWebhookEventConfig:input_type -> gitService.WebhookEventConfigRequest
	33, // 51: gitService.GitSensorService.GetWebhookPayloadDataForPipelineMaterialId:input_type -> gitService.WebhookPayloadDataRequest
	36, // 52: gitService.GitSensorService.GetWebhookPayloadFilterDataForPipelineMaterialId:input_type -> gitService.WebhookPayloadFilterDataRequest
	18, // 53: gitService.GitSensorService.SaveGitProvider:output_type -> gitService.Empty
	18, // 54: gitService.GitSensorService.AddRepo:output_type -> gitService.Empty
	18, // 55: gitService.GitSensorService.UpdateRepo:output_type -> gitService.Empty
	18, // 56: gitService.GitSensorService.SavePipelineMaterial:output_type -> gitService.Empty
	6,  // 57: gitService.GitSensorService.FetchChanges:output_type -> gitService.MaterialChangeResponse
	11, // 58: gitService.GitSensorService.GetHeadForPipelineMaterials:output_type -> gitService.GetHeadForPipelineMaterialsResponse
	7,  // 59: gitService.GitSensorService.GetCommitMetadata:output_type -> gitService.GitCommit
	7,  // 60: gitService.GitSensorService.GetCommitMetadataForPipelineMaterial:output_type -> gitService.GitCommit
	7,  // 61: gitService.GitSensorService.GetCommitInfoForTag:output_type -> gitService.GitCommit
	15, // 62: gitService.GitSensorService.RefreshGitMaterial:output_type -> gitService.RefreshGitMaterialResponse
	18, // 63: gitService.GitSensorService.ReloadAllMaterial:output_type -> gitService.Empty
	17, // 64: gitService.GitSensorService.ReloadMaterial:output_type -> gitService.GenericResponse
	26, // 65: gitService.GitSensorService.GetChangesInRelease:output_type -> gitService.GitChanges
	28, // 66: gitService.GitSensorService.GetWebhookData:output_type -> gitService.WebhookAndCiData
	32, // 67: gitService.GitSensorService.GetAllWebhookEventConfigForHost:output_type -> gitService.WebhookEventConfigResponse
	31, // 68: gitService.GitSensorService.GetWebhookEventConfig:output_type -> gitService.WebhookEventConfig
	35, // 69: gitService.GitSensorService.GetWebhookPayloadDataForPipelineMaterialId:output_type -> gitService.WebhookPayloadDataResponse
	38, // 70: gitService.GitSensorService.GetWebhookPayloadFilterDataForPipelineMaterialId:output_type -> gitService.WebhookPayloadFilterDataResponse
	53, // [53:71] is the sub-list for method output_type
	35, // [35:53] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_gitSensor_service_proto_init() }
func file_gitSensor_service_proto_init() {
	if File_gitSensor_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitSensor_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePipelineMaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiPipelineMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchScmChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadForPipelineMaterialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiPipelineMaterialBean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshGitMaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshGitMaterialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadMaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Committer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookAndCiData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookEventConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookEventSelectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookEventConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookEventConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPayloadDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPayloadDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPayloadFilterDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPayloadFilterDataSelectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitSensor_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPayloadFilterDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitSensor_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitSensor_service_proto_goTypes,
		DependencyIndexes: file_gitSensor_service_proto_depIdxs,
		MessageInfos:      file_gitSensor_service_proto_msgTypes,
	}.Build()
	File_gitSensor_service_proto = out.File
	file_gitSensor_service_proto_rawDesc = nil
	file_gitSensor_service_proto_goTypes = nil
	file_gitSensor_service_proto_depIdxs = nil
}
