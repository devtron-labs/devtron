syntax = "proto3";

package gitService;

option go_package = "github.com/devtron-labs/protos/gitSensor";

import "google/protobuf/timestamp.proto";

message AddRepoRequest {
  repeated GitMaterial gitMaterialList = 1;
}

message GitProvider {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string userName = 4;
  string password = 5;
  string sshPrivateKey = 6;
  string accessToken = 7;
  string authMode = 8;
  bool active = 9;
}

message GitMaterial {
  int64 id = 1;
  int64 gitProviderId = 2;
  string url = 3;
  bool fetchSubmodules = 4;
  string name = 5;
  string checkoutLocation = 6;
  bool checkoutStatus = 7;
  string checkoutMsgAny = 8;
  bool deleted = 9;
}

message SavePipelineMaterialRequest {
  repeated CiPipelineMaterial ciPipelineMaterials = 1;
}

message CiPipelineMaterial {
  int64 id = 1;
  int64 gitMaterialId = 2;
  string type = 3;
  string value= 4;
  bool active = 5;
  string lastSeenHash = 6;
  string commitAuthor = 7;
  google.protobuf.Timestamp commitDate = 8;
  string commitHistory = 9;
  bool errored = 10;
  string errorMsg = 11;
}

message FetchScmChangesRequest {
  int64 pipelineMaterialId = 1;
  string from = 2;
  string to = 3;
  int64 count = 4;
}

message MaterialChangeResponse {
  repeated GitCommit commits = 1;
  google.protobuf.Timestamp lastFetchTime = 2;
  bool isRepoError = 3;
  string repoErrorMsg = 4;
  bool isBranchError = 5;
  string branchErrorMsg = 6;
}

message GitCommit {
  string Commit = 1;
  string Author = 2;
  google.protobuf.Timestamp Date = 3;
  string Message = 4;
  repeated string Changes = 5;
  repeated FileStat FileStats = 6;
  WebhookData WebhookData = 7;
}

message FileStat {
  string Name = 1;
  int64 Addition = 2;
  int64 Deletion = 3;
}

message WebhookData {
  int64 id = 1;
  string eventActionType = 2;
  map<string, string> data = 3;
}

message HeadRequest {
  repeated int64 materialIds = 1;
}

message GetHeadForPipelineMaterialsResponse {
  repeated CiPipelineMaterialBean materials = 1;
}

message CiPipelineMaterialBean {
  int64 Id = 1;
  int64 GitMaterialId = 2;
  string Type = 3;
  string Value = 4;
  bool Active = 5;
  GitCommit GitCommit = 6;
  map<string, string> ExtraEnvironmentVariables = 7;
}

message CommitMetadataRequest {
  int64 pipelineMaterialId = 1;
  string gitHash = 2;
  string gitTag = 3;
  string branchName = 4;
}

message RefreshGitMaterialRequest {
  int64 gitMaterialId = 1;
}

message RefreshGitMaterialResponse {
  string message = 1;
  string errorMsg = 2;
  google.protobuf.Timestamp lastFetchTime = 3;
}

message ReloadMaterialRequest {
  int64 materialId = 1;
}

message GenericResponse {
  string message = 1;
}

message Empty {
}

message ReleaseChangeRequest {
  int64 pipelineMaterialId = 1;
  string oldCommit = 2;
  string newCommit = 3;
}

message Hash {
  string Long = 1;
  string Short = 2;
}

message Tree {
  string Long = 1;
  string Short = 2;
}

message Author {
  string Name = 1;
  string Email = 2;
  google.protobuf.Timestamp Date = 3;
}

message Committer {
  string Name = 1;
  string Email = 2;
  google.protobuf.Timestamp Date = 3;
}

message Tag {
  string Name = 1;
  google.protobuf.Timestamp Date = 2;
}

message Commit {
  Hash Hash = 1;
  Tree Tree = 2;
  Author Author = 3;
  Committer Committer = 4;
  Tag Tag = 5;
  string Subject = 6;
  string Body = 7;
}

message GitChanges {
  repeated Commit Commits = 1;
  repeated FileStat FileStats = 2;
}

message WebhookDataRequest {
  int64 id = 1;
  int64 ciPipelineMaterialId = 2;
}

message WebhookAndCiData {
  map<string, string> extraEnvironmentVariables = 1;
  WebhookData webhookData = 2;
}

message WebhookEventConfigRequest {
  int64 gitHostId = 1;
  int64 eventId = 2;
}

message WebhookEventSelectors {
  int64 id = 1;
  int64 eventId = 2;
  string name = 3;
  bool toShow = 4;
  bool toShowInCiFilter = 5;
  string fixValue = 6;
  string possibleValues = 7;
  bool isActive = 8;
  google.protobuf.Timestamp createdOn = 9;
  google.protobuf.Timestamp updatedOn = 10;
}

message WebhookEventConfig {
  int64 id = 1;
  int64 gitHostId = 2;
  string name = 3;
  string eventTypesCsv = 4;
  string actionType = 5;
  bool isActive = 6;
  google.protobuf.Timestamp createdOn = 7;
  google.protobuf.Timestamp updatedOn = 8;
  repeated WebhookEventSelectors selectors = 9;
}

message WebhookEventConfigResponse {
  repeated WebhookEventConfig webhookEventConfig = 1;
}

message WebhookPayloadDataRequest {
  int64 ciPipelineMaterialId = 1;
  int64 limit = 2;
  int64 offset = 3;
  string eventTimeSortOrder = 4;
}

message WebhookPayload {
  int64 parsedDataId = 1;
  google.protobuf.Timestamp eventTime = 2;
  int64 matchedFiltersCount = 3;
  int64 failedFiltersCount = 4;
  bool matchedFilters = 5;
}

message WebhookPayloadDataResponse {
  map<string, string> filters = 1;
  string repositoryUrl = 2;
  repeated WebhookPayload payloads = 3;
}

message WebhookPayloadFilterDataRequest {
  int64 ciPipelineMaterialId = 1;
  int64 parsedDataId = 2;
}

message WebhookPayloadFilterDataSelectorResponse {
  string selectorName = 1;
  string selectorCondition = 2;
  string selectorValue = 3;
  bool match = 4;
}

message WebhookPayloadFilterDataResponse {
  int64 payloadId = 1;
  repeated WebhookPayloadFilterDataSelectorResponse selectorsData = 2;
  string payloadJson = 3;
}

service GitSensorService {

  // Saves Git credentials
  rpc SaveGitProvider(GitProvider) returns (Empty);

  // Add Repo
  rpc AddRepo(AddRepoRequest) returns (Empty);

  // Update Repo
  rpc UpdateRepo(GitMaterial) returns (Empty);

  // Save CI pipeline material
  rpc SavePipelineMaterial(SavePipelineMaterialRequest) returns (Empty);

  // Fetch SCM changes
  rpc FetchChanges(FetchScmChangesRequest) returns (MaterialChangeResponse);

  // Get Head for pipeline materials
  rpc GetHeadForPipelineMaterials(HeadRequest) returns (GetHeadForPipelineMaterialsResponse);

  // Get commit metadata
  rpc GetCommitMetadata(CommitMetadataRequest) returns (GitCommit);

  // Get commit metadata for pipeline material
  rpc GetCommitMetadataForPipelineMaterial(CommitMetadataRequest) returns (GitCommit);

  // Get commit info for Tag
  rpc GetCommitInfoForTag(CommitMetadataRequest) returns (GitCommit);

  // Refresh git material
  rpc RefreshGitMaterial(RefreshGitMaterialRequest) returns (RefreshGitMaterialResponse);

  // Reload all material
  rpc ReloadAllMaterial(Empty) returns (Empty);

  // Reload a specific material
  rpc ReloadMaterial(ReloadMaterialRequest) returns (GenericResponse);

  // Get changes in release
  rpc GetChangesInRelease(ReleaseChangeRequest) returns (GitChanges);

  // Get webhook data
  rpc GetWebhookData(WebhookDataRequest) returns (WebhookAndCiData);

  // Get all webhook event config for host
  rpc GetAllWebhookEventConfigForHost(WebhookEventConfigRequest) returns (WebhookEventConfigResponse);

  // Get webhook event config
  rpc GetWebhookEventConfig(WebhookEventConfigRequest) returns (WebhookEventConfig);

  // Get webhook payload data by pipeline material id
  rpc GetWebhookPayloadDataForPipelineMaterialId(WebhookPayloadDataRequest) returns (WebhookPayloadDataResponse);

  // Get webhook payload data by pipeline material id with filter
  rpc GetWebhookPayloadFilterDataForPipelineMaterialId(WebhookPayloadFilterDataRequest) returns (WebhookPayloadFilterDataResponse);
}