// Code generated by mockery v2.31.4. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/devtron-labs/devtron/api/helm-app"

	mock "github.com/stretchr/testify/mock"
)

// HelmAppClient is an autogenerated mock type for the HelmAppClient type
type HelmAppClient struct {
	mock.Mock
}

// DeleteApplication provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) DeleteApplication(ctx context.Context, in *client.ReleaseIdentifier) (*client.UninstallReleaseResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.UninstallReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.ReleaseIdentifier) (*client.UninstallReleaseResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.ReleaseIdentifier) *client.UninstallReleaseResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UninstallReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.ReleaseIdentifier) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppDetail provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) GetAppDetail(ctx context.Context, in *client.AppDetailRequest) (*client.AppDetail, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.AppDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppDetailRequest) (*client.AppDetail, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppDetailRequest) *client.AppDetail); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AppDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AppDetailRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppStatus provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) GetAppStatus(ctx context.Context, in *client.AppDetailRequest) (*client.AppStatus, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.AppStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppDetailRequest) (*client.AppStatus, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppDetailRequest) *client.AppStatus); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AppStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AppDetailRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentDetail provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) GetDeploymentDetail(ctx context.Context, in *client.DeploymentDetailRequest) (*client.DeploymentDetailResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.DeploymentDetailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.DeploymentDetailRequest) (*client.DeploymentDetailResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.DeploymentDetailRequest) *client.DeploymentDetailResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.DeploymentDetailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.DeploymentDetailRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentHistory provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) GetDeploymentHistory(ctx context.Context, in *client.AppDetailRequest) (*client.HelmAppDeploymentHistory, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.HelmAppDeploymentHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppDetailRequest) (*client.HelmAppDeploymentHistory, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppDetailRequest) *client.HelmAppDeploymentHistory); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.HelmAppDeploymentHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AppDetailRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDesiredManifest provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) GetDesiredManifest(ctx context.Context, in *client.ObjectRequest) (*client.DesiredManifestResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.DesiredManifestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.ObjectRequest) (*client.DesiredManifestResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.ObjectRequest) *client.DesiredManifestResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.DesiredManifestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.ObjectRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotes provides a mock function with given fields: ctx, request
func (_m *HelmAppClient) GetNotes(ctx context.Context, request *client.InstallReleaseRequest) (*client.ChartNotesResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *client.ChartNotesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.InstallReleaseRequest) (*client.ChartNotesResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.InstallReleaseRequest) *client.ChartNotesResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ChartNotesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.InstallReleaseRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValuesYaml provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) GetValuesYaml(ctx context.Context, in *client.AppDetailRequest) (*client.ReleaseInfo, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.ReleaseInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppDetailRequest) (*client.ReleaseInfo, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppDetailRequest) *client.ReleaseInfo); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ReleaseInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AppDetailRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hibernate provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) Hibernate(ctx context.Context, in *client.HibernateRequest) (*client.HibernateResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.HibernateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.HibernateRequest) (*client.HibernateResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.HibernateRequest) *client.HibernateResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.HibernateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.HibernateRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallRelease provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) InstallRelease(ctx context.Context, in *client.InstallReleaseRequest) (*client.InstallReleaseResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.InstallReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.InstallReleaseRequest) (*client.InstallReleaseResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.InstallReleaseRequest) *client.InstallReleaseResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.InstallReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.InstallReleaseRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallReleaseWithCustomChart provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) InstallReleaseWithCustomChart(ctx context.Context, in *client.HelmInstallCustomRequest) (*client.HelmInstallCustomResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.HelmInstallCustomResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.HelmInstallCustomRequest) (*client.HelmInstallCustomResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.HelmInstallCustomRequest) *client.HelmInstallCustomResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.HelmInstallCustomResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.HelmInstallCustomRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsReleaseInstalled provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) IsReleaseInstalled(ctx context.Context, in *client.ReleaseIdentifier) (*client.BooleanResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.BooleanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.ReleaseIdentifier) (*client.BooleanResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.ReleaseIdentifier) *client.BooleanResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BooleanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.ReleaseIdentifier) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplication provides a mock function with given fields: ctx, req
func (_m *HelmAppClient) ListApplication(ctx context.Context, req *client.AppListRequest) (client.ApplicationService_ListApplicationsClient, error) {
	ret := _m.Called(ctx, req)

	var r0 client.ApplicationService_ListApplicationsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppListRequest) (client.ApplicationService_ListApplicationsClient, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.AppListRequest) client.ApplicationService_ListApplicationsClient); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.ApplicationService_ListApplicationsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.AppListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackRelease provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) RollbackRelease(ctx context.Context, in *client.RollbackReleaseRequest) (*client.BooleanResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.BooleanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.RollbackReleaseRequest) (*client.BooleanResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.RollbackReleaseRequest) *client.BooleanResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BooleanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.RollbackReleaseRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateChart provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) TemplateChart(ctx context.Context, in *client.InstallReleaseRequest) (*client.TemplateChartResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.TemplateChartResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.InstallReleaseRequest) (*client.TemplateChartResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.InstallReleaseRequest) *client.TemplateChartResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TemplateChartResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.InstallReleaseRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnHibernate provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) UnHibernate(ctx context.Context, in *client.HibernateRequest) (*client.HibernateResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.HibernateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.HibernateRequest) (*client.HibernateResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.HibernateRequest) *client.HibernateResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.HibernateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.HibernateRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) UpdateApplication(ctx context.Context, in *client.UpgradeReleaseRequest) (*client.UpgradeReleaseResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.UpgradeReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpgradeReleaseRequest) (*client.UpgradeReleaseResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.UpgradeReleaseRequest) *client.UpgradeReleaseResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UpgradeReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.UpgradeReleaseRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationWithChartInfo provides a mock function with given fields: ctx, in
func (_m *HelmAppClient) UpdateApplicationWithChartInfo(ctx context.Context, in *client.InstallReleaseRequest) (*client.UpgradeReleaseResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *client.UpgradeReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.InstallReleaseRequest) (*client.UpgradeReleaseResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.InstallReleaseRequest) *client.UpgradeReleaseResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UpgradeReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.InstallReleaseRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHelmAppClient creates a new instance of HelmAppClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelmAppClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HelmAppClient {
	mock := &HelmAppClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
