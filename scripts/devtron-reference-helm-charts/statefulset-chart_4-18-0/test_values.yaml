appLabels:
  test: thyjhgfv
containerSpec:
  lifecycle:
    enabled: true
    preStop:
      exec:
        command:
          - sleep
          - "10"
    postStart:
      httpGet:
        host: example.com
        path: /example
        port: 90
imagePullSecrets:
  - test1
  - test2
replicaCount: 1
MinReadySeconds: 5
MaxSurge: 1
MaxUnavailable: 0
GracePeriod: 30
ContainerPort:
  - name: app
    port: 8080
    servicePort: 80
    envoyTimeout: 15
    targetPort: 8080
    envoyPort: 8799
    useHTTP2: false
    supportStreaming: false
    idleTimeout: 1800s
    servicemonitor:
      enabled: true
      path: /abc
      scheme: http
      interval: 30s
      scrapeTimeout: 20s
      metricRelabelings:
        - sourceLabels:
            - namespace
          regex: (.*)
          replacement: myapp
          targetLabel: target_namespace
  - name: app1
    port: 8090
    targetPort: 1234
    servicePort: 8080
    useGRPC: true
    servicemonitor:
      enabled: true
  - name: app2
    port: 8091
    servicePort: 8081
    useGRPC: true
pauseForSecondsBeforeSwitchActive: 30
waitForSecondsBeforeScalingDown: 30
autoPromotionSeconds: 30
image:
  pullPolicy: IfNotPresent
autoscaling:
  enabled: true
  MinReplicas: 1
  MaxReplicas: 2
  TargetCPUUtilizationPercentage: 90
  TargetMemoryUtilizationPercentage: 80
  behavior: {}
  extraMetrics: []
EnvVariablesFromSecretKeys:
  - name: ENV_NAME
    secretName: SECRET_NAME
    keyName: SECRET_KEY
EnvVariablesFromCongigMapKeys:
  - name: ENV_NAME
    configMapName: CONFIG_MAP_NAME
    keyName: CONFIG_MAP_KEY
statefulSetConfig:
  labels:
    app: example
  annotations:
    example.com/version: "1.0"
  serviceName: test-service-headless-statefulset
  podManagementPolicy: OrderedReady
  revisionHistoryLimit: 3
  updateStrategy:
    type: RollingUpdate
    partition: 2
  mountPath: /tmp
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        labels:
          app: myapp
      spec:
        accessModes:
          - ReadWriteOnce
          - ReadWriteOnce
          - ReadWriteOnce
        dataSource:
          kind: Snapshot
          apiGroup: snapshot.storage.k8s.io
          name: my-snapshot
        resources:
          requests:
            storage: 10Gi
          limits:
            storage: 20Gi
        selector:
          matchLabels:
            app: myapp
        volumeMode: Filesystem
        volumeName: my-pv
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: pvc-logs
        labels:
          app: myapp
      spec:
        accessModes:
          - ReadWriteMany
        dataSourceRef:
          kind: Secret
          apiGroup: v1
          name: my-secret
        resources:
          requests:
            storage: 5Gi
        selector:
          matchExpressions:
            - key: environment
              operator: In
              values:
                - production
        volumeMode: Block
        volumeName: my-pv
secret:
  enabled: false
service:
  type: ClusterIP
  enabled: true
  annotations: {}
server:
  deployment:
    image_tag: 1-95af053
    image: ""
deploymentType: RECREATE
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: zone
    whenUnsatisfiable: DoNotSchedule
    autoLabelSelector: true
    customLabelSelector:
      foo: bar
EnvVariables:
  - name: FLASK_ENV
    value: qa
LivenessProbe:
  Path: /
  port: 8080
  initialDelaySeconds: 20
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
  failureThreshold: 3
  httpHeaders:
    - name: Custom-Header
      value: abc
    - name: Custom-Header2
      value: xyz
ReadinessProbe:
  Path: /
  port: 8080
  initialDelaySeconds: 20
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
  failureThreshold: 3
  httpHeaders:
    - name: Custom-Header
      value: abc
prometheus:
  release: monitoring
servicemonitor:
  additionalLabels: {}
prometheusRule:
  enabled: true
  additionalLabels: {}
  namespace: ""
  rules:
    - alert: TooMany500s
      expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) /
        sum(nginx_ingress_controller_requests) ) > 5
      for: 1m
      labels:
        severity: critical
      annotations:
        description: Too many 5XXs
        summary: More than 5% of the all requests did return 5XX, this require your
          attention
    - alert: TooMany400s
      expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) /
        sum(nginx_ingress_controller_requests) ) > 5
      for: 1m
      labels:
        severity: critical
      annotations:
        description: Too many 4XXs
        summary: More than 5% of the all requests did return 4XX, this require your
          attention
winterSoldier:
  apiVersion: pincher.devtron.ai/v1alpha1
  enabled: true
  annotations: {}
  labels: {}
  timeRangesWithZone:
    timeZone: Asia/Kolkata
    timeRanges:
      - timeFrom: 00:00
        timeTo: 23:59:59
        weekdayFrom: Sat
        weekdayTo: Sun
      - timeFrom: 00:00
        timeTo: 08:00
        weekdayFrom: Mon
        weekdayTo: Fri
      - timeFrom: 20:00
        timeTo: 23:59:59
        weekdayFrom: Mon
        weekdayTo: Fri
  action: scale
  targetReplicas: []
  type: StatefulSet
  fieldSelector:
    - AfterTime(AddTime(ParseTime({{metadata.creationTimestamp}},
      '2006-01-02T15:04:05Z'), '5m'), Now())
ingress:
  enabled: true
  className: nginx
  annotations: {}
  hosts:
    - host: chart-example1.local
      pathType: ImplementationSpecific
      paths:
        - /example1
    - host: chart-example2.local
      pathType: ImplementationSpecific
      paths:
        - /example2
        - /example2/healthz
  tls: []
ingressInternal:
  enabled: false
  className: nginx-internal
  annotations: {}
  hosts:
    - host: chart-example1.internal
      pathType: ImplementationSpecific
      paths:
        - /example1
    - host: chart-example2.internal
      pathType: ImplementationSpecific
      paths:
        - /example2
        - /example2/healthz
  tls: []
dbMigrationConfig:
  enabled: false
args:
  enabled: false
  value: []
resources:
  limits:
    cpu: 1m
    memory: 200Mi
  requests:
    cpu: 0.10m
    memory: 100Mi
volumeMounts:
  - name: log-volume
    mountPath: /var/log
  - name: pvc-logs
    mountPath: /test
volumes:
  - name: log-volume
    emptyDir: {}
nodeSelector: {}
orchestrator.deploymant.algo: 1
ConfigMaps:
  enabled: false
  maps: []
ConfigSecrets:
  enabled: false
  secrets:
    - name: config-secret-1
      type: environment
      external: false
      externalType: AWSSecretsManager
      esoSecretData:
        secretStore:
          aws:
            service: SecretsManager
            region: us-east-1
            auth:
              secretRef:
                accessKeyIDSecretRef:
                  name: awssm-secret
                  key: access-key
                secretAccessKeySecretRef:
                  name: awssm-secret
                  key: secret-access-key
        esoData:
          - secretKey: prod-mysql-password
            key: secrets/prod-mysql-secrets
            property: prodPassword
          - secretKey: prod-mysql-password
            key: secrets/prod-mysql-secrets
            property: prodPassword
          - secretKey: prod-mysql-password
            key: secrets/prod-mysql-secrets
            property: prodPassword
          - secretKey: prod-mysql-password
            key: secrets/prod-mysql-secrets
            property: prodPassword
      data:
        key1: key1value-1
        key2: key2value-1
        key3: key3value-1
    - name: config-secret-2
      type: environment
      external: false
      externalType: ESO_HashiCorpVault
      esoSecretData:
        secretStore:
          vault:
            server: http://my.vault.server:8200
            path: secret
            version: v2
            auth:
              tokenSecretRef:
                name: vault-token
                key: token
        esoData:
          - secretKey: prod-mysql-password
            key: secrets/prod-mysql-secrets
            property: prodPassword
          - secretKey: prod-mysql-password
            key: secrets/prod-mysql-secrets
            property: prodPassword
          - secretKey: prod-mysql-password
            key: secrets/prod-mysql-secrets
            property: prodPassword
      date:
        key1: key1value-1
        key2: key2value-1
        key3: key3value-1
initContainers:
  - command:
      - sh
      - -c
      - chown -R 1000:1000 logs
    reuseContainerImage: true
    volumeMounts:
      - mountPath: /usr/local/airflow/logs
        name: logs-data
    securityContext:
      privileged: true
      runAsUser: 1000
      runAsGroup: 3000
      fsGroup: 2000
  - name: init-migrate
    image: busybox:latest
    command:
      - sh
      - -c
      - chown -R 1000:1000 logs
    volumeMounts:
      - mountPath: /usr/local/airflow/logs
        name: logs-data
    securityContext:
      capabilities:
        drop:
          - ALL
containers: []
rawYaml: []
containerExtraSpecs: {}
podExtraSpecs: {}
envoyproxy:
  image: envoyproxy/envoy:v1.14.1
  configMapName: ""
  lifecycle: {}
  resources:
    limits:
      cpu: 50m
      memory: 50Mi
    requests:
      cpu: 50m
      memory: 50Mi
podDisruptionBudget: {}
tolerations: []
appMetrics: true
serviceAccount:
  create: false
  name: test1
  annotations:
    kubernetes.io/service-account.name: build-robot
containerSecurityContext:
  allowPrivilegeEscalation: false
privileged: true
hostAliases: []
