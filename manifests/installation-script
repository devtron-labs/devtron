LTAG="v0.6.19";
REPO_RAW_URL="https://raw.githubusercontent.com/devtron-labs/devtron/";

operatorSecret = kubectl get secret -n devtroncd devtron-operator-secret;
operatorConfigMap = kubectl get cm -n devtroncd devtron-operator-cm;
postgresqlPassword = jsonSelect(operatorSecret, "data.POSTGRESQL_PASSWORD");
webHookToken = jsonSelect(operatorSecret, "data.WEBHOOK_TOKEN");
postgresSecret = kubectl get secret -n devtroncd postgresql-postgresql;
enableLegacyApi = jsonSelect(operatorConfigMap, "data.ENABLE_LEGACY_API");
helmInstallation = jsonSelect(operatorConfigMap, "data.INSTALLATION_THROUGH_HELM");

baseURLScheme = jsonSelect(operatorConfigMap, "data.BASE_URL_SCHEME");
baseURL = jsonSelect(operatorConfigMap, "data.BASE_URL");
dexConfig = jsonSelect(operatorConfigMap, "data.DEX_CONFIG");
prometheusUrl = jsonSelect(operatorConfigMap, "data.PROMETHEUS_URL");
setupDevtronIngress = jsonSelect(operatorConfigMap, "data.ENABLE_INGRESS");
devtronIngressAnnotations = jsonSelect(operatorConfigMap, "data.INGRESS_ANNOTATIONS");

passwordGen = `#!/bin/bash
openssl rand -base64 20 | base64 | tr -d ':\n' | tr -d '=' | base64 | tr -d ':\n'`;

shebang = `#!/bin/bash
`;
sleep50 = shebang + `
sleep 50`;

base64EncoderPrefix = `#!/bin/bash
`;
base64EncoderSuffix = ` | base64 | tr -d ':\n'`;

base64DecoderPrefix = `#!/bin/bash
`;
base64DecoderSuffix = ` | base64 -d | tr -d ':\n'`;

existingPostgresSecret = jsonSelect(postgresSecret, "data.postgresql-password");

if existingPostgresSecret {
    postgresqlPassword = existingPostgresSecret;
}

log("postgres pwd");
log(existingPostgresSecret);
log(existingPostgresSecretPlain);

if !postgresqlPassword {
	postgresqlPassword = shellScript passwordGen;
}
if !baseURL {
	log("baseURL is mandatory");
}

if !defaultBuildLogsBucket {
  defaultBuildLogsBucket = "devtron-ci-log" ;
}

if !defaultCacheBucket {
  defaultCacheBucket = "devtron-ci-cache" ;
}

######Generating raw urls
argocdResource_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/argocd-resource.json";
devtronHousekeeping_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/devtron-housekeeping.yaml";
dashboard_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/dashboard.yaml";
gitSensor_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/gitsensor.yaml";
kubelink_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/kubelink.yaml";
kubewatch_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/kubewatch.yaml";
lens_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/lens.yaml";
migrator_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/migrator.yaml";
natsServer_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/nats-server.yaml";
devtron_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/devtron.yaml";
devtronIngress_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/devtron-ingress.yaml";
if enableLegacyApi=="true" {
devtronIngress_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/devtron-ingress-legacy.yaml";
}
log(devtronIngress_raw);
serviceAccount_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/serviceaccount.yaml";
namespace_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/namespace.yaml";
rollout_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/rollout.yaml";

######Downloading the manifests
argocdResource = download(argocdResource_raw);
devtronHousekeeping = download(devtronHousekeeping_raw);
dashboard = download(dashboard_raw);
gitSensor = download(gitSensor_raw);
kubelink = download(kubelink_raw);
kubewatch = download(kubewatch_raw);
lens = download(lens_raw);
migrator = download(migrator_raw);
natsServer = download(natsServer_raw);
devtron = download(devtron_raw);
devtronIngress = download(devtronIngress_raw);
serviceAccount = download(serviceAccount_raw);
namespace = download(namespace_raw);
rollout = download(rollout_raw);

######Downloading the manifests

devtronHousekeepingOverride = kubectl get cm -n devtroncd devtron-housekeeping-override-cm;
dashboardOverride = kubectl get cm -n devtroncd dashboard-override-cm;
gitSensorOverride = kubectl get cm -n devtroncd git-sensor-override-cm;
kubelinkOverride = kubectl get cm -n devtroncd kubelink-override-cm;
kubewatchOverride = kubectl get cm -n devtroncd kubewatch-override-cm;
lensOverride = kubectl get cm -n devtroncd lens-override-cm;
migratorOverride = kubectl get cm -n devtroncd migrator-override-cm;
natsServerOverride = kubectl get cm -n devtroncd nats-server-override-cm;
devtronOverride = kubectl get cm -n devtroncd devtron-override-cm;
devtronIngressOverride = kubectl get cm -n devtroncd devtron-ingress-override-cm;
serviceAccountOverride = kubectl get cm -n devtroncd devtron-service-account-override-cm;
namespaceOverride = kubectl get cm -n devtroncd namespace-override-cm;
rolloutOverride = kubectl get cm -n devtroncd rollout-override-cm;

dashboardOverride = jsonSelect(dashboardOverride, "data.override");
gitSensorOverride = jsonSelect(gitSensorOverride, "data.override");
kubelinkOverride = jsonSelect(kubelinkOverride, "data.override");
kubewatchOverride = jsonSelect(kubewatchOverride, "data.override");
lensOverride = jsonSelect(lensOverride, "data.override");
migratorOverride = jsonSelect(migratorOverride, "data.override");
natsServerOverride = jsonSelect(natsServerOverride, "data.override");
devtronOverride = jsonSelect(devtronOverride, "data.override");
devtronIngressOverride = jsonSelect(devtronIngressOverride, "data.override");
serviceAccountOverride = jsonSelect(serviceAccountOverride, "data.override");
namespaceOverride = jsonSelect(namespaceOverride, "data.override");
rolloutOverride = jsonSelect(rolloutOverride, "data.override");

namespaces = kubectl apply namespace;
log("created namespaces");
sa = kubectl apply serviceAccount;
log("created service account");

pa = kubectl patch -n devtroncd cm/argocd-cm --type "application/json-patch+json" -p argocdResource;
log("executed argocd setup command");

#rollout
rollout = kubectl apply -n devtroncd rollout -u rolloutOverride;
log("executed rollout setup command");

#git-sensor
kubeYamlEdit(gitSensor, "data.PG_PASSWORD", postgresqlPassword, `/Secret//git-sensor-secret`);

#lens
kubeYamlEdit(lens, "data.PG_PASSWORD", postgresqlPassword, `/Secret//lens-secret`);

#migrator
#delete migrator job
migDelete = kubectl delete -n devtroncd job  postgresql-migrate-devtron postgresql-migrate-casbin postgresql-migrate-gitsensor devtron-housekeeping postgresql-migrate-lens postgresql-miscellaneous;
if !migDelete {
	log("migration job deletion failed");
}
kubeYamlEdit(migrator, "data.DB_PASSWORD", postgresqlPassword, `/Secret//postgresql-migrator`);
migrator = kubectl apply -n devtroncd migrator -u migratorOverride;
log("executed migrator setup command");

hasNatsServerPod = kubectl get pod -n devtroncd devtron-nats-0;
hasNatsServerPVC = kubectl get -n devtroncd pvc data-devtron-nats-0;
if hasNatsServerPod && !hasNatsServerPVC {
  log("Nats Server PVC not found");
  natsStsDelete = kubectl delete -n devtroncd sts devtron-nats;
  ignore = shellScript sleep50;
  natsServerWithPVC = kubectl apply -n devtroncd natsServer -u natsServerOverride;
  log("Nats PVC created and statefulset re-created");
}
else {
ignore = shellScript sleep50;
natsServer = kubectl apply -n devtroncd natsServer -u natsServerOverride;
}
log(hasNatsServerPod);
log("executed nats server setup");
hasNatsStreaming = kubectl get statefulset -n devtroncd devtron-stan;
if hasNatsStreaming {
  natsStreamingDelete = kubectl delete -n devtroncd sts devtron-stan;
  natsStreamingConfigDelete = kubectl delete -n devtroncd cm devtron-stan-config;
  natsStreamingServiceDelete = kubectl delete -n devtroncd svc devtron-stan;
  natsStreamingPVC = kubectl get pvc -n devtroncd devtron-stan-pvc-devtron-stan-0;
  natsStreamingPV = jsonSelect(natsStreamingPVC, "spec.volumeName");
  natsStreamingPVCDelete = kubectl delete -n devtroncd pvc devtron-stan-pvc-devtron-stan-0;
  natsStreamingPVDelete = kubectl delete -n devtroncd pv natsStreamingPV;
  log("devtron-stan was found and all it's resources deleted deleted");
}
log(hasNatsStreaming);

# devtron
hasDevtron = kubectl get deployment "devtron" -n devtroncd;
orchToken = shellScript passwordGen;
webHookToken = shellScript passwordGen;
dexSecret = shellScript passwordGen;
dexJwtKey = shellScript passwordGen;
dexCStoreKey = shellScript passwordGen;
externalCIAPISecret = shellScript passwordGen;

kubeYamlEdit(devtron, "data.PG_PASSWORD", postgresqlPassword, `/Secret//devtron-secret`);

if hasDevtron {
    devtronSecret = kubectl get secret -n devtroncd devtron-secret;
    texternalCIAPISecret = jsonSelect(devtronSecret, "data.EXTERNAL_CI_API_SECRET");
    twebHookToken = jsonSelect(devtronSecret, "data.WEBHOOK_TOKEN");
    torchToken = jsonSelect(devtronSecret, "data.ORCH_TOKEN");
    tdexSecret = jsonSelect(devtronSecret, "data.DEX_SECRET");
    tdexJwtKey = jsonSelect(devtronSecret, "data.DEX_JWTKEY");
    tdexCStoreKey = jsonSelect(devtronSecret, "data.DEX_CSTOREKEY");
}

if texternalCIAPISecret {
    externalCIAPISecret = texternalCIAPISecret;
}
if twebHookToken {
    webHookToken = twebHookToken;
}
if torchToken {
    orchToken = torchToken;
}
if tdexSecret {
    dexSecret = tdexSecret;
}
if tdexJwtKey {
    dexJwtKey = tdexJwtKey;
}
if tdexCStoreKey {
    dexCStoreKey = tdexCStoreKey;
}


kubeYamlEdit(devtron, "data.EXTERNAL_CI_API_SECRET", externalCIAPISecret, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.WEBHOOK_TOKEN", webHookToken, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.ORCH_TOKEN", orchToken, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_SECRET", dexSecret, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_JWTKEY", dexJwtKey, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_CSTOREKEY", dexCStoreKey, `/Secret//devtron-secret`);

if helmInstallation {
  kubeYamlDelete(devtron, filter=`/Service//devtron-service`);
}

if !helmInstallation {
  if !setupDevtronIngress {
    kubeYamlEdit(devtron, "spec.type", "LoadBalancer", `/Service//devtron-service`);
  }
}

devtron = kubectl apply -n devtroncd devtron -u devtronOverride;
log("executed devtron setup");

if !helmInstallation {
  if devtronIngressAnnotations {
      log("editing ingress");
    kubeYamlEdit(devtronIngress, "metadata.annotations", devtronIngressAnnotations, `extensions/Ingress//devtron-ingress`, "asObject");
  }

  if setupDevtronIngress {
    log("fetch ingress");
    existingIngress = kubectl get -n devtroncd ing devtron-ingress;
  }

  if existingIngress {
    annotations = jsonSelect(existingIngress, "metadata.annotations");
  }

  if annotations {
    kubeYamlEdit(devtronIngress, "metadata.annotations", annotations, `extensions/Ingress//devtron-ingress`, "asObject");
  }

  if setupDevtronIngress {
    log("setup ingress");
    log(devtronIngress);
    devtronIngress = kubectl apply -n devtroncd devtronIngress -u devtronIngressOverride;
  }

  log("executed devtron ingress setup");
}

if !helmInstallation {
  dashboard = kubectl apply -n devtroncd dashboard -u dashboardOverride;
  log("executed dashboard setup");
}
gitSensor = kubectl apply -n devtroncd gitSensor -u gitSensorOverride;
log("executed git sensor setup");
##imageScanner = kubectl apply -n devtroncd imageScanner -u imageScannerOverride;
log("executed image scanner setup");
if !helmInstallation {
  kubelink = kubectl apply -n devtroncd kubelink -u kubelinkOverride;
  log("executed kubelink setup");
}
kubewatch = kubectl apply -n devtroncd kubewatch -u kubewatchOverride;
log("executed kubewatch setup");
lens = kubectl apply -n devtroncd lens -u lensOverride;
log("executed lens setup");

## Applying Housekeeping Job
appHousekeeping = kubectl apply -n devtroncd devtronHousekeeping -u devtronHousekeepingOverride;
log("executed devtron-housekeeping setup");
