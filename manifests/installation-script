LTAG="remove-kubewatch";
REPO_RAW_URL="https://raw.githubusercontent.com/jatin-jangir/devtron/";

operatorSecret = kubectl get secret -n devtroncd devtron-operator-secret;
operatorConfigMap = kubectl get cm -n devtroncd devtron-operator-cm;
postgresqlPassword = jsonSelect(operatorSecret, "data.POSTGRESQL_PASSWORD");
webHookToken = jsonSelect(operatorSecret, "data.WEBHOOK_TOKEN");
setupDevtronIngress = jsonSelect(operatorConfigMap, "data.ENABLE_INGRESS");
devtronIngressAnnotations = jsonSelect(operatorConfigMap, "data.INGRESS_ANNOTATIONS");

passwordGen = `#!/bin/bash
openssl rand -base64 20 | base64 | tr -d ':\n' | tr -d '=' | base64 | tr -d ':\n'`;




if !baseURL {
	log("baseURL is mandatory");
}

if !defaultBuildLogsBucket {
  defaultBuildLogsBucket = "devtron-ci-log" ;
}

if !defaultCacheBucket {
  defaultCacheBucket = "devtron-ci-cache" ;
}

######Generating raw urls
devtron_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/devtron.yaml";

######Downloading the manifests
devtron = download(devtron_raw);

devtronOverride = kubectl get cm -n devtroncd devtron-override-cm;

devtronOverride = jsonSelect(devtronOverride, "data.override");


# devtron
hasDevtron = kubectl get deployment "devtron" -n devtroncd;
orchToken = shellScript passwordGen;
webHookToken = shellScript passwordGen;
dexSecret = shellScript passwordGen;
dexJwtKey = shellScript passwordGen;
dexCStoreKey = shellScript passwordGen;
externalCIAPISecret = shellScript passwordGen;

if hasDevtron {
    devtronSecret = kubectl get secret -n devtroncd devtron-secret;
    texternalCIAPISecret = jsonSelect(devtronSecret, "data.EXTERNAL_CI_API_SECRET");
    twebHookToken = jsonSelect(devtronSecret, "data.WEBHOOK_TOKEN");
    torchToken = jsonSelect(devtronSecret, "data.ORCH_TOKEN");
    tdexSecret = jsonSelect(devtronSecret, "data.DEX_SECRET");
    tdexJwtKey = jsonSelect(devtronSecret, "data.DEX_JWTKEY");
    tdexCStoreKey = jsonSelect(devtronSecret, "data.DEX_CSTOREKEY");
}

if texternalCIAPISecret {
    externalCIAPISecret = texternalCIAPISecret;
}
if twebHookToken {
    webHookToken = twebHookToken;
}
if torchToken {
    orchToken = torchToken;
}
if tdexSecret {
    dexSecret = tdexSecret;
}
if tdexJwtKey {
    dexJwtKey = tdexJwtKey;
}
if tdexCStoreKey {
    dexCStoreKey = tdexCStoreKey;
}

kubeYamlEdit(devtron, "data.EXTERNAL_CI_API_SECRET", externalCIAPISecret, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.WEBHOOK_TOKEN", webHookToken, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.ORCH_TOKEN", orchToken, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_SECRET", dexSecret, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_JWTKEY", dexJwtKey, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_CSTOREKEY", dexCStoreKey, `/Secret//devtron-secret`);

devtron = kubectl apply -n devtroncd devtron -u devtronOverride;
log("executed devtron setup");