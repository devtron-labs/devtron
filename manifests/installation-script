LTAG="v0.6.28";
REPO_RAW_URL="https://raw.githubusercontent.com/devtron-labs/devtron/";

operatorSecret = kubectl get secret -n devtroncd devtron-operator-secret;
operatorConfigMap = kubectl get cm -n devtroncd devtron-operator-cm;
postgresqlPassword = jsonSelect(operatorSecret, "data.POSTGRESQL_PASSWORD");
webHookToken = jsonSelect(operatorSecret, "data.WEBHOOK_TOKEN");
postgresSecret = kubectl get secret -n devtroncd postgresql-postgresql;
helmInstallation = jsonSelect(operatorConfigMap, "data.INSTALLATION_THROUGH_HELM");

baseURLScheme = jsonSelect(operatorConfigMap, "data.BASE_URL_SCHEME");
baseURL = jsonSelect(operatorConfigMap, "data.BASE_URL");
dexConfig = jsonSelect(operatorConfigMap, "data.DEX_CONFIG");
prometheusUrl = jsonSelect(operatorConfigMap, "data.PROMETHEUS_URL");

passwordGen = `#!/bin/bash
openssl rand -base64 20 | base64 | tr -d ':\n' | tr -d '=' | base64 | tr -d ':\n'`;

shebang = `#!/bin/bash
`;
sleep50 = shebang + `
sleep 50`;

base64EncoderPrefix = `#!/bin/bash
`;
base64EncoderSuffix = ` | base64 | tr -d ':\n'`;

base64DecoderPrefix = `#!/bin/bash
`;
base64DecoderSuffix = ` | base64 -d | tr -d ':\n'`;

existingPostgresSecret = jsonSelect(postgresSecret, "data.postgresql-password");

if existingPostgresSecret {
    postgresqlPassword = existingPostgresSecret;
}

log("postgres pwd");
log(existingPostgresSecret);
log(existingPostgresSecretPlain);

if !postgresqlPassword {
	postgresqlPassword = shellScript passwordGen;
}
if !baseURL {
	log("baseURL is mandatory");
}

if !defaultBuildLogsBucket {
  defaultBuildLogsBucket = "devtron-ci-log" ;
}

if !defaultCacheBucket {
  defaultCacheBucket = "devtron-ci-cache" ;
}

######Generating raw urls
argocdResource_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/argocd-resource.json";
devtronHousekeeping_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/devtron-housekeeping.yaml";
devtron_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/devtron.yaml";
serviceAccount_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/serviceaccount.yaml";
namespace_raw = REPO_RAW_URL + LTAG + "/manifests/yamls/namespace.yaml";

######Downloading the manifests
argocdResource = download(argocdResource_raw);
devtronHousekeeping = download(devtronHousekeeping_raw);
devtron = download(devtron_raw);
serviceAccount = download(serviceAccount_raw);
namespace = download(namespace_raw);

######Downloading the manifests

devtronHousekeepingOverride = kubectl get cm -n devtroncd devtron-housekeeping-override-cm;
devtronOverride = kubectl get cm -n devtroncd devtron-override-cm;
serviceAccountOverride = kubectl get cm -n devtroncd devtron-service-account-override-cm;
namespaceOverride = kubectl get cm -n devtroncd namespace-override-cm;

devtronOverride = jsonSelect(devtronOverride, "data.override");
serviceAccountOverride = jsonSelect(serviceAccountOverride, "data.override");
namespaceOverride = jsonSelect(namespaceOverride, "data.override");

namespaces = kubectl apply namespace;
log("created namespaces");
sa = kubectl apply serviceAccount;
log("created service account");

pa = kubectl patch -n devtroncd cm/argocd-cm --type "application/json-patch+json" -p argocdResource;
log("executed argocd setup command");


migDelete = kubectl delete -n devtroncd job devtron-housekeeping;
if !migDelete {
	log("migration job deletion failed");
}

# devtron
hasDevtron = kubectl get deployment "devtron" -n devtroncd;
orchToken = shellScript passwordGen;
webHookToken = shellScript passwordGen;
dexSecret = shellScript passwordGen;
dexJwtKey = shellScript passwordGen;
dexCStoreKey = shellScript passwordGen;
externalCIAPISecret = shellScript passwordGen;

kubeYamlEdit(devtron, "data.PG_PASSWORD", postgresqlPassword, `/Secret//devtron-secret`);

if hasDevtron {
    devtronSecret = kubectl get secret -n devtroncd devtron-secret;
    texternalCIAPISecret = jsonSelect(devtronSecret, "data.EXTERNAL_CI_API_SECRET");
    twebHookToken = jsonSelect(devtronSecret, "data.WEBHOOK_TOKEN");
    torchToken = jsonSelect(devtronSecret, "data.ORCH_TOKEN");
    tdexSecret = jsonSelect(devtronSecret, "data.DEX_SECRET");
    tdexJwtKey = jsonSelect(devtronSecret, "data.DEX_JWTKEY");
    tdexCStoreKey = jsonSelect(devtronSecret, "data.DEX_CSTOREKEY");
}

if texternalCIAPISecret {
    externalCIAPISecret = texternalCIAPISecret;
}
if twebHookToken {
    webHookToken = twebHookToken;
}
if torchToken {
    orchToken = torchToken;
}
if tdexSecret {
    dexSecret = tdexSecret;
}
if tdexJwtKey {
    dexJwtKey = tdexJwtKey;
}
if tdexCStoreKey {
    dexCStoreKey = tdexCStoreKey;
}


kubeYamlEdit(devtron, "data.EXTERNAL_CI_API_SECRET", externalCIAPISecret, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.WEBHOOK_TOKEN", webHookToken, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.ORCH_TOKEN", orchToken, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_SECRET", dexSecret, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_JWTKEY", dexJwtKey, `/Secret//devtron-secret`);
kubeYamlEdit(devtron, "data.DEX_CSTOREKEY", dexCStoreKey, `/Secret//devtron-secret`);

if helmInstallation {
  kubeYamlDelete(devtron, filter=`/Service//devtron-service`);
}

devtron = kubectl apply -n devtroncd devtron -u devtronOverride;
log("executed devtron setup");

## Applying Housekeeping Job
appHousekeeping = kubectl apply -n devtroncd devtronHousekeeping -u devtronHousekeepingOverride;
log("executed devtron-housekeeping setup");
