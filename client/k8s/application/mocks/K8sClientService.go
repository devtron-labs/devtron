// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	application "github.com/devtron-labs/devtron/client/k8s/application"

	io "io"

	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"

	types "k8s.io/apimachinery/pkg/types"
)

// K8sClientService is an autogenerated mock type for the K8sClientService type
type K8sClientService struct {
	mock.Mock
}

// ApplyResource provides a mock function with given fields: ctx, restConfig, request, manifest
func (_m *K8sClientService) ApplyResource(ctx context.Context, restConfig *rest.Config, request *application.K8sRequestBean, manifest string) (*application.ManifestResponse, error) {
	ret := _m.Called(ctx, restConfig, request, manifest)

	var r0 *application.ManifestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, *application.K8sRequestBean, string) *application.ManifestResponse); ok {
		r0 = rf(ctx, restConfig, request, manifest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.ManifestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, *application.K8sRequestBean, string) error); ok {
		r1 = rf(ctx, restConfig, request, manifest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResource provides a mock function with given fields: ctx, restConfig, request, manifest
func (_m *K8sClientService) CreateResource(ctx context.Context, restConfig *rest.Config, request *application.K8sRequestBean, manifest string) (*application.ManifestResponse, error) {
	ret := _m.Called(ctx, restConfig, request, manifest)

	var r0 *application.ManifestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, *application.K8sRequestBean, string) *application.ManifestResponse); ok {
		r0 = rf(ctx, restConfig, request, manifest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.ManifestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, *application.K8sRequestBean, string) error); ok {
		r1 = rf(ctx, restConfig, request, manifest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: ctx, restConfig, request
func (_m *K8sClientService) DeleteResource(ctx context.Context, restConfig *rest.Config, request *application.K8sRequestBean) (*application.ManifestResponse, error) {
	ret := _m.Called(ctx, restConfig, request)

	var r0 *application.ManifestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, *application.K8sRequestBean) *application.ManifestResponse); ok {
		r0 = rf(ctx, restConfig, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.ManifestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, *application.K8sRequestBean) error); ok {
		r1 = rf(ctx, restConfig, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiResources provides a mock function with given fields: restConfig, includeOnlyVerb
func (_m *K8sClientService) GetApiResources(restConfig *rest.Config, includeOnlyVerb string) ([]*application.K8sApiResource, error) {
	ret := _m.Called(restConfig, includeOnlyVerb)

	var r0 []*application.K8sApiResource
	if rf, ok := ret.Get(0).(func(*rest.Config, string) []*application.K8sApiResource); ok {
		r0 = rf(restConfig, includeOnlyVerb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*application.K8sApiResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*rest.Config, string) error); ok {
		r1 = rf(restConfig, includeOnlyVerb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPodLogs provides a mock function with given fields: ctx, restConfig, request
func (_m *K8sClientService) GetPodLogs(ctx context.Context, restConfig *rest.Config, request *application.K8sRequestBean) (io.ReadCloser, error) {
	ret := _m.Called(ctx, restConfig, request)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, *application.K8sRequestBean) io.ReadCloser); ok {
		r0 = rf(ctx, restConfig, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, *application.K8sRequestBean) error); ok {
		r1 = rf(ctx, restConfig, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResource provides a mock function with given fields: ctx, restConfig, request
func (_m *K8sClientService) GetResource(ctx context.Context, restConfig *rest.Config, request *application.K8sRequestBean) (*application.ManifestResponse, error) {
	ret := _m.Called(ctx, restConfig, request)

	var r0 *application.ManifestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, *application.K8sRequestBean) *application.ManifestResponse); ok {
		r0 = rf(ctx, restConfig, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.ManifestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, *application.K8sRequestBean) error); ok {
		r1 = rf(ctx, restConfig, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceList provides a mock function with given fields: ctx, restConfig, request
func (_m *K8sClientService) GetResourceList(ctx context.Context, restConfig *rest.Config, request *application.K8sRequestBean) (*application.ResourceListResponse, bool, error) {
	ret := _m.Called(ctx, restConfig, request)

	var r0 *application.ResourceListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, *application.K8sRequestBean) *application.ResourceListResponse); ok {
		r0 = rf(ctx, restConfig, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.ResourceListResponse)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, *application.K8sRequestBean) bool); ok {
		r1 = rf(ctx, restConfig, request)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *rest.Config, *application.K8sRequestBean) error); ok {
		r2 = rf(ctx, restConfig, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListEvents provides a mock function with given fields: ctx, restConfig, request
func (_m *K8sClientService) ListEvents(ctx context.Context, restConfig *rest.Config, request *application.K8sRequestBean) (*application.EventsResponse, error) {
	ret := _m.Called(ctx, restConfig, request)

	var r0 *application.EventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, *application.K8sRequestBean) *application.EventsResponse); ok {
		r0 = rf(ctx, restConfig, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.EventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, *application.K8sRequestBean) error); ok {
		r1 = rf(ctx, restConfig, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchResource provides a mock function with given fields: ctx, restConfig, pt, request, manifest
func (_m *K8sClientService) PatchResource(ctx context.Context, restConfig *rest.Config, pt types.PatchType, request *application.K8sRequestBean, manifest string) (*application.ManifestResponse, error) {
	ret := _m.Called(ctx, restConfig, pt, request, manifest)

	var r0 *application.ManifestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, types.PatchType, *application.K8sRequestBean, string) *application.ManifestResponse); ok {
		r0 = rf(ctx, restConfig, pt, request, manifest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.ManifestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, types.PatchType, *application.K8sRequestBean, string) error); ok {
		r1 = rf(ctx, restConfig, pt, request, manifest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResource provides a mock function with given fields: ctx, restConfig, request
func (_m *K8sClientService) UpdateResource(ctx context.Context, restConfig *rest.Config, request *application.K8sRequestBean) (*application.ManifestResponse, error) {
	ret := _m.Called(ctx, restConfig, request)

	var r0 *application.ManifestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rest.Config, *application.K8sRequestBean) *application.ManifestResponse); ok {
		r0 = rf(ctx, restConfig, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.ManifestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rest.Config, *application.K8sRequestBean) error); ok {
		r1 = rf(ctx, restConfig, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewK8sClientService interface {
	mock.TestingT
	Cleanup(func())
}

// NewK8sClientService creates a new instance of K8sClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewK8sClientService(t mockConstructorTestingTNewK8sClientService) *K8sClientService {
	mock := &K8sClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
