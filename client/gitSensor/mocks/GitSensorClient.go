// Code generated by MockGen. DO NOT EDIT.
// Source: client/gitSensor/GitSensorClient.go

// Package mock_gitSensor is a generated GoMock package.
package mock_gitSensor

import (
	context "context"
	reflect "reflect"

	gitSensor "github.com/devtron-labs/devtron/client/gitSensor"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddRepo mocks base method.
func (m *MockClient) AddRepo(ctx context.Context, materials []*gitSensor.GitMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepo", ctx, materials)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepo indicates an expected call of AddRepo.
func (mr *MockClientMockRecorder) AddRepo(ctx, materials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepo", reflect.TypeOf((*MockClient)(nil).AddRepo), ctx, materials)
}

// FetchChanges mocks base method.
func (m *MockClient) FetchChanges(ctx context.Context, req *gitSensor.FetchScmChangesRequest) (*gitSensor.MaterialChangeResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchChanges", ctx, req)
	ret0, _ := ret[0].(*gitSensor.MaterialChangeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchChanges indicates an expected call of FetchChanges.
func (mr *MockClientMockRecorder) FetchChanges(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchChanges", reflect.TypeOf((*MockClient)(nil).FetchChanges), ctx, req)
}

// GetAllWebhookEventConfigForHost mocks base method.
func (m *MockClient) GetAllWebhookEventConfigForHost(ctx context.Context, req *gitSensor.WebhookEventConfigRequest) ([]*gitSensor.WebhookEventConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWebhookEventConfigForHost", ctx, req)
	ret0, _ := ret[0].([]*gitSensor.WebhookEventConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWebhookEventConfigForHost indicates an expected call of GetAllWebhookEventConfigForHost.
func (mr *MockClientMockRecorder) GetAllWebhookEventConfigForHost(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWebhookEventConfigForHost", reflect.TypeOf((*MockClient)(nil).GetAllWebhookEventConfigForHost), ctx, req)
}

// GetCommitMetadata mocks base method.
func (m *MockClient) GetCommitMetadata(ctx context.Context, req *gitSensor.CommitMetadataRequest) (*gitSensor.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitMetadata", ctx, req)
	ret0, _ := ret[0].(*gitSensor.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitMetadata indicates an expected call of GetCommitMetadata.
func (mr *MockClientMockRecorder) GetCommitMetadata(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitMetadata", reflect.TypeOf((*MockClient)(nil).GetCommitMetadata), ctx, req)
}

// GetCommitMetadataForPipelineMaterial mocks base method.
func (m *MockClient) GetCommitMetadataForPipelineMaterial(ctx context.Context, req *gitSensor.CommitMetadataRequest) (*gitSensor.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitMetadataForPipelineMaterial", ctx, req)
	ret0, _ := ret[0].(*gitSensor.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitMetadataForPipelineMaterial indicates an expected call of GetCommitMetadataForPipelineMaterial.
func (mr *MockClientMockRecorder) GetCommitMetadataForPipelineMaterial(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitMetadataForPipelineMaterial", reflect.TypeOf((*MockClient)(nil).GetCommitMetadataForPipelineMaterial), ctx, req)
}

// GetHeadForPipelineMaterials mocks base method.
func (m *MockClient) GetHeadForPipelineMaterials(ctx context.Context, req *gitSensor.HeadRequest) ([]*gitSensor.CiPipelineMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadForPipelineMaterials", ctx, req)
	ret0, _ := ret[0].([]*gitSensor.CiPipelineMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadForPipelineMaterials indicates an expected call of GetHeadForPipelineMaterials.
func (mr *MockClientMockRecorder) GetHeadForPipelineMaterials(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadForPipelineMaterials", reflect.TypeOf((*MockClient)(nil).GetHeadForPipelineMaterials), ctx, req)
}

// GetWebhookData mocks base method.
func (m *MockClient) GetWebhookData(ctx context.Context, req *gitSensor.WebhookDataRequest) (*gitSensor.WebhookAndCiData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookData", ctx, req)
	ret0, _ := ret[0].(*gitSensor.WebhookAndCiData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookData indicates an expected call of GetWebhookData.
func (mr *MockClientMockRecorder) GetWebhookData(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookData", reflect.TypeOf((*MockClient)(nil).GetWebhookData), ctx, req)
}

// GetWebhookEventConfig mocks base method.
func (m *MockClient) GetWebhookEventConfig(ctx context.Context, req *gitSensor.WebhookEventConfigRequest) (*gitSensor.WebhookEventConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEventConfig", ctx, req)
	ret0, _ := ret[0].(*gitSensor.WebhookEventConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEventConfig indicates an expected call of GetWebhookEventConfig.
func (mr *MockClientMockRecorder) GetWebhookEventConfig(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEventConfig", reflect.TypeOf((*MockClient)(nil).GetWebhookEventConfig), ctx, req)
}

// GetWebhookPayloadDataForPipelineMaterialId mocks base method.
func (m *MockClient) GetWebhookPayloadDataForPipelineMaterialId(ctx context.Context, req *gitSensor.WebhookPayloadDataRequest) (*gitSensor.WebhookPayloadDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookPayloadDataForPipelineMaterialId", ctx, req)
	ret0, _ := ret[0].(*gitSensor.WebhookPayloadDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookPayloadDataForPipelineMaterialId indicates an expected call of GetWebhookPayloadDataForPipelineMaterialId.
func (mr *MockClientMockRecorder) GetWebhookPayloadDataForPipelineMaterialId(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookPayloadDataForPipelineMaterialId", reflect.TypeOf((*MockClient)(nil).GetWebhookPayloadDataForPipelineMaterialId), ctx, req)
}

// GetWebhookPayloadFilterDataForPipelineMaterialId mocks base method.
func (m *MockClient) GetWebhookPayloadFilterDataForPipelineMaterialId(ctx context.Context, req *gitSensor.WebhookPayloadFilterDataRequest) (*gitSensor.WebhookPayloadFilterDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookPayloadFilterDataForPipelineMaterialId", ctx, req)
	ret0, _ := ret[0].(*gitSensor.WebhookPayloadFilterDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookPayloadFilterDataForPipelineMaterialId indicates an expected call of GetWebhookPayloadFilterDataForPipelineMaterialId.
func (mr *MockClientMockRecorder) GetWebhookPayloadFilterDataForPipelineMaterialId(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookPayloadFilterDataForPipelineMaterialId", reflect.TypeOf((*MockClient)(nil).GetWebhookPayloadFilterDataForPipelineMaterialId), ctx, req)
}

// RefreshGitMaterial mocks base method.
func (m *MockClient) RefreshGitMaterial(ctx context.Context, req *gitSensor.RefreshGitMaterialRequest) (*gitSensor.RefreshGitMaterialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshGitMaterial", ctx, req)
	ret0, _ := ret[0].(*gitSensor.RefreshGitMaterialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshGitMaterial indicates an expected call of RefreshGitMaterial.
func (mr *MockClientMockRecorder) RefreshGitMaterial(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshGitMaterial", reflect.TypeOf((*MockClient)(nil).RefreshGitMaterial), ctx, req)
}

// SaveGitProvider mocks base method.
func (m *MockClient) SaveGitProvider(ctx context.Context, provider *gitSensor.GitProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGitProvider", ctx, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGitProvider indicates an expected call of SaveGitProvider.
func (mr *MockClientMockRecorder) SaveGitProvider(ctx, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGitProvider", reflect.TypeOf((*MockClient)(nil).SaveGitProvider), ctx, provider)
}

// SavePipelineMaterial mocks base method.
func (m *MockClient) SavePipelineMaterial(ctx context.Context, ciPipelineMaterials []*gitSensor.CiPipelineMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePipelineMaterial", ctx, ciPipelineMaterials)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePipelineMaterial indicates an expected call of SavePipelineMaterial.
func (mr *MockClientMockRecorder) SavePipelineMaterial(ctx, ciPipelineMaterials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePipelineMaterial", reflect.TypeOf((*MockClient)(nil).SavePipelineMaterial), ctx, ciPipelineMaterials)
}

// UpdateRepo mocks base method.
func (m *MockClient) UpdateRepo(ctx context.Context, material *gitSensor.GitMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepo", ctx, material)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepo indicates an expected call of UpdateRepo.
func (mr *MockClientMockRecorder) UpdateRepo(ctx, material interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockClient)(nil).UpdateRepo), ctx, material)
}
